//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  ROCKY671B
//  DateTime: 17/3/4 00:36:21
//  UserName: rocky
//  GPLEX input file <Shaderlab.lex - 17/3/4 00:36:19>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, noParser, noFiles, minimize
//  Option settings: classes, compressMap, compressNext, embedbuffers
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STANDALONE
#define NOFILES
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using System.Runtime.Serialization.Formatters.Binary;
using System.Xml.Serialization;
using System.Linq;

namespace ShaderlabVS.Lexer
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 18;
        const int initial = 19;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int COMMENT = 1;

#region user code
/**********************************************************************************/
/********************************User Defined Code*********************************/
/**********************************************************************************/
public static void GenerateTableData()
        {
            List<TableWrapper> dataCopied = new List<TableWrapper>();
            foreach (var item in NxS)
            {
                dataCopied.Add(TableToWrapper(item));
            }

            XmlSerializer serializer = new XmlSerializer(typeof(List<TableWrapper>));
            serializer.Serialize(new FileStream("lex.xml", FileMode.OpenOrCreate), dataCopied);
        }

    public static void LoadTableDataFromLex()
    {
        string currentAssemblyDir = (new FileInfo(System.Reflection.Assembly.GetExecutingAssembly().CodeBase.Substring(8))).DirectoryName;
        string dataPath = Path.Combine(currentAssemblyDir, "lex.xml");
        if (File.Exists(dataPath))
        {
            XmlSerializer serializer = new XmlSerializer(typeof(List<TableWrapper>));
            var datalist = serializer.Deserialize(new FileStream(dataPath, FileMode.Open)) as List<TableWrapper>;
            if (datalist != null)
            {
                NxS = datalist.Select(d => WrapperToTable(d)).ToArray();
            }
        }
    }

    private static TableWrapper TableToWrapper(Table table)
    {
        return new TableWrapper()
        {
            min = table.min,
            rng = table.rng,
            dflt = table.dflt,
            nxt = table.nxt
        };
    }

    private static Table WrapperToTable(TableWrapper wrapper)
    {
        return new Table(wrapper.min, wrapper.rng, wrapper.dflt, wrapper.nxt);
    }

    [Serializable]
    public class TableWrapper
    {
        public int min;
        public int rng;
        public int dflt;
        public short[] nxt;

        public TableWrapper()
        {

        }
    }

    public int NextToken() { return yylex(); }
    public int GetPos() { return yypos; }
    public int GetLength() { return yyleng; }
    public void PushbackText(int length) { yyless(length); }
/********************************Rules Section*********************************/
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {19, 2020, 0};

#region CompressedCharacterMap
    //
    // There are 64 equivalence classes
    // There are 2 character sequence regions
    // There are 1 tables, 126 entries
    // There are 1 runs, 0 singletons
    // Decision tree depth is 1
    //
    static sbyte[] mapC0 = new sbyte[126] {
/*     '\0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 6, 6, 6, 2, 2, 
/*   '\x10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x20' */ 54, 14, 4, 62, 2, 9, 17, 2, 20, 21, 3, 7, 16, 8, 2, 1, 
/*      '0' */ 52, 48, 49, 50, 55, 56, 57, 58, 59, 60, 53, 15, 11, 13, 12, 2, 
/*      '@' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*      'P' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 22, 5, 23, 2, 61, 
/*      '`' */ 2, 38, 37, 34, 24, 26, 29, 42, 35, 31, 63, 47, 27, 43, 36, 25, 
/*      'p' */ 40, 51, 30, 28, 33, 39, 41, 32, 45, 44, 46, 18, 10, 19 };

    static sbyte MapC(int code)
    { // '\0' <= code <= '\U0010FFFF'
      if (code < 126) // '\0' <= code <= '}'
        return mapC0[code - 0];
      else // '~' <= code <= '\U0010FFFF'
        return (sbyte)2;
    }
#endregion

    static Table[] NxS = new Table[2021] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "\t"
      new Table(24, 39, -1, new short[] {484, 485, 486, 487, 488, 489, 
          490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, -1, -1, 
          504, -1, -1, 505, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 506, 
          507}),
/* NxS[   2] */ new Table(0, 0, -1, null), // Shortest string ":fog/"
/* NxS[   3] */ new Table(0, 0, -1, null), // Shortest string "/#do\t"
/* NxS[   4] */ // Shortest string "/#do\x20"
      new Table(54, 17, 534, new short[] {4, 534, 534, 534, 534, 534, 
          534, 534, 534, 534, 3, 534, 534, 533, 534, 534, 4}),
/* NxS[   5] */ new Table(0, 0, -1, null), // Shortest string "/_time/"
/* NxS[   6] */ new Table(0, 0, -1, null), // Shortest string "/2d/"
/* NxS[   7] */ new Table(0, 0, -1, null), // Shortest string "/lod/"
/* NxS[   8] */ // Shortest string "/lod\x20"
      new Table(54, 34, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}),
/* NxS[   9] */ new Table(0, 0, -1, null), // Shortest string "/ddy("
/* NxS[  10] */ new Table(0, 0, -1, null), // Shortest string "/int/"
/* NxS[  11] */ new Table(0, 0, -1, null), // Shortest string "/in/"
/* NxS[  12] */ // Shortest string "/pass\x20"
      new Table(54, 34, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}),
/* NxS[  13] */ new Table(0, 0, -1, null), // Shortest string "/spot/"
/* NxS[  14] */ new Table(0, 0, -1, null), // Shortest string "/unpacknormal("
/* NxS[  15] */ new Table(0, 0, -1, null), // Shortest string "/do/"
/* NxS[  16] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  17] */ // Shortest string "//"
      new Table(0, 1, 17, new short[] {-1}),
/* NxS[  18] */ new Table(0, 0, -1, null), // Shortest string "/**/"
/* NxS[  19] */ // Shortest string ""
      new Table(53, 35, -1, new short[] {23, 1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1, 20, -1, 21, 22, -1, 1, 21, 21, 21, 21, 
          21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21}),
/* NxS[  20] */ // Shortest string "/"
      new Table(24, 44, -1, new short[] {484, 485, 486, 487, 488, 489, 
          490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, -1, -1, 
          504, -1, -1, 505, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 506, 
          507, -1, -1, 17, -1, 2018}),
/* NxS[  21] */ // Shortest string "*"
      new Table(24, 39, -1, new short[] {484, 485, 486, 487, 488, 489, 
          490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, -1, -1, 
          504, -1, -1, 505, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 506, 
          507}),
/* NxS[  22] */ // Shortest string "\""
      new Table(4, 2, 22, new short[] {16, 2017}),
/* NxS[  23] */ // Shortest string ":"
      new Table(24, 31, -1, new short[] {24, -1, -1, -1, 25, 26, 
          27, -1, -1, 28, 29, -1, 147, 30, 31, -1, 32, 33, -1, 34, -1, -1, 
          35, -1, -1, -1, -1, -1, -1, -1, 23}),
/* NxS[  24] */ // Shortest string ":d"
      new Table(26, 6, -1, new short[] {461, -1, -1, -1, -1, 462}),
/* NxS[  25] */ // Shortest string ":s"
      new Table(27, 15, -1, new short[] {263, -1, -1, 264, -1, -1, 
          265, 266, -1, -1, -1, -1, -1, 267, 268}),
/* NxS[  26] */ // Shortest string ":f"
      new Table(25, 7, -1, new short[] {242, -1, -1, -1, -1, 243, 
          244}),
/* NxS[  27] */ // Shortest string ":r"
      new Table(26, 1, -1, new short[] {219}),
/* NxS[  28] */ // Shortest string ":t"
      new Table(26, 13, -1, new short[] {199, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 200}),
/* NxS[  29] */ // Shortest string ":c"
      new Table(25, 15, -1, new short[] {180, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 181}),
/* NxS[  30] */ // Shortest string ":b"
      new Table(25, 14, -1, new short[] {121, -1, 122, -1, -1, -1, 
          123, -1, -1, -1, -1, -1, -1, 124}),
/* NxS[  31] */ // Shortest string ":a"
      new Table(24, 13, -1, new short[] {91, -1, -1, 92, -1, -1, 
          -1, -1, -1, -1, -1, -1, 93}),
/* NxS[  32] */ // Shortest string ":p"
      new Table(25, 4, -1, new short[] {80, -1, -1, 81}),
/* NxS[  33] */ // Shortest string ":v"
      new Table(29, 12, -1, new short[] {77, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 78}),
/* NxS[  34] */ // Shortest string ":m"
      new Table(31, 9, -1, new short[] {46, -1, -1, -1, -1, -1, 
          -1, 47, 48}),
/* NxS[  35] */ // Shortest string ":z"
      new Table(34, 1, -1, new short[] {36}),
/* NxS[  36] */ // Shortest string ":zc"
      new Table(27, 1, -1, new short[] {37}),
/* NxS[  37] */ // Shortest string ":zcl"
      new Table(31, 1, -1, new short[] {38}),
/* NxS[  38] */ // Shortest string ":zcli"
      new Table(40, 1, -1, new short[] {39}),
/* NxS[  39] */ // Shortest string ":zclip"
      new Table(26, 1, -1, new short[] {40}),
/* NxS[  40] */ // Shortest string ":depthe"
      new Table(36, 1, -1, new short[] {41}),
/* NxS[  41] */ // Shortest string ":depthen"
      new Table(38, 1, -1, new short[] {42}),
/* NxS[  42] */ // Shortest string ":depthena"
      new Table(37, 1, -1, new short[] {43}),
/* NxS[  43] */ // Shortest string ":depthenab"
      new Table(27, 1, -1, new short[] {44}),
/* NxS[  44] */ // Shortest string ":vfac"
      new Table(26, 1, -1, new short[] {45}),
/* NxS[  45] */ // Shortest string ":fog"
      new Table(54, 34, -1, new short[] {2, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 2, 2, -1, 2, -1, -1, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}),
/* NxS[  46] */ // Shortest string ":mi"
      new Table(36, 5, -1, new short[] {69, -1, -1, -1, 70}),
/* NxS[  47] */ // Shortest string ":ma"
      new Table(45, 1, -1, new short[] {57}),
/* NxS[  48] */ // Shortest string ":mu"
      new Table(27, 1, -1, new short[] {49}),
/* NxS[  49] */ // Shortest string ":mul"
      new Table(33, 1, -1, new short[] {50}),
/* NxS[  50] */ // Shortest string ":mult"
      new Table(31, 1, -1, new short[] {51}),
/* NxS[  51] */ // Shortest string ":multi"
      new Table(28, 1, -1, new short[] {52}),
/* NxS[  52] */ // Shortest string ":multis"
      new Table(38, 1, -1, new short[] {53}),
/* NxS[  53] */ // Shortest string ":multisa"
      new Table(43, 1, -1, new short[] {54}),
/* NxS[  54] */ // Shortest string ":multisam"
      new Table(40, 1, -1, new short[] {55}),
/* NxS[  55] */ // Shortest string ":multisamp"
      new Table(27, 1, -1, new short[] {56}),
/* NxS[  56] */ // Shortest string ":multisampl"
      new Table(26, 1, -1, new short[] {39}),
/* NxS[  57] */ // Shortest string ":max"
      new Table(27, 12, -1, new short[] {58, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 59}),
/* NxS[  58] */ // Shortest string ":minl"
      new Table(25, 1, -1, new short[] {68}),
/* NxS[  59] */ // Shortest string ":maxa"
      new Table(36, 1, -1, new short[] {60}),
/* NxS[  60] */ // Shortest string ":maxan"
      new Table(31, 1, -1, new short[] {61}),
/* NxS[  61] */ // Shortest string ":maxani"
      new Table(28, 1, -1, new short[] {62}),
/* NxS[  62] */ // Shortest string ":maxanis"
      new Table(25, 1, -1, new short[] {63}),
/* NxS[  63] */ // Shortest string ":maxaniso"
      new Table(33, 1, -1, new short[] {64}),
/* NxS[  64] */ // Shortest string ":maxanisot"
      new Table(30, 1, -1, new short[] {65}),
/* NxS[  65] */ // Shortest string ":maxanisotr"
      new Table(25, 1, -1, new short[] {66}),
/* NxS[  66] */ // Shortest string ":maxanisotro"
      new Table(40, 1, -1, new short[] {67}),
/* NxS[  67] */ // Shortest string ":maxanisotrop"
      new Table(44, 1, -1, new short[] {45}),
/* NxS[  68] */ // Shortest string ":minlo"
      new Table(24, 1, -1, new short[] {45}),
/* NxS[  69] */ // Shortest string ":min"
      new Table(27, 1, -1, new short[] {58}),
/* NxS[  70] */ // Shortest string ":mip"
      new Table(27, 1, -1, new short[] {71}),
/* NxS[  71] */ // Shortest string ":mipl"
      new Table(25, 1, -1, new short[] {72}),
/* NxS[  72] */ // Shortest string ":miplo"
      new Table(24, 1, -1, new short[] {73}),
/* NxS[  73] */ // Shortest string ":miplod"
      new Table(37, 1, -1, new short[] {74}),
/* NxS[  74] */ // Shortest string ":miplodb"
      new Table(31, 1, -1, new short[] {75}),
/* NxS[  75] */ // Shortest string ":miplodbi"
      new Table(38, 1, -1, new short[] {76}),
/* NxS[  76] */ // Shortest string ":vpo"
      new Table(28, 1, -1, new short[] {45}),
/* NxS[  77] */ // Shortest string ":vf"
      new Table(38, 1, -1, new short[] {79}),
/* NxS[  78] */ // Shortest string ":vp"
      new Table(25, 1, -1, new short[] {76}),
/* NxS[  79] */ // Shortest string ":vfa"
      new Table(34, 1, -1, new short[] {44}),
/* NxS[  80] */ // Shortest string ":po"
      new Table(28, 1, -1, new short[] {86}),
/* NxS[  81] */ // Shortest string ":ps"
      new Table(31, 1, -1, new short[] {82}),
/* NxS[  82] */ // Shortest string ":psi"
      new Table(46, 1, -1, new short[] {83}),
/* NxS[  83] */ // Shortest string ":psiz"
      new Table(26, 1, -1, new short[] {84}),
/* NxS[  84] */ // Shortest string ":psize"
      new Table(48, 40, -1, new short[] {85, 45, 45, -1, 45, -1, 
          2, 45, 45, 45, 45, 45, 45, -1, -1, -1, 2, 2, -1, 2, -1, -1, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2}),
/* NxS[  85] */ // Shortest string ":psize1"
      new Table(48, 40, -1, new short[] {45, -1, -1, -1, 45, -1, 
          2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, -1, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2}),
/* NxS[  86] */ // Shortest string ":pos"
      new Table(31, 1, -1, new short[] {87}),
/* NxS[  87] */ // Shortest string ":posi"
      new Table(33, 1, -1, new short[] {88}),
/* NxS[  88] */ // Shortest string ":posit"
      new Table(31, 1, -1, new short[] {89}),
/* NxS[  89] */ // Shortest string ":positi"
      new Table(25, 1, -1, new short[] {90}),
/* NxS[  90] */ // Shortest string ":positio"
      new Table(36, 1, -1, new short[] {84}),
/* NxS[  91] */ // Shortest string ":ad"
      new Table(24, 1, -1, new short[] {116}),
/* NxS[  92] */ // Shortest string ":al"
      new Table(40, 1, -1, new short[] {105}),
/* NxS[  93] */ // Shortest string ":an"
      new Table(33, 1, -1, new short[] {94}),
/* NxS[  94] */ // Shortest string ":ant"
      new Table(31, 1, -1, new short[] {95}),
/* NxS[  95] */ // Shortest string ":anti"
      new Table(38, 1, -1, new short[] {96}),
/* NxS[  96] */ // Shortest string ":antia"
      new Table(27, 1, -1, new short[] {97}),
/* NxS[  97] */ // Shortest string ":antial"
      new Table(31, 1, -1, new short[] {98}),
/* NxS[  98] */ // Shortest string ":antiali"
      new Table(38, 1, -1, new short[] {99}),
/* NxS[  99] */ // Shortest string ":antialia"
      new Table(28, 1, -1, new short[] {100}),
/* NxS[ 100] */ // Shortest string ":antialias"
      new Table(26, 1, -1, new short[] {101}),
/* NxS[ 101] */ // Shortest string ":antialiase"
      new Table(24, 1, -1, new short[] {102}),
/* NxS[ 102] */ // Shortest string ":antialiased"
      new Table(27, 1, -1, new short[] {103}),
/* NxS[ 103] */ // Shortest string ":antialiasedl"
      new Table(31, 1, -1, new short[] {104}),
/* NxS[ 104] */ // Shortest string ":antialiasedli"
      new Table(36, 1, -1, new short[] {56}),
/* NxS[ 105] */ // Shortest string ":alp"
      new Table(35, 1, -1, new short[] {106}),
/* NxS[ 106] */ // Shortest string ":alph"
      new Table(38, 1, -1, new short[] {107}),
/* NxS[ 107] */ // Shortest string ":alpha"
      new Table(33, 1, -1, new short[] {108}),
/* NxS[ 108] */ // Shortest string ":alphat"
      new Table(25, 1, -1, new short[] {109}),
/* NxS[ 109] */ // Shortest string ":alphato"
      new Table(34, 1, -1, new short[] {110}),
/* NxS[ 110] */ // Shortest string ":alphatoc"
      new Table(25, 1, -1, new short[] {111}),
/* NxS[ 111] */ // Shortest string ":alphatoco"
      new Table(41, 1, -1, new short[] {112}),
/* NxS[ 112] */ // Shortest string ":alphatocov"
      new Table(26, 1, -1, new short[] {113}),
/* NxS[ 113] */ // Shortest string ":alphatocove"
      new Table(30, 1, -1, new short[] {114}),
/* NxS[ 114] */ // Shortest string ":alphatocover"
      new Table(38, 1, -1, new short[] {115}),
/* NxS[ 115] */ // Shortest string ":alphatocovera"
      new Table(42, 1, -1, new short[] {56}),
/* NxS[ 116] */ // Shortest string ":add"
      new Table(30, 1, -1, new short[] {117}),
/* NxS[ 117] */ // Shortest string ":addr"
      new Table(26, 1, -1, new short[] {118}),
/* NxS[ 118] */ // Shortest string ":addre"
      new Table(28, 1, -1, new short[] {119}),
/* NxS[ 119] */ // Shortest string ":addres"
      new Table(28, 1, -1, new short[] {120}),
/* NxS[ 120] */ // Shortest string ":address"
      new Table(32, 10, -1, new short[] {45, -1, -1, -1, -1, -1, 
          -1, 45, -1, 45}),
/* NxS[ 121] */ // Shortest string ":bo"
      new Table(30, 1, -1, new short[] {172}),
/* NxS[ 122] */ // Shortest string ":bl"
      new Table(26, 1, -1, new short[] {152}),
/* NxS[ 123] */ // Shortest string ":bi"
      new Table(36, 1, -1, new short[] {147}),
/* NxS[ 124] */ // Shortest string ":ba"
      new Table(34, 1, -1, new short[] {125}),
/* NxS[ 125] */ // Shortest string ":bac"
      new Table(47, 1, -1, new short[] {126}),
/* NxS[ 126] */ // Shortest string ":back"
      new Table(29, 1, -1, new short[] {127}),
/* NxS[ 127] */ // Shortest string ":backf"
      new Table(38, 1, -1, new short[] {128}),
/* NxS[ 128] */ // Shortest string ":backfa"
      new Table(34, 1, -1, new short[] {129}),
/* NxS[ 129] */ // Shortest string ":backfac"
      new Table(26, 1, -1, new short[] {130}),
/* NxS[ 130] */ // Shortest string ":backface"
      new Table(28, 1, -1, new short[] {131}),
/* NxS[ 131] */ // Shortest string ":backfaces"
      new Table(33, 1, -1, new short[] {132}),
/* NxS[ 132] */ // Shortest string ":backfacest"
      new Table(26, 1, -1, new short[] {133}),
/* NxS[ 133] */ // Shortest string ":backfaceste"
      new Table(36, 1, -1, new short[] {134}),
/* NxS[ 134] */ // Shortest string ":backfacesten"
      new Table(34, 1, -1, new short[] {135}),
/* NxS[ 135] */ // Shortest string ":backfacestenc"
      new Table(31, 1, -1, new short[] {136}),
/* NxS[ 136] */ // Shortest string ":backfacestenci"
      new Table(27, 1, -1, new short[] {137}),
/* NxS[ 137] */ // Shortest string ":backfacestencil"
      new Table(29, 18, -1, new short[] {138, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 139, -1, -1, -1, -1, -1, 140}),
/* NxS[ 138] */ // Shortest string ":backfacestencilf"
      new Table(38, 2, -1, new short[] {142, 145}),
/* NxS[ 139] */ // Shortest string ":backfacestencilp"
      new Table(38, 1, -1, new short[] {144}),
/* NxS[ 140] */ // Shortest string ":backfacestencilz"
      new Table(29, 1, -1, new short[] {141}),
/* NxS[ 141] */ // Shortest string ":backfacestencilzf"
      new Table(38, 1, -1, new short[] {142}),
/* NxS[ 142] */ // Shortest string ":backfacestencilfa"
      new Table(31, 1, -1, new short[] {143}),
/* NxS[ 143] */ // Shortest string ":backfacestencilfai"
      new Table(27, 1, -1, new short[] {45}),
/* NxS[ 144] */ // Shortest string ":backfacestencilpa"
      new Table(28, 1, -1, new short[] {76}),
/* NxS[ 145] */ // Shortest string ":depthfu"
      new Table(36, 1, -1, new short[] {146}),
/* NxS[ 146] */ // Shortest string ":depthfun"
      new Table(34, 1, -1, new short[] {45}),
/* NxS[ 147] */ // Shortest string ":n"
      new Table(25, 1, -1, new short[] {148}),
/* NxS[ 148] */ // Shortest string ":no"
      new Table(30, 1, -1, new short[] {149}),
/* NxS[ 149] */ // Shortest string ":nor"
      new Table(43, 1, -1, new short[] {150}),
/* NxS[ 150] */ // Shortest string ":norm"
      new Table(38, 1, -1, new short[] {151}),
/* NxS[ 151] */ // Shortest string ":norma"
      new Table(27, 1, -1, new short[] {84}),
/* NxS[ 152] */ // Shortest string ":ble"
      new Table(36, 1, -1, new short[] {153}),
/* NxS[ 153] */ // Shortest string ":blen"
      new Table(24, 1, -1, new short[] {154}),
/* NxS[ 154] */ // Shortest string ":blend"
      new Table(25, 8, -1, new short[] {155, 40, -1, -1, -1, -1, 
          156, 157}),
/* NxS[ 155] */ // Shortest string ":blendo"
      new Table(40, 1, -1, new short[] {167}),
/* NxS[ 156] */ // Shortest string ":blendi"
      new Table(36, 1, -1, new short[] {163}),
/* NxS[ 157] */ // Shortest string ":blendw"
      new Table(26, 1, -1, new short[] {158}),
/* NxS[ 158] */ // Shortest string ":blendwe"
      new Table(31, 1, -1, new short[] {159}),
/* NxS[ 159] */ // Shortest string ":blendwei"
      new Table(42, 1, -1, new short[] {160}),
/* NxS[ 160] */ // Shortest string ":blendweig"
      new Table(35, 1, -1, new short[] {161}),
/* NxS[ 161] */ // Shortest string ":blendweigh"
      new Table(33, 1, -1, new short[] {162}),
/* NxS[ 162] */ // Shortest string ":blendindice"
      new Table(28, 1, -1, new short[] {84}),
/* NxS[ 163] */ // Shortest string ":blendin"
      new Table(24, 1, -1, new short[] {164}),
/* NxS[ 164] */ // Shortest string ":blendind"
      new Table(31, 1, -1, new short[] {165}),
/* NxS[ 165] */ // Shortest string ":blendindi"
      new Table(34, 1, -1, new short[] {166}),
/* NxS[ 166] */ // Shortest string ":blendindic"
      new Table(26, 1, -1, new short[] {162}),
/* NxS[ 167] */ // Shortest string ":blendop"
      new Table(24, 46, 2, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 168, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 2, 2, -1, 2, -1, -1}),
/* NxS[ 168] */ // Shortest string ":blendopa"
      new Table(27, 1, -1, new short[] {169}),
/* NxS[ 169] */ // Shortest string ":blendopal"
      new Table(40, 1, -1, new short[] {170}),
/* NxS[ 170] */ // Shortest string ":blendopalp"
      new Table(35, 1, -1, new short[] {171}),
/* NxS[ 171] */ // Shortest string ":blendopalph"
      new Table(38, 1, -1, new short[] {45}),
/* NxS[ 172] */ // Shortest string ":bor"
      new Table(24, 1, -1, new short[] {173}),
/* NxS[ 173] */ // Shortest string ":bord"
      new Table(26, 1, -1, new short[] {174}),
/* NxS[ 174] */ // Shortest string ":borde"
      new Table(30, 1, -1, new short[] {175}),
/* NxS[ 175] */ // Shortest string ":border"
      new Table(34, 1, -1, new short[] {176}),
/* NxS[ 176] */ // Shortest string ":borderc"
      new Table(25, 1, -1, new short[] {177}),
/* NxS[ 177] */ // Shortest string ":borderco"
      new Table(27, 1, -1, new short[] {178}),
/* NxS[ 178] */ // Shortest string ":bordercol"
      new Table(25, 1, -1, new short[] {179}),
/* NxS[ 179] */ // Shortest string ":filte"
      new Table(30, 1, -1, new short[] {45}),
/* NxS[ 180] */ // Shortest string ":co"
      new Table(27, 17, -1, new short[] {186, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 187}),
/* NxS[ 181] */ // Shortest string ":cu"
      new Table(27, 1, -1, new short[] {182}),
/* NxS[ 182] */ // Shortest string ":cul"
      new Table(27, 1, -1, new short[] {183}),
/* NxS[ 183] */ // Shortest string ":fill"
      new Table(43, 1, -1, new short[] {184}),
/* NxS[ 184] */ // Shortest string ":fillm"
      new Table(25, 1, -1, new short[] {185}),
/* NxS[ 185] */ // Shortest string ":fillmo"
      new Table(24, 1, -1, new short[] {44}),
/* NxS[ 186] */ // Shortest string ":col"
      new Table(25, 1, -1, new short[] {196}),
/* NxS[ 187] */ // Shortest string ":com"
      new Table(40, 1, -1, new short[] {188}),
/* NxS[ 188] */ // Shortest string ":comp"
      new Table(38, 1, -1, new short[] {189}),
/* NxS[ 189] */ // Shortest string ":compa"
      new Table(30, 1, -1, new short[] {190}),
/* NxS[ 190] */ // Shortest string ":compar"
      new Table(31, 1, -1, new short[] {191}),
/* NxS[ 191] */ // Shortest string ":compari"
      new Table(28, 1, -1, new short[] {192}),
/* NxS[ 192] */ // Shortest string ":comparis"
      new Table(25, 1, -1, new short[] {193}),
/* NxS[ 193] */ // Shortest string ":compariso"
      new Table(36, 1, -1, new short[] {194}),
/* NxS[ 194] */ // Shortest string ":comparison"
      new Table(29, 1, -1, new short[] {195}),
/* NxS[ 195] */ // Shortest string ":depthf"
      new Table(39, 1, -1, new short[] {145}),
/* NxS[ 196] */ // Shortest string ":colo"
      new Table(30, 1, -1, new short[] {197}),
/* NxS[ 197] */ // Shortest string ":color"
      new Table(48, 40, -1, new short[] {198, 45, 45, -1, 45, -1, 
          2, 45, 45, 45, 45, 45, 45, -1, -1, -1, 2, 2, -1, 2, -1, -1, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2}),
/* NxS[ 198] */ // Shortest string ":color1"
      new Table(48, 40, -1, new short[] {45, 45, 45, -1, 45, -1, 
          2, 45, 45, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, -1, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2}),
/* NxS[ 199] */ // Shortest string ":te"
      new Table(28, 18, -1, new short[] {205, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 206}),
/* NxS[ 200] */ // Shortest string ":ta"
      new Table(36, 1, -1, new short[] {201}),
/* NxS[ 201] */ // Shortest string ":tan"
      new Table(42, 1, -1, new short[] {202}),
/* NxS[ 202] */ // Shortest string ":tang"
      new Table(26, 1, -1, new short[] {203}),
/* NxS[ 203] */ // Shortest string ":tange"
      new Table(36, 1, -1, new short[] {204}),
/* NxS[ 204] */ // Shortest string ":tangen"
      new Table(33, 1, -1, new short[] {84}),
/* NxS[ 205] */ // Shortest string ":tes"
      new Table(28, 1, -1, new short[] {213}),
/* NxS[ 206] */ // Shortest string ":tex"
      new Table(34, 1, -1, new short[] {207}),
/* NxS[ 207] */ // Shortest string ":texc"
      new Table(25, 1, -1, new short[] {208}),
/* NxS[ 208] */ // Shortest string ":texco"
      new Table(25, 1, -1, new short[] {209}),
/* NxS[ 209] */ // Shortest string ":texcoo"
      new Table(30, 1, -1, new short[] {210}),
/* NxS[ 210] */ // Shortest string ":texcoor"
      new Table(24, 1, -1, new short[] {211}),
/* NxS[ 211] */ // Shortest string ":texcoord"
      new Table(48, 40, -1, new short[] {212, 45, 45, -1, 45, -1, 
          2, 45, 45, 45, 45, 45, 45, -1, -1, -1, 2, 2, -1, 2, -1, -1, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2}),
/* NxS[ 212] */ // Shortest string ":texcoord1"
      new Table(48, 40, -1, new short[] {45, 45, 45, -1, 45, -1, 
          2, 45, 45, -1, -1, -1, 45, -1, -1, -1, 2, 2, -1, 2, -1, -1, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2}),
/* NxS[ 213] */ // Shortest string ":tess"
      new Table(29, 1, -1, new short[] {214}),
/* NxS[ 214] */ // Shortest string ":tessf"
      new Table(38, 1, -1, new short[] {215}),
/* NxS[ 215] */ // Shortest string ":tessfa"
      new Table(34, 1, -1, new short[] {216}),
/* NxS[ 216] */ // Shortest string ":tessfac"
      new Table(33, 1, -1, new short[] {217}),
/* NxS[ 217] */ // Shortest string ":tessfact"
      new Table(25, 1, -1, new short[] {218}),
/* NxS[ 218] */ // Shortest string ":specula"
      new Table(30, 1, -1, new short[] {84}),
/* NxS[ 219] */ // Shortest string ":re"
      new Table(36, 7, -1, new short[] {220, -1, -1, -1, -1, -1, 
          221}),
/* NxS[ 220] */ // Shortest string ":ren"
      new Table(24, 1, -1, new short[] {225}),
/* NxS[ 221] */ // Shortest string ":reg"
      new Table(31, 1, -1, new short[] {222}),
/* NxS[ 222] */ // Shortest string ":regi"
      new Table(28, 1, -1, new short[] {223}),
/* NxS[ 223] */ // Shortest string ":regis"
      new Table(33, 1, -1, new short[] {224}),
/* NxS[ 224] */ // Shortest string ":filt"
      new Table(26, 1, -1, new short[] {179}),
/* NxS[ 225] */ // Shortest string ":rend"
      new Table(26, 1, -1, new short[] {226}),
/* NxS[ 226] */ // Shortest string ":rende"
      new Table(30, 1, -1, new short[] {227}),
/* NxS[ 227] */ // Shortest string ":render"
      new Table(33, 1, -1, new short[] {228}),
/* NxS[ 228] */ // Shortest string ":rendert"
      new Table(38, 1, -1, new short[] {229}),
/* NxS[ 229] */ // Shortest string ":renderta"
      new Table(30, 1, -1, new short[] {230}),
/* NxS[ 230] */ // Shortest string ":rendertar"
      new Table(42, 1, -1, new short[] {231}),
/* NxS[ 231] */ // Shortest string ":rendertarg"
      new Table(26, 1, -1, new short[] {232}),
/* NxS[ 232] */ // Shortest string ":rendertarge"
      new Table(33, 1, -1, new short[] {233}),
/* NxS[ 233] */ // Shortest string ":rendertarget"
      new Table(32, 1, -1, new short[] {234}),
/* NxS[ 234] */ // Shortest string ":depthw"
      new Table(30, 1, -1, new short[] {235}),
/* NxS[ 235] */ // Shortest string ":depthwr"
      new Table(31, 1, -1, new short[] {236}),
/* NxS[ 236] */ // Shortest string ":depthwri"
      new Table(33, 1, -1, new short[] {237}),
/* NxS[ 237] */ // Shortest string ":depthwrit"
      new Table(26, 1, -1, new short[] {238}),
/* NxS[ 238] */ // Shortest string ":depthwrite"
      new Table(43, 1, -1, new short[] {239}),
/* NxS[ 239] */ // Shortest string ":depthwritem"
      new Table(38, 1, -1, new short[] {240}),
/* NxS[ 240] */ // Shortest string ":depthwritema"
      new Table(28, 1, -1, new short[] {241}),
/* NxS[ 241] */ // Shortest string ":depthwritemas"
      new Table(47, 1, -1, new short[] {45}),
/* NxS[ 242] */ // Shortest string ":fo"
      new Table(42, 1, -1, new short[] {45}),
/* NxS[ 243] */ // Shortest string ":fr"
      new Table(25, 1, -1, new short[] {246}),
/* NxS[ 244] */ // Shortest string ":fi"
      new Table(27, 1, -1, new short[] {245}),
/* NxS[ 245] */ // Shortest string ":fil"
      new Table(27, 7, -1, new short[] {183, -1, -1, -1, -1, -1, 
          224}),
/* NxS[ 246] */ // Shortest string ":fro"
      new Table(36, 1, -1, new short[] {247}),
/* NxS[ 247] */ // Shortest string ":fron"
      new Table(33, 1, -1, new short[] {248}),
/* NxS[ 248] */ // Shortest string ":front"
      new Table(29, 6, -1, new short[] {127, -1, -1, -1, -1, 249}),
/* NxS[ 249] */ // Shortest string ":frontc"
      new Table(25, 1, -1, new short[] {250}),
/* NxS[ 250] */ // Shortest string ":frontco"
      new Table(39, 1, -1, new short[] {251}),
/* NxS[ 251] */ // Shortest string ":frontcou"
      new Table(36, 1, -1, new short[] {252}),
/* NxS[ 252] */ // Shortest string ":frontcoun"
      new Table(33, 1, -1, new short[] {253}),
/* NxS[ 253] */ // Shortest string ":frontcount"
      new Table(26, 1, -1, new short[] {254}),
/* NxS[ 254] */ // Shortest string ":frontcounte"
      new Table(30, 1, -1, new short[] {255}),
/* NxS[ 255] */ // Shortest string ":frontcounter"
      new Table(34, 1, -1, new short[] {256}),
/* NxS[ 256] */ // Shortest string ":frontcounterc"
      new Table(27, 1, -1, new short[] {257}),
/* NxS[ 257] */ // Shortest string ":frontcountercl"
      new Table(25, 1, -1, new short[] {258}),
/* NxS[ 258] */ // Shortest string ":frontcounterclo"
      new Table(34, 1, -1, new short[] {259}),
/* NxS[ 259] */ // Shortest string ":frontcountercloc"
      new Table(47, 1, -1, new short[] {260}),
/* NxS[ 260] */ // Shortest string ":frontcounterclock"
      new Table(32, 1, -1, new short[] {261}),
/* NxS[ 261] */ // Shortest string ":frontcounterclockw"
      new Table(31, 1, -1, new short[] {262}),
/* NxS[ 262] */ // Shortest string ":frontcounterclockwi"
      new Table(28, 1, -1, new short[] {44}),
/* NxS[ 263] */ // Shortest string ":sl"
      new Table(25, 1, -1, new short[] {448}),
/* NxS[ 264] */ // Shortest string ":sr"
      new Table(34, 1, -1, new short[] {435}),
/* NxS[ 265] */ // Shortest string ":st"
      new Table(26, 1, -1, new short[] {427}),
/* NxS[ 266] */ // Shortest string ":sc"
      new Table(31, 1, -1, new short[] {423}),
/* NxS[ 267] */ // Shortest string ":sp"
      new Table(26, 1, -1, new short[] {419}),
/* NxS[ 268] */ // Shortest string ":sv"
      new Table(61, 1, -1, new short[] {269}),
/* NxS[ 269] */ // Shortest string ":sv_"
      new Table(24, 19, -1, new short[] {270, 271, -1, -1, 272, -1, 
          273, 274, -1, 275, 276, -1, -1, -1, -1, -1, 277, 278, 279}),
/* NxS[ 270] */ // Shortest string ":sv_d"
      new Table(25, 7, -1, new short[] {401, 402, -1, -1, -1, -1, 
          403}),
/* NxS[ 271] */ // Shortest string ":sv_o"
      new Table(39, 1, -1, new short[] {385}),
/* NxS[ 272] */ // Shortest string ":sv_s"
      new Table(38, 1, -1, new short[] {381}),
/* NxS[ 273] */ // Shortest string ":sv_r"
      new Table(26, 1, -1, new short[] {372}),
/* NxS[ 274] */ // Shortest string ":sv_i"
      new Table(28, 9, -1, new short[] {360, -1, -1, -1, -1, -1, 
          -1, -1, 361}),
/* NxS[ 275] */ // Shortest string ":sv_t"
      new Table(26, 13, -1, new short[] {349, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 350}),
/* NxS[ 276] */ // Shortest string ":sv_c"
      new Table(25, 15, -1, new short[] {331, -1, 332, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 333}),
/* NxS[ 277] */ // Shortest string ":sv_p"
      new Table(25, 6, -1, new short[] {319, -1, -1, -1, -1, 320}),
/* NxS[ 278] */ // Shortest string ":sv_v"
      new Table(26, 6, -1, new short[] {302, -1, -1, -1, -1, 303}),
/* NxS[ 279] */ // Shortest string ":sv_g"
      new Table(28, 3, -1, new short[] {280, -1, 281}),
/* NxS[ 280] */ // Shortest string ":sv_gs"
      new Table(31, 1, -1, new short[] {295}),
/* NxS[ 281] */ // Shortest string ":sv_gr"
      new Table(25, 1, -1, new short[] {282}),
/* NxS[ 282] */ // Shortest string ":sv_gro"
      new Table(39, 1, -1, new short[] {283}),
/* NxS[ 283] */ // Shortest string ":sv_grou"
      new Table(40, 1, -1, new short[] {284}),
/* NxS[ 284] */ // Shortest string ":sv_group"
      new Table(31, 3, -1, new short[] {285, -1, 286}),
/* NxS[ 285] */ // Shortest string ":sv_groupi"
      new Table(24, 13, -1, new short[] {45, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 292}),
/* NxS[ 286] */ // Shortest string ":sv_groupt"
      new Table(35, 1, -1, new short[] {287}),
/* NxS[ 287] */ // Shortest string ":sv_groupth"
      new Table(30, 1, -1, new short[] {288}),
/* NxS[ 288] */ // Shortest string ":sv_groupthr"
      new Table(26, 1, -1, new short[] {289}),
/* NxS[ 289] */ // Shortest string ":sv_groupthre"
      new Table(38, 1, -1, new short[] {290}),
/* NxS[ 290] */ // Shortest string ":sv_groupthrea"
      new Table(24, 1, -1, new short[] {291}),
/* NxS[ 291] */ // Shortest string ":sv_vertex"
      new Table(31, 1, -1, new short[] {68}),
/* NxS[ 292] */ // Shortest string ":sv_groupin"
      new Table(24, 1, -1, new short[] {293}),
/* NxS[ 293] */ // Shortest string ":sv_groupind"
      new Table(26, 1, -1, new short[] {294}),
/* NxS[ 294] */ // Shortest string ":sv_groupinde"
      new Table(45, 1, -1, new short[] {45}),
/* NxS[ 295] */ // Shortest string ":sv_gsi"
      new Table(36, 1, -1, new short[] {296}),
/* NxS[ 296] */ // Shortest string ":sv_gsin"
      new Table(28, 1, -1, new short[] {297}),
/* NxS[ 297] */ // Shortest string ":sv_gsins"
      new Table(33, 1, -1, new short[] {298}),
/* NxS[ 298] */ // Shortest string ":sv_inst"
      new Table(38, 1, -1, new short[] {299}),
/* NxS[ 299] */ // Shortest string ":sv_insta"
      new Table(36, 1, -1, new short[] {300}),
/* NxS[ 300] */ // Shortest string ":sv_instan"
      new Table(34, 1, -1, new short[] {301}),
/* NxS[ 301] */ // Shortest string ":sv_instanc"
      new Table(26, 1, -1, new short[] {291}),
/* NxS[ 302] */ // Shortest string ":sv_ve"
      new Table(30, 1, -1, new short[] {316}),
/* NxS[ 303] */ // Shortest string ":sv_vi"
      new Table(26, 1, -1, new short[] {304}),
/* NxS[ 304] */ // Shortest string ":sv_vie"
      new Table(32, 1, -1, new short[] {305}),
/* NxS[ 305] */ // Shortest string ":sv_view"
      new Table(40, 1, -1, new short[] {306}),
/* NxS[ 306] */ // Shortest string ":sv_viewp"
      new Table(25, 1, -1, new short[] {307}),
/* NxS[ 307] */ // Shortest string ":sv_viewpo"
      new Table(30, 1, -1, new short[] {308}),
/* NxS[ 308] */ // Shortest string ":sv_viewpor"
      new Table(33, 1, -1, new short[] {309}),
/* NxS[ 309] */ // Shortest string ":sv_viewport"
      new Table(38, 1, -1, new short[] {310}),
/* NxS[ 310] */ // Shortest string ":sv_viewporta"
      new Table(30, 1, -1, new short[] {311}),
/* NxS[ 311] */ // Shortest string ":sv_viewportar"
      new Table(30, 1, -1, new short[] {312}),
/* NxS[ 312] */ // Shortest string ":sv_viewportarr"
      new Table(38, 1, -1, new short[] {313}),
/* NxS[ 313] */ // Shortest string ":sv_viewportarra"
      new Table(44, 1, -1, new short[] {314}),
/* NxS[ 314] */ // Shortest string ":sv_sample"
      new Table(31, 1, -1, new short[] {315}),
/* NxS[ 315] */ // Shortest string ":sv_samplei"
      new Table(36, 1, -1, new short[] {292}),
/* NxS[ 316] */ // Shortest string ":sv_ver"
      new Table(33, 1, -1, new short[] {317}),
/* NxS[ 317] */ // Shortest string ":sv_vert"
      new Table(26, 1, -1, new short[] {318}),
/* NxS[ 318] */ // Shortest string ":sv_verte"
      new Table(45, 1, -1, new short[] {291}),
/* NxS[ 319] */ // Shortest string ":sv_po"
      new Table(28, 1, -1, new short[] {326}),
/* NxS[ 320] */ // Shortest string ":sv_pr"
      new Table(31, 1, -1, new short[] {321}),
/* NxS[ 321] */ // Shortest string ":sv_pri"
      new Table(43, 1, -1, new short[] {322}),
/* NxS[ 322] */ // Shortest string ":sv_prim"
      new Table(31, 1, -1, new short[] {323}),
/* NxS[ 323] */ // Shortest string ":sv_primi"
      new Table(33, 1, -1, new short[] {324}),
/* NxS[ 324] */ // Shortest string ":sv_primit"
      new Table(31, 1, -1, new short[] {325}),
/* NxS[ 325] */ // Shortest string ":sv_primiti"
      new Table(41, 1, -1, new short[] {301}),
/* NxS[ 326] */ // Shortest string ":sv_pos"
      new Table(31, 1, -1, new short[] {327}),
/* NxS[ 327] */ // Shortest string ":sv_posi"
      new Table(33, 1, -1, new short[] {328}),
/* NxS[ 328] */ // Shortest string ":sv_posit"
      new Table(31, 1, -1, new short[] {329}),
/* NxS[ 329] */ // Shortest string ":sv_positi"
      new Table(25, 1, -1, new short[] {330}),
/* NxS[ 330] */ // Shortest string ":sv_positio"
      new Table(36, 1, -1, new short[] {45}),
/* NxS[ 331] */ // Shortest string ":sv_co"
      new Table(41, 1, -1, new short[] {345}),
/* NxS[ 332] */ // Shortest string ":sv_cl"
      new Table(31, 1, -1, new short[] {344}),
/* NxS[ 333] */ // Shortest string ":sv_cu"
      new Table(27, 1, -1, new short[] {334}),
/* NxS[ 334] */ // Shortest string ":sv_cul"
      new Table(27, 1, -1, new short[] {335}),
/* NxS[ 335] */ // Shortest string ":sv_clip"
      new Table(24, 1, -1, new short[] {336}),
/* NxS[ 336] */ // Shortest string ":sv_clipd"
      new Table(31, 1, -1, new short[] {337}),
/* NxS[ 337] */ // Shortest string ":sv_clipdi"
      new Table(28, 1, -1, new short[] {338}),
/* NxS[ 338] */ // Shortest string ":sv_clipdis"
      new Table(33, 1, -1, new short[] {339}),
/* NxS[ 339] */ // Shortest string ":sv_clipdist"
      new Table(38, 1, -1, new short[] {340}),
/* NxS[ 340] */ // Shortest string ":sv_clipdista"
      new Table(36, 1, -1, new short[] {341}),
/* NxS[ 341] */ // Shortest string ":sv_clipdistan"
      new Table(34, 1, -1, new short[] {342}),
/* NxS[ 342] */ // Shortest string ":sv_clipdistanc"
      new Table(26, 1, -1, new short[] {343}),
/* NxS[ 343] */ // Shortest string ":sv_clipdistance"
      new Table(48, 40, -1, new short[] {85, 45, 45, -1, -1, -1, 
          2, 45, 45, 45, 45, 45, 45, -1, -1, -1, 2, 2, -1, 2, -1, -1, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2}),
/* NxS[ 344] */ // Shortest string ":sv_cli"
      new Table(40, 1, -1, new short[] {335}),
/* NxS[ 345] */ // Shortest string ":sv_cov"
      new Table(26, 1, -1, new short[] {346}),
/* NxS[ 346] */ // Shortest string ":sv_cove"
      new Table(30, 1, -1, new short[] {347}),
/* NxS[ 347] */ // Shortest string ":sv_cover"
      new Table(38, 1, -1, new short[] {348}),
/* NxS[ 348] */ // Shortest string ":sv_covera"
      new Table(42, 1, -1, new short[] {44}),
/* NxS[ 349] */ // Shortest string ":sv_te"
      new Table(28, 1, -1, new short[] {355}),
/* NxS[ 350] */ // Shortest string ":sv_ta"
      new Table(30, 1, -1, new short[] {351}),
/* NxS[ 351] */ // Shortest string ":sv_tar"
      new Table(42, 1, -1, new short[] {352}),
/* NxS[ 352] */ // Shortest string ":sv_targ"
      new Table(26, 1, -1, new short[] {353}),
/* NxS[ 353] */ // Shortest string ":sv_targe"
      new Table(33, 1, -1, new short[] {354}),
/* NxS[ 354] */ // Shortest string ":sv_target"
      new Table(48, 11, -1, new short[] {45, 45, 45, -1, 45, -1, 
          -1, 45, 45, 45, 45}),
/* NxS[ 355] */ // Shortest string ":sv_tes"
      new Table(28, 1, -1, new short[] {356}),
/* NxS[ 356] */ // Shortest string ":sv_tess"
      new Table(29, 1, -1, new short[] {357}),
/* NxS[ 357] */ // Shortest string ":sv_tessf"
      new Table(38, 1, -1, new short[] {358}),
/* NxS[ 358] */ // Shortest string ":sv_tessfa"
      new Table(34, 1, -1, new short[] {359}),
/* NxS[ 359] */ // Shortest string ":sv_tessfac"
      new Table(33, 1, -1, new short[] {178}),
/* NxS[ 360] */ // Shortest string ":sv_is"
      new Table(29, 1, -1, new short[] {367}),
/* NxS[ 361] */ // Shortest string ":sv_in"
      new Table(28, 1, -1, new short[] {362}),
/* NxS[ 362] */ // Shortest string ":sv_ins"
      new Table(31, 3, -1, new short[] {363, -1, 298}),
/* NxS[ 363] */ // Shortest string ":sv_insi"
      new Table(24, 1, -1, new short[] {364}),
/* NxS[ 364] */ // Shortest string ":sv_insid"
      new Table(26, 1, -1, new short[] {365}),
/* NxS[ 365] */ // Shortest string ":sv_inside"
      new Table(33, 1, -1, new short[] {366}),
/* NxS[ 366] */ // Shortest string ":sv_insidet"
      new Table(26, 1, -1, new short[] {349}),
/* NxS[ 367] */ // Shortest string ":sv_isf"
      new Table(30, 1, -1, new short[] {368}),
/* NxS[ 368] */ // Shortest string ":sv_isfr"
      new Table(25, 1, -1, new short[] {369}),
/* NxS[ 369] */ // Shortest string ":sv_isfro"
      new Table(36, 1, -1, new short[] {370}),
/* NxS[ 370] */ // Shortest string ":sv_isfron"
      new Table(33, 1, -1, new short[] {371}),
/* NxS[ 371] */ // Shortest string ":sv_isfront"
      new Table(29, 1, -1, new short[] {77}),
/* NxS[ 372] */ // Shortest string ":sv_re"
      new Table(36, 1, -1, new short[] {373}),
/* NxS[ 373] */ // Shortest string ":sv_ren"
      new Table(24, 1, -1, new short[] {374}),
/* NxS[ 374] */ // Shortest string ":sv_rend"
      new Table(26, 1, -1, new short[] {375}),
/* NxS[ 375] */ // Shortest string ":sv_rende"
      new Table(30, 1, -1, new short[] {376}),
/* NxS[ 376] */ // Shortest string ":sv_render"
      new Table(33, 1, -1, new short[] {377}),
/* NxS[ 377] */ // Shortest string ":sv_rendert"
      new Table(38, 1, -1, new short[] {378}),
/* NxS[ 378] */ // Shortest string ":sv_renderta"
      new Table(30, 1, -1, new short[] {379}),
/* NxS[ 379] */ // Shortest string ":sv_rendertar"
      new Table(42, 1, -1, new short[] {380}),
/* NxS[ 380] */ // Shortest string ":sv_rendertarg"
      new Table(26, 1, -1, new short[] {308}),
/* NxS[ 381] */ // Shortest string ":sv_sa"
      new Table(43, 1, -1, new short[] {382}),
/* NxS[ 382] */ // Shortest string ":sv_sam"
      new Table(40, 1, -1, new short[] {383}),
/* NxS[ 383] */ // Shortest string ":sv_samp"
      new Table(27, 1, -1, new short[] {384}),
/* NxS[ 384] */ // Shortest string ":sv_sampl"
      new Table(26, 1, -1, new short[] {314}),
/* NxS[ 385] */ // Shortest string ":sv_ou"
      new Table(33, 1, -1, new short[] {386}),
/* NxS[ 386] */ // Shortest string ":sv_out"
      new Table(40, 1, -1, new short[] {387}),
/* NxS[ 387] */ // Shortest string ":sv_outp"
      new Table(39, 1, -1, new short[] {388}),
/* NxS[ 388] */ // Shortest string ":sv_outpu"
      new Table(33, 1, -1, new short[] {389}),
/* NxS[ 389] */ // Shortest string ":sv_output"
      new Table(34, 1, -1, new short[] {390}),
/* NxS[ 390] */ // Shortest string ":sv_outputc"
      new Table(25, 1, -1, new short[] {391}),
/* NxS[ 391] */ // Shortest string ":sv_outputco"
      new Table(36, 1, -1, new short[] {392}),
/* NxS[ 392] */ // Shortest string ":sv_outputcon"
      new Table(33, 1, -1, new short[] {393}),
/* NxS[ 393] */ // Shortest string ":sv_outputcont"
      new Table(30, 1, -1, new short[] {394}),
/* NxS[ 394] */ // Shortest string ":sv_outputcontr"
      new Table(25, 1, -1, new short[] {395}),
/* NxS[ 395] */ // Shortest string ":sv_outputcontro"
      new Table(27, 1, -1, new short[] {396}),
/* NxS[ 396] */ // Shortest string ":sv_outputcontrol"
      new Table(40, 1, -1, new short[] {397}),
/* NxS[ 397] */ // Shortest string ":sv_outputcontrolp"
      new Table(25, 1, -1, new short[] {398}),
/* NxS[ 398] */ // Shortest string ":sv_outputcontrolpo"
      new Table(31, 1, -1, new short[] {399}),
/* NxS[ 399] */ // Shortest string ":sv_outputcontrolpoi"
      new Table(36, 1, -1, new short[] {400}),
/* NxS[ 400] */ // Shortest string ":sv_outputcontrolpoin"
      new Table(33, 1, -1, new short[] {291}),
/* NxS[ 401] */ // Shortest string ":sv_do"
      new Table(43, 1, -1, new short[] {412}),
/* NxS[ 402] */ // Shortest string ":sv_de"
      new Table(40, 1, -1, new short[] {410}),
/* NxS[ 403] */ // Shortest string ":sv_di"
      new Table(28, 1, -1, new short[] {404}),
/* NxS[ 404] */ // Shortest string ":sv_dis"
      new Table(40, 1, -1, new short[] {405}),
/* NxS[ 405] */ // Shortest string ":sv_disp"
      new Table(38, 1, -1, new short[] {406}),
/* NxS[ 406] */ // Shortest string ":sv_dispa"
      new Table(33, 1, -1, new short[] {407}),
/* NxS[ 407] */ // Shortest string ":sv_dispat"
      new Table(34, 1, -1, new short[] {408}),
/* NxS[ 408] */ // Shortest string ":sv_dispatc"
      new Table(35, 1, -1, new short[] {409}),
/* NxS[ 409] */ // Shortest string ":sv_dispatch"
      new Table(33, 1, -1, new short[] {286}),
/* NxS[ 410] */ // Shortest string ":sv_dep"
      new Table(33, 1, -1, new short[] {411}),
/* NxS[ 411] */ // Shortest string ":sv_dept"
      new Table(35, 1, -1, new short[] {45}),
/* NxS[ 412] */ // Shortest string ":sv_dom"
      new Table(38, 1, -1, new short[] {413}),
/* NxS[ 413] */ // Shortest string ":sv_doma"
      new Table(31, 1, -1, new short[] {414}),
/* NxS[ 414] */ // Shortest string ":sv_domai"
      new Table(36, 1, -1, new short[] {415}),
/* NxS[ 415] */ // Shortest string ":sv_domain"
      new Table(27, 1, -1, new short[] {416}),
/* NxS[ 416] */ // Shortest string ":sv_domainl"
      new Table(25, 1, -1, new short[] {417}),
/* NxS[ 417] */ // Shortest string ":sv_domainlo"
      new Table(34, 1, -1, new short[] {418}),
/* NxS[ 418] */ // Shortest string ":sv_domainloc"
      new Table(38, 1, -1, new short[] {327}),
/* NxS[ 419] */ // Shortest string ":spe"
      new Table(34, 1, -1, new short[] {420}),
/* NxS[ 420] */ // Shortest string ":spec"
      new Table(39, 1, -1, new short[] {421}),
/* NxS[ 421] */ // Shortest string ":specu"
      new Table(27, 1, -1, new short[] {422}),
/* NxS[ 422] */ // Shortest string ":specul"
      new Table(38, 1, -1, new short[] {218}),
/* NxS[ 423] */ // Shortest string ":sci"
      new Table(28, 1, -1, new short[] {424}),
/* NxS[ 424] */ // Shortest string ":scis"
      new Table(28, 1, -1, new short[] {425}),
/* NxS[ 425] */ // Shortest string ":sciss"
      new Table(25, 1, -1, new short[] {426}),
/* NxS[ 426] */ // Shortest string ":scisso"
      new Table(30, 1, -1, new short[] {39}),
/* NxS[ 427] */ // Shortest string ":ste"
      new Table(36, 1, -1, new short[] {428}),
/* NxS[ 428] */ // Shortest string ":sten"
      new Table(34, 1, -1, new short[] {429}),
/* NxS[ 429] */ // Shortest string ":stenc"
      new Table(31, 1, -1, new short[] {430}),
/* NxS[ 430] */ // Shortest string ":stenci"
      new Table(27, 1, -1, new short[] {431}),
/* NxS[ 431] */ // Shortest string ":stencil"
      new Table(26, 7, -1, new short[] {40, -1, -1, -1, 432, -1, 
          234}),
/* NxS[ 432] */ // Shortest string ":stencilr"
      new Table(26, 1, -1, new short[] {433}),
/* NxS[ 433] */ // Shortest string ":stencilre"
      new Table(38, 1, -1, new short[] {434}),
/* NxS[ 434] */ // Shortest string ":stencilrea"
      new Table(24, 1, -1, new short[] {238}),
/* NxS[ 435] */ // Shortest string ":src"
      new Table(37, 1, -1, new short[] {436}),
/* NxS[ 436] */ // Shortest string ":srcb"
      new Table(27, 1, -1, new short[] {437}),
/* NxS[ 437] */ // Shortest string ":srcbl"
      new Table(26, 1, -1, new short[] {438}),
/* NxS[ 438] */ // Shortest string ":srcble"
      new Table(36, 1, -1, new short[] {439}),
/* NxS[ 439] */ // Shortest string ":srcblen"
      new Table(24, 1, -1, new short[] {440}),
/* NxS[ 440] */ // Shortest string ":srcblend"
      new Table(24, 15, -1, new short[] {441, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 168}),
/* NxS[ 441] */ // Shortest string ":srcblendd"
      new Table(26, 1, -1, new short[] {442}),
/* NxS[ 442] */ // Shortest string ":srcblendde"
      new Table(28, 1, -1, new short[] {443}),
/* NxS[ 443] */ // Shortest string ":srcblenddes"
      new Table(33, 1, -1, new short[] {444}),
/* NxS[ 444] */ // Shortest string ":srcblenddest"
      new Table(37, 1, -1, new short[] {445}),
/* NxS[ 445] */ // Shortest string ":srcblenddestb"
      new Table(27, 1, -1, new short[] {446}),
/* NxS[ 446] */ // Shortest string ":srcblenddestbl"
      new Table(26, 1, -1, new short[] {447}),
/* NxS[ 447] */ // Shortest string ":srcblenddestble"
      new Table(36, 1, -1, new short[] {68}),
/* NxS[ 448] */ // Shortest string ":slo"
      new Table(40, 1, -1, new short[] {449}),
/* NxS[ 449] */ // Shortest string ":slop"
      new Table(26, 1, -1, new short[] {450}),
/* NxS[ 450] */ // Shortest string ":slope"
      new Table(28, 1, -1, new short[] {451}),
/* NxS[ 451] */ // Shortest string ":slopes"
      new Table(34, 1, -1, new short[] {452}),
/* NxS[ 452] */ // Shortest string ":slopesc"
      new Table(38, 1, -1, new short[] {453}),
/* NxS[ 453] */ // Shortest string ":slopesca"
      new Table(27, 1, -1, new short[] {454}),
/* NxS[ 454] */ // Shortest string ":slopescal"
      new Table(26, 1, -1, new short[] {455}),
/* NxS[ 455] */ // Shortest string ":slopescale"
      new Table(24, 1, -1, new short[] {456}),
/* NxS[ 456] */ // Shortest string ":slopescaled"
      new Table(24, 1, -1, new short[] {457}),
/* NxS[ 457] */ // Shortest string ":slopescaledd"
      new Table(26, 1, -1, new short[] {458}),
/* NxS[ 458] */ // Shortest string ":slopescaledde"
      new Table(40, 1, -1, new short[] {459}),
/* NxS[ 459] */ // Shortest string ":slopescaleddep"
      new Table(33, 1, -1, new short[] {460}),
/* NxS[ 460] */ // Shortest string ":slopescaleddept"
      new Table(35, 1, -1, new short[] {73}),
/* NxS[ 461] */ // Shortest string ":de"
      new Table(28, 13, -1, new short[] {466, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 467}),
/* NxS[ 462] */ // Shortest string ":di"
      new Table(29, 1, -1, new short[] {463}),
/* NxS[ 463] */ // Shortest string ":dif"
      new Table(29, 1, -1, new short[] {464}),
/* NxS[ 464] */ // Shortest string ":diff"
      new Table(39, 1, -1, new short[] {465}),
/* NxS[ 465] */ // Shortest string ":diffu"
      new Table(28, 1, -1, new short[] {83}),
/* NxS[ 466] */ // Shortest string ":des"
      new Table(33, 1, -1, new short[] {478}),
/* NxS[ 467] */ // Shortest string ":dep"
      new Table(33, 1, -1, new short[] {468}),
/* NxS[ 468] */ // Shortest string ":dept"
      new Table(35, 1, -1, new short[] {469}),
/* NxS[ 469] */ // Shortest string ":depth"
      new Table(26, 12, -1, new short[] {40, -1, -1, 195, -1, -1, 
          234, -1, -1, -1, -1, 470}),
/* NxS[ 470] */ // Shortest string ":depthb"
      new Table(31, 1, -1, new short[] {471}),
/* NxS[ 471] */ // Shortest string ":depthbi"
      new Table(38, 1, -1, new short[] {472}),
/* NxS[ 472] */ // Shortest string ":depthbia"
      new Table(28, 1, -1, new short[] {473}),
/* NxS[ 473] */ // Shortest string ":depthbias"
      new Table(54, 45, -1, new short[] {2, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 2, 2, -1, 2, -1, -1, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 474}),
/* NxS[ 474] */ // Shortest string ":depthbiasc"
      new Table(27, 1, -1, new short[] {475}),
/* NxS[ 475] */ // Shortest string ":depthbiascl"
      new Table(38, 1, -1, new short[] {476}),
/* NxS[ 476] */ // Shortest string ":depthbiascla"
      new Table(43, 1, -1, new short[] {477}),
/* NxS[ 477] */ // Shortest string ":depthbiasclam"
      new Table(40, 1, -1, new short[] {45}),
/* NxS[ 478] */ // Shortest string ":dest"
      new Table(37, 1, -1, new short[] {479}),
/* NxS[ 479] */ // Shortest string ":destb"
      new Table(27, 1, -1, new short[] {480}),
/* NxS[ 480] */ // Shortest string ":destbl"
      new Table(26, 1, -1, new short[] {481}),
/* NxS[ 481] */ // Shortest string ":destble"
      new Table(36, 1, -1, new short[] {482}),
/* NxS[ 482] */ // Shortest string ":destblen"
      new Table(24, 1, -1, new short[] {483}),
/* NxS[ 483] */ // Shortest string ":destblend"
      new Table(38, 1, -1, new short[] {168}),
/* NxS[ 484] */ // Shortest string "/d"
      new Table(24, 8, -1, new short[] {1965, 1966, 1967, -1, 1962, -1, 
          -1, 1968}),
/* NxS[ 485] */ // Shortest string "/o"
      new Table(29, 11, -1, new short[] {1950, -1, -1, -1, -1, -1, 
          -1, 1951, -1, -1, 1952}),
/* NxS[ 486] */ // Shortest string "/e"
      new Table(27, 19, -1, new short[] {1942, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1943, -1, -1, -1, -1, -1, -1, 1944, -1, 1945}),
/* NxS[ 487] */ // Shortest string "/l"
      new Table(24, 8, -1, new short[] {1926, 1927, 1928, -1, -1, -1, 
          -1, 1929}),
/* NxS[ 488] */ // Shortest string "/s"
      new Table(25, 27, -1, new short[] {1769, 1770, -1, -1, -1, 1771, 
          1772, 1773, 1774, -1, 1775, -1, -1, 1776, 1777, 1778, -1, -1, 1779, -1, -1, -1, 
          -1, -1, -1, -1, 976}),
/* NxS[ 489] */ // Shortest string "/f"
      new Table(25, 19, -1, new short[] {1719, -1, 1720, -1, -1, 1721, 
          1722, 1723, -1, -1, -1, -1, -1, 1724, -1, -1, -1, -1, 1551}),
/* NxS[ 490] */ // Shortest string "/r"
      new Table(25, 14, -1, new short[] {1664, 1665, -1, 1666, -1, -1, 
          -1, 1667, -1, -1, -1, -1, -1, 1668}),
/* NxS[ 491] */ // Shortest string "/i"
      new Table(28, 9, -1, new short[] {1627, 1628, -1, -1, -1, -1, 
          -1, -1, 1629}),
/* NxS[ 492] */ // Shortest string "/w"
      new Table(30, 6, -1, new short[] {1617, -1, -1, -1, -1, 1618}),
/* NxS[ 493] */ // Shortest string "/t"
      new Table(26, 19, -1, new short[] {1509, -1, -1, -1, 1510, -1, 
          -1, -1, -1, -1, -1, 1511, 1512, -1, -1, -1, -1, -1, 1513}),
/* NxS[ 494] */ // Shortest string "/c"
      new Table(25, 18, -1, new short[] {1447, 1448, 1449, -1, -1, 1450, 
          -1, -1, -1, -1, -1, -1, 1451, 1452, 1453, -1, -1, 1454}),
/* NxS[ 495] */ // Shortest string "/h"
      new Table(38, 1, -1, new short[] {1445}),
/* NxS[ 496] */ // Shortest string "/n"
      new Table(25, 15, -1, new short[] {1404, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1405, 1406}),
/* NxS[ 497] */ // Shortest string "/b"
      new Table(25, 20, -1, new short[] {1352, -1, 1353, -1, -1, 1354, 
          1355, -1, -1, -1, -1, -1, -1, -1, 1518, -1, -1, -1, -1, 1356}),
/* NxS[ 498] */ // Shortest string "/a"
      new Table(27, 17, -1, new short[] {1300, 1301, -1, -1, -1, -1, 
          1302, 1303, -1, 1304, 1305, -1, -1, 1306, -1, -1, 1307}),
/* NxS[ 499] */ // Shortest string "/u"
      new Table(28, 9, -1, new short[] {1022, -1, -1, 1023, -1, -1, 
          -1, -1, 1024}),
/* NxS[ 500] */ // Shortest string "/p"
      new Table(25, 14, -1, new short[] {958, -1, -1, -1, -1, 959, 
          960, -1, -1, -1, -1, -1, -1, 961}),
/* NxS[ 501] */ // Shortest string "/v"
      new Table(25, 2, -1, new short[] {939, 940}),
/* NxS[ 502] */ // Shortest string "/g"
      new Table(26, 5, -1, new short[] {920, -1, -1, -1, 921}),
/* NxS[ 503] */ // Shortest string "/m"
      new Table(25, 15, -1, new short[] {907, -1, -1, -1, -1, -1, 
          908, -1, -1, -1, -1, -1, -1, 909, 910}),
/* NxS[ 504] */ // Shortest string "/z"
      new Table(29, 5, -1, new short[] {896, -1, -1, 897, 898}),
/* NxS[ 505] */ // Shortest string "/2"
      new Table(24, 1, -1, new short[] {895}),
/* NxS[ 506] */ // Shortest string "/_"
      new Table(25, 19, -1, new short[] {773, -1, 774, 775, -1, -1, 
          -1, 776, 810, 777, -1, -1, -1, -1, -1, 778, -1, -1, 779}),
/* NxS[ 507] */ // Shortest string "/#"
      new Table(24, 47, -1, new short[] {508, 509, 510, 511, 512, 513, 
          514, 515, 516, 517, 518, -1, 519, 520, 521, 522, 523, 524, 525, 526, -1, -1, 
          527, -1, -1, -1, -1, -1, -1, -1, 507, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 507, -1, -1, -1, -1, -1, 507}),
/* NxS[ 508] */ // Shortest string "/#d"
      new Table(25, 7, -1, new short[] {760, 761, -1, 757, -1, -1, 
          762}),
/* NxS[ 509] */ // Shortest string "/#o"
      new Table(29, 8, -1, new short[] {747, -1, -1, -1, -1, -1, 
          -1, 748}),
/* NxS[ 510] */ // Shortest string "/#e"
      new Table(27, 17, -1, new short[] {741, -1, -1, -1, -1, -1, 
          -1, -1, -1, 742, -1, -1, -1, -1, -1, -1, 743}),
/* NxS[ 511] */ // Shortest string "/#l"
      new Table(25, 7, -1, new short[] {603, -1, -1, -1, -1, -1, 
          734}),
/* NxS[ 512] */ // Shortest string "/#s"
      new Table(25, 16, -1, new short[] {668, 669, -1, -1, -1, 670, 
          -1, 671, 672, -1, 673, -1, -1, -1, 674, 675}),
/* NxS[ 513] */ // Shortest string "/#f"
      new Table(25, 14, -1, new short[] {656, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 657}),
/* NxS[ 514] */ // Shortest string "/#r"
      new Table(26, 1, -1, new short[] {654}),
/* NxS[ 515] */ // Shortest string "/#i"
      new Table(29, 8, -1, new short[] {647, -1, -1, -1, -1, -1, 
          -1, 648}),
/* NxS[ 516] */ // Shortest string "/#w"
      new Table(30, 6, -1, new short[] {639, -1, -1, -1, -1, 640}),
/* NxS[ 517] */ // Shortest string "/#t"
      new Table(38, 1, -1, new short[] {638}),
/* NxS[ 518] */ // Shortest string "/#c"
      new Table(25, 18, -1, new short[] {605, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 606, 607, -1, -1, 608}),
/* NxS[ 519] */ // Shortest string "/#n"
      new Table(38, 1, -1, new short[] {604}),
/* NxS[ 520] */ // Shortest string "/#b"
      new Table(27, 5, -1, new short[] {592, -1, -1, -1, 593}),
/* NxS[ 521] */ // Shortest string "/#a"
      new Table(27, 17, -1, new short[] {582, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 583}),
/* NxS[ 522] */ // Shortest string "/#u"
      new Table(28, 1, -1, new short[] {581}),
/* NxS[ 523] */ // Shortest string "/#p"
      new Table(30, 9, -1, new short[] {562, -1, -1, -1, -1, -1, 
          -1, -1, 550}),
/* NxS[ 524] */ // Shortest string "/#v"
      new Table(26, 1, -1, new short[] {552}),
/* NxS[ 525] */ // Shortest string "/#g"
      new Table(30, 1, -1, new short[] {546}),
/* NxS[ 526] */ // Shortest string "/#m"
      new Table(25, 14, -1, new short[] {540, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 541}),
/* NxS[ 527] */ // Shortest string "/#z"
      new Table(29, 5, -1, new short[] {528, -1, -1, 529, 530}),
/* NxS[ 528] */ // Shortest string "/#zf"
      new Table(38, 1, -1, new short[] {538}),
/* NxS[ 529] */ // Shortest string "/#zw"
      new Table(30, 1, -1, new short[] {535}),
/* NxS[ 530] */ // Shortest string "/#zt"
      new Table(26, 1, -1, new short[] {531}),
/* NxS[ 531] */ // Shortest string "/#zte"
      new Table(28, 1, -1, new short[] {532}),
/* NxS[ 532] */ // Shortest string "/#ztes"
      new Table(33, 1, -1, new short[] {533}),
/* NxS[ 533] */ // Shortest string "/#do/"
      new Table(54, 34, -1, new short[] {4, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 3, 533, -1, 533, -1, -1, 3, 533, 533, 533, 533, 533, 
          533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533}),
/* NxS[ 534] */ // Shortest string "/#do\x20/"
      new Table(54, 17, 534, new short[] {4, 534, 534, 534, 534, 534, 
          534, 534, 534, 534, 3, 534, 534, 533, 534, 534, 4}),
/* NxS[ 535] */ // Shortest string "/#zwr"
      new Table(31, 1, -1, new short[] {536}),
/* NxS[ 536] */ // Shortest string "/#zwri"
      new Table(33, 1, -1, new short[] {537}),
/* NxS[ 537] */ // Shortest string "/#els"
      new Table(26, 1, -1, new short[] {533}),
/* NxS[ 538] */ // Shortest string "/#zfa"
      new Table(31, 1, -1, new short[] {539}),
/* NxS[ 539] */ // Shortest string "/#fai"
      new Table(27, 1, -1, new short[] {533}),
/* NxS[ 540] */ // Shortest string "/#mo"
      new Table(24, 1, -1, new short[] {537}),
/* NxS[ 541] */ // Shortest string "/#ma"
      new Table(33, 1, -1, new short[] {542}),
/* NxS[ 542] */ // Shortest string "/#mat"
      new Table(26, 1, -1, new short[] {543}),
/* NxS[ 543] */ // Shortest string "/#mate"
      new Table(30, 1, -1, new short[] {544}),
/* NxS[ 544] */ // Shortest string "/#mater"
      new Table(31, 1, -1, new short[] {545}),
/* NxS[ 545] */ // Shortest string "/#materi"
      new Table(38, 1, -1, new short[] {539}),
/* NxS[ 546] */ // Shortest string "/#gr"
      new Table(38, 1, -1, new short[] {547}),
/* NxS[ 547] */ // Shortest string "/#gra"
      new Table(37, 1, -1, new short[] {548}),
/* NxS[ 548] */ // Shortest string "/#use"
      new Table(40, 1, -1, new short[] {549}),
/* NxS[ 549] */ // Shortest string "/#usep"
      new Table(38, 1, -1, new short[] {550}),
/* NxS[ 550] */ // Shortest string "/#pa"
      new Table(28, 1, -1, new short[] {551}),
/* NxS[ 551] */ // Shortest string "/#tag"
      new Table(28, 1, -1, new short[] {533}),
/* NxS[ 552] */ // Shortest string "/#ve"
      new Table(30, 1, -1, new short[] {553}),
/* NxS[ 553] */ // Shortest string "/#ver"
      new Table(33, 1, -1, new short[] {554}),
/* NxS[ 554] */ // Shortest string "/#vert"
      new Table(26, 1, -1, new short[] {555}),
/* NxS[ 555] */ // Shortest string "/#verte"
      new Table(45, 1, -1, new short[] {556}),
/* NxS[ 556] */ // Shortest string "/#vertex"
      new Table(54, 38, -1, new short[] {4, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 3, 533, -1, 533, -1, -1, 3, 533, 533, 533, 533, 533, 
          533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, -1, -1, -1, 557}),
/* NxS[ 557] */ // Shortest string "/#vertexl"
      new Table(43, 1, -1, new short[] {558}),
/* NxS[ 558] */ // Shortest string "/#vertexlm"
      new Table(54, 41, -1, new short[] {4, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 3, 533, -1, 533, -1, -1, 3, 533, 533, 533, 533, 533, 
          533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, -1, -1, -1, -1, 
          -1, -1, 559}),
/* NxS[ 559] */ // Shortest string "/#vertexlmr"
      new Table(42, 1, -1, new short[] {560}),
/* NxS[ 560] */ // Shortest string "/#vertexlmrg"
      new Table(37, 1, -1, new short[] {561}),
/* NxS[ 561] */ // Shortest string "/#cgprogra"
      new Table(43, 1, -1, new short[] {533}),
/* NxS[ 562] */ // Shortest string "/#pr"
      new Table(25, 14, -1, new short[] {563, 564, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 565}),
/* NxS[ 563] */ // Shortest string "/#pro"
      new Table(40, 1, -1, new short[] {576}),
/* NxS[ 564] */ // Shortest string "/#pre"
      new Table(40, 1, -1, new short[] {568}),
/* NxS[ 565] */ // Shortest string "/#pra"
      new Table(42, 1, -1, new short[] {566}),
/* NxS[ 566] */ // Shortest string "/#prag"
      new Table(43, 1, -1, new short[] {567}),
/* NxS[ 567] */ // Shortest string "/#pragm"
      new Table(38, 1, -1, new short[] {533}),
/* NxS[ 568] */ // Shortest string "/#prep"
      new Table(38, 1, -1, new short[] {569}),
/* NxS[ 569] */ // Shortest string "/#prepa"
      new Table(28, 1, -1, new short[] {570}),
/* NxS[ 570] */ // Shortest string "/#prepas"
      new Table(28, 1, -1, new short[] {571}),
/* NxS[ 571] */ // Shortest string "/#prepass"
      new Table(29, 9, -1, new short[] {572, -1, -1, -1, -1, -1, 
          -1, -1, 573}),
/* NxS[ 572] */ // Shortest string "/#prepassf"
      new Table(31, 1, -1, new short[] {575}),
/* NxS[ 573] */ // Shortest string "/#forwardb"
      new Table(38, 1, -1, new short[] {574}),
/* NxS[ 574] */ // Shortest string "/#diffu"
      new Table(28, 1, -1, new short[] {537}),
/* NxS[ 575] */ // Shortest string "/#prepassfi"
      new Table(36, 1, -1, new short[] {545}),
/* NxS[ 576] */ // Shortest string "/#prop"
      new Table(26, 1, -1, new short[] {577}),
/* NxS[ 577] */ // Shortest string "/#prope"
      new Table(30, 1, -1, new short[] {578}),
/* NxS[ 578] */ // Shortest string "/#proper"
      new Table(33, 1, -1, new short[] {579}),
/* NxS[ 579] */ // Shortest string "/#propert"
      new Table(31, 1, -1, new short[] {580}),
/* NxS[ 580] */ // Shortest string "/#properti"
      new Table(26, 1, -1, new short[] {551}),
/* NxS[ 581] */ // Shortest string "/#us"
      new Table(26, 1, -1, new short[] {548}),
/* NxS[ 582] */ // Shortest string "/#al"
      new Table(32, 9, -1, new short[] {587, -1, -1, -1, -1, -1, 
          -1, -1, 588}),
/* NxS[ 583] */ // Shortest string "/#am"
      new Table(37, 1, -1, new short[] {584}),
/* NxS[ 584] */ // Shortest string "/#amb"
      new Table(31, 1, -1, new short[] {585}),
/* NxS[ 585] */ // Shortest string "/#ambi"
      new Table(26, 1, -1, new short[] {586}),
/* NxS[ 586] */ // Shortest string "/#ambie"
      new Table(36, 1, -1, new short[] {532}),
/* NxS[ 587] */ // Shortest string "/#alw"
      new Table(38, 1, -1, new short[] {591}),
/* NxS[ 588] */ // Shortest string "/#alp"
      new Table(35, 1, -1, new short[] {589}),
/* NxS[ 589] */ // Shortest string "/#alph"
      new Table(38, 1, -1, new short[] {590}),
/* NxS[ 590] */ // Shortest string "/#alpha"
      new Table(33, 1, -1, new short[] {530}),
/* NxS[ 591] */ // Shortest string "/#alwa"
      new Table(44, 1, -1, new short[] {551}),
/* NxS[ 592] */ // Shortest string "/#bl"
      new Table(26, 1, -1, new short[] {602}),
/* NxS[ 593] */ // Shortest string "/#bi"
      new Table(36, 1, -1, new short[] {594}),
/* NxS[ 594] */ // Shortest string "/#bin"
      new Table(24, 1, -1, new short[] {595}),
/* NxS[ 595] */ // Shortest string "/#bind"
      new Table(54, 45, -1, new short[] {4, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 3, 533, -1, 533, -1, -1, 3, 533, 533, 533, 533, 533, 
          533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 596}),
/* NxS[ 596] */ // Shortest string "/#bindc"
      new Table(35, 1, -1, new short[] {597}),
/* NxS[ 597] */ // Shortest string "/#bindch"
      new Table(38, 1, -1, new short[] {598}),
/* NxS[ 598] */ // Shortest string "/#bindcha"
      new Table(36, 1, -1, new short[] {599}),
/* NxS[ 599] */ // Shortest string "/#bindchan"
      new Table(36, 1, -1, new short[] {600}),
/* NxS[ 600] */ // Shortest string "/#bindchann"
      new Table(26, 1, -1, new short[] {601}),
/* NxS[ 601] */ // Shortest string "/#bindchanne"
      new Table(27, 1, -1, new short[] {551}),
/* NxS[ 602] */ // Shortest string "/#ble"
      new Table(36, 1, -1, new short[] {603}),
/* NxS[ 603] */ // Shortest string "/#lo"
      new Table(24, 1, -1, new short[] {533}),
/* NxS[ 604] */ // Shortest string "/#na"
      new Table(43, 1, -1, new short[] {537}),
/* NxS[ 605] */ // Shortest string "/#co"
      new Table(27, 17, -1, new short[] {619, -1, -1, -1, -1, -1, 
          -1, -1, -1, 620, -1, -1, -1, -1, -1, -1, 621}),
/* NxS[ 606] */ // Shortest string "/#ca"
      new Table(33, 1, -1, new short[] {614}),
/* NxS[ 607] */ // Shortest string "/#cu"
      new Table(27, 1, -1, new short[] {539}),
/* NxS[ 608] */ // Shortest string "/#cg"
      new Table(40, 1, -1, new short[] {609}),
/* NxS[ 609] */ // Shortest string "/#cgp"
      new Table(30, 1, -1, new short[] {610}),
/* NxS[ 610] */ // Shortest string "/#cgpr"
      new Table(25, 1, -1, new short[] {611}),
/* NxS[ 611] */ // Shortest string "/#cgpro"
      new Table(42, 1, -1, new short[] {612}),
/* NxS[ 612] */ // Shortest string "/#cgprog"
      new Table(30, 1, -1, new short[] {613}),
/* NxS[ 613] */ // Shortest string "/#cgprogr"
      new Table(38, 1, -1, new short[] {561}),
/* NxS[ 614] */ // Shortest string "/#cat"
      new Table(26, 1, -1, new short[] {615}),
/* NxS[ 615] */ // Shortest string "/#cate"
      new Table(42, 1, -1, new short[] {616}),
/* NxS[ 616] */ // Shortest string "/#categ"
      new Table(25, 1, -1, new short[] {617}),
/* NxS[ 617] */ // Shortest string "/#catego"
      new Table(30, 1, -1, new short[] {618}),
/* NxS[ 618] */ // Shortest string "/#densit"
      new Table(44, 1, -1, new short[] {533}),
/* NxS[ 619] */ // Shortest string "/#col"
      new Table(25, 1, -1, new short[] {633}),
/* NxS[ 620] */ // Shortest string "/#con"
      new Table(28, 1, -1, new short[] {624}),
/* NxS[ 621] */ // Shortest string "/#com"
      new Table(37, 4, -1, new short[] {622, -1, -1, 533}),
/* NxS[ 622] */ // Shortest string "/#comb"
      new Table(31, 1, -1, new short[] {623}),
/* NxS[ 623] */ // Shortest string "/#combi"
      new Table(36, 1, -1, new short[] {537}),
/* NxS[ 624] */ // Shortest string "/#cons"
      new Table(33, 1, -1, new short[] {625}),
/* NxS[ 625] */ // Shortest string "/#const"
      new Table(38, 1, -1, new short[] {626}),
/* NxS[ 626] */ // Shortest string "/#consta"
      new Table(36, 1, -1, new short[] {627}),
/* NxS[ 627] */ // Shortest string "/#constan"
      new Table(33, 1, -1, new short[] {628}),
/* NxS[ 628] */ // Shortest string "/#constant"
      new Table(34, 1, -1, new short[] {629}),
/* NxS[ 629] */ // Shortest string "/#dstc"
      new Table(25, 1, -1, new short[] {630}),
/* NxS[ 630] */ // Shortest string "/#dstco"
      new Table(27, 1, -1, new short[] {631}),
/* NxS[ 631] */ // Shortest string "/#dstcol"
      new Table(25, 1, -1, new short[] {632}),
/* NxS[ 632] */ // Shortest string "/#shade"
      new Table(30, 1, -1, new short[] {533}),
/* NxS[ 633] */ // Shortest string "/#colo"
      new Table(30, 1, -1, new short[] {634}),
/* NxS[ 634] */ // Shortest string "/#color"
      new Table(43, 1, -1, new short[] {635}),
/* NxS[ 635] */ // Shortest string "/#colorm"
      new Table(38, 1, -1, new short[] {636}),
/* NxS[ 636] */ // Shortest string "/#colorma"
      new Table(28, 6, -1, new short[] {637, -1, -1, -1, -1, 542}),
/* NxS[ 637] */ // Shortest string "/#fallbac"
      new Table(47, 1, -1, new short[] {533}),
/* NxS[ 638] */ // Shortest string "/#ta"
      new Table(42, 1, -1, new short[] {551}),
/* NxS[ 639] */ // Shortest string "/#wr"
      new Table(31, 1, -1, new short[] {642}),
/* NxS[ 640] */ // Shortest string "/#wh"
      new Table(31, 1, -1, new short[] {641}),
/* NxS[ 641] */ // Shortest string "/#whi"
      new Table(27, 1, -1, new short[] {537}),
/* NxS[ 642] */ // Shortest string "/#wri"
      new Table(33, 1, -1, new short[] {643}),
/* NxS[ 643] */ // Shortest string "/#writ"
      new Table(26, 1, -1, new short[] {644}),
/* NxS[ 644] */ // Shortest string "/#read"
      new Table(43, 1, -1, new short[] {645}),
/* NxS[ 645] */ // Shortest string "/#readm"
      new Table(38, 1, -1, new short[] {646}),
/* NxS[ 646] */ // Shortest string "/#readma"
      new Table(28, 1, -1, new short[] {637}),
/* NxS[ 647] */ // Shortest string "/#if"
      new Table(24, 47, 533, new short[] {652, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 651, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 3, 533, -1, 533, -1, -1, 3}),
/* NxS[ 648] */ // Shortest string "/#in"
      new Table(34, 1, -1, new short[] {649}),
/* NxS[ 649] */ // Shortest string "/#inc"
      new Table(27, 1, -1, new short[] {650}),
/* NxS[ 650] */ // Shortest string "/#incl"
      new Table(39, 1, -1, new short[] {540}),
/* NxS[ 651] */ // Shortest string "/#ifn"
      new Table(24, 1, -1, new short[] {652}),
/* NxS[ 652] */ // Shortest string "/#ifd"
      new Table(26, 1, -1, new short[] {653}),
/* NxS[ 653] */ // Shortest string "/#eli"
      new Table(29, 1, -1, new short[] {533}),
/* NxS[ 654] */ // Shortest string "/#re"
      new Table(29, 10, -1, new short[] {533, -1, -1, -1, -1, -1, 
          -1, -1, -1, 655}),
/* NxS[ 655] */ // Shortest string "/#rea"
      new Table(24, 1, -1, new short[] {644}),
/* NxS[ 656] */ // Shortest string "/#fo"
      new Table(30, 13, -1, new short[] {662, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 533}),
/* NxS[ 657] */ // Shortest string "/#fa"
      new Table(27, 5, -1, new short[] {658, -1, -1, -1, 539}),
/* NxS[ 658] */ // Shortest string "/#fal"
      new Table(27, 1, -1, new short[] {659}),
/* NxS[ 659] */ // Shortest string "/#fall"
      new Table(37, 1, -1, new short[] {660}),
/* NxS[ 660] */ // Shortest string "/#fallb"
      new Table(38, 1, -1, new short[] {661}),
/* NxS[ 661] */ // Shortest string "/#fallba"
      new Table(34, 1, -1, new short[] {637}),
/* NxS[ 662] */ // Shortest string "/#for"
      new Table(54, 43, -1, new short[] {4, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 3, 533, -1, 533, -1, -1, 3, 533, 533, 533, 533, 533, 
          533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, -1, -1, -1, -1, 
          -1, -1, -1, -1, 663}),
/* NxS[ 663] */ // Shortest string "/#forw"
      new Table(38, 1, -1, new short[] {664}),
/* NxS[ 664] */ // Shortest string "/#forwa"
      new Table(30, 1, -1, new short[] {665}),
/* NxS[ 665] */ // Shortest string "/#forwar"
      new Table(24, 1, -1, new short[] {666}),
/* NxS[ 666] */ // Shortest string "/#forward"
      new Table(37, 2, -1, new short[] {573, 667}),
/* NxS[ 667] */ // Shortest string "/#forwarda"
      new Table(24, 1, -1, new short[] {603}),
/* NxS[ 668] */ // Shortest string "/#so"
      new Table(29, 1, -1, new short[] {723}),
/* NxS[ 669] */ // Shortest string "/#se"
      new Table(33, 8, -1, new short[] {710, -1, -1, -1, -1, -1, 
          -1, 711}),
/* NxS[ 670] */ // Shortest string "/#sr"
      new Table(34, 1, -1, new short[] {706}),
/* NxS[ 671] */ // Shortest string "/#sw"
      new Table(31, 1, -1, new short[] {703}),
/* NxS[ 672] */ // Shortest string "/#st"
      new Table(26, 1, -1, new short[] {701}),
/* NxS[ 673] */ // Shortest string "/#sh"
      new Table(31, 8, -1, new short[] {685, -1, -1, -1, -1, -1, 
          -1, 686}),
/* NxS[ 674] */ // Shortest string "/#su"
      new Table(37, 1, -1, new short[] {680}),
/* NxS[ 675] */ // Shortest string "/#sp"
      new Table(26, 1, -1, new short[] {676}),
/* NxS[ 676] */ // Shortest string "/#spe"
      new Table(34, 1, -1, new short[] {677}),
/* NxS[ 677] */ // Shortest string "/#spec"
      new Table(39, 1, -1, new short[] {678}),
/* NxS[ 678] */ // Shortest string "/#specu"
      new Table(27, 1, -1, new short[] {679}),
/* NxS[ 679] */ // Shortest string "/#specul"
      new Table(38, 1, -1, new short[] {632}),
/* NxS[ 680] */ // Shortest string "/#sub"
      new Table(28, 1, -1, new short[] {681}),
/* NxS[ 681] */ // Shortest string "/#subs"
      new Table(35, 1, -1, new short[] {682}),
/* NxS[ 682] */ // Shortest string "/#subsh"
      new Table(38, 1, -1, new short[] {683}),
/* NxS[ 683] */ // Shortest string "/#subsha"
      new Table(24, 1, -1, new short[] {684}),
/* NxS[ 684] */ // Shortest string "/#subshad"
      new Table(26, 1, -1, new short[] {632}),
/* NxS[ 685] */ // Shortest string "/#shi"
      new Table(36, 1, -1, new short[] {698}),
/* NxS[ 686] */ // Shortest string "/#sha"
      new Table(24, 1, -1, new short[] {687}),
/* NxS[ 687] */ // Shortest string "/#shad"
      new Table(25, 2, -1, new short[] {688, 632}),
/* NxS[ 688] */ // Shortest string "/#shado"
      new Table(32, 1, -1, new short[] {689}),
/* NxS[ 689] */ // Shortest string "/#shadow"
      new Table(34, 1, -1, new short[] {690}),
/* NxS[ 690] */ // Shortest string "/#shadowc"
      new Table(25, 14, -1, new short[] {691, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 692}),
/* NxS[ 691] */ // Shortest string "/#shadowco"
      new Table(27, 1, -1, new short[] {694}),
/* NxS[ 692] */ // Shortest string "/#shadowca"
      new Table(28, 1, -1, new short[] {693}),
/* NxS[ 693] */ // Shortest string "/#shadowcas"
      new Table(33, 1, -1, new short[] {684}),
/* NxS[ 694] */ // Shortest string "/#shadowcol"
      new Table(27, 1, -1, new short[] {695}),
/* NxS[ 695] */ // Shortest string "/#shadowcoll"
      new Table(26, 1, -1, new short[] {696}),
/* NxS[ 696] */ // Shortest string "/#shadowcolle"
      new Table(34, 1, -1, new short[] {697}),
/* NxS[ 697] */ // Shortest string "/#shadowcollec"
      new Table(33, 1, -1, new short[] {631}),
/* NxS[ 698] */ // Shortest string "/#shin"
      new Table(31, 1, -1, new short[] {699}),
/* NxS[ 699] */ // Shortest string "/#shini"
      new Table(36, 1, -1, new short[] {700}),
/* NxS[ 700] */ // Shortest string "/#shinin"
      new Table(26, 1, -1, new short[] {550}),
/* NxS[ 701] */ // Shortest string "/#ste"
      new Table(36, 1, -1, new short[] {702}),
/* NxS[ 702] */ // Shortest string "/#sten"
      new Table(34, 1, -1, new short[] {538}),
/* NxS[ 703] */ // Shortest string "/#swi"
      new Table(33, 1, -1, new short[] {704}),
/* NxS[ 704] */ // Shortest string "/#swit"
      new Table(34, 1, -1, new short[] {705}),
/* NxS[ 705] */ // Shortest string "/#switc"
      new Table(35, 1, -1, new short[] {533}),
/* NxS[ 706] */ // Shortest string "/#dst"
      new Table(34, 5, -1, new short[] {629, -1, -1, -1, 707}),
/* NxS[ 707] */ // Shortest string "/#dsta"
      new Table(27, 1, -1, new short[] {708}),
/* NxS[ 708] */ // Shortest string "/#dstal"
      new Table(40, 1, -1, new short[] {709}),
/* NxS[ 709] */ // Shortest string "/#dstalp"
      new Table(35, 1, -1, new short[] {567}),
/* NxS[ 710] */ // Shortest string "/#set"
      new Table(33, 1, -1, new short[] {718}),
/* NxS[ 711] */ // Shortest string "/#sep"
      new Table(38, 1, -1, new short[] {712}),
/* NxS[ 712] */ // Shortest string "/#sepa"
      new Table(30, 1, -1, new short[] {713}),
/* NxS[ 713] */ // Shortest string "/#separ"
      new Table(38, 1, -1, new short[] {714}),
/* NxS[ 714] */ // Shortest string "/#separa"
      new Table(33, 1, -1, new short[] {715}),
/* NxS[ 715] */ // Shortest string "/#separat"
      new Table(26, 1, -1, new short[] {716}),
/* NxS[ 716] */ // Shortest string "/#separate"
      new Table(28, 1, -1, new short[] {717}),
/* NxS[ 717] */ // Shortest string "/#separates"
      new Table(40, 1, -1, new short[] {675}),
/* NxS[ 718] */ // Shortest string "/#sett"
      new Table(26, 1, -1, new short[] {719}),
/* NxS[ 719] */ // Shortest string "/#sette"
      new Table(45, 1, -1, new short[] {720}),
/* NxS[ 720] */ // Shortest string "/#settex"
      new Table(33, 1, -1, new short[] {721}),
/* NxS[ 721] */ // Shortest string "/#settext"
      new Table(39, 1, -1, new short[] {722}),
/* NxS[ 722] */ // Shortest string "/#settextu"
      new Table(30, 1, -1, new short[] {537}),
/* NxS[ 723] */ // Shortest string "/#sof"
      new Table(33, 1, -1, new short[] {724}),
/* NxS[ 724] */ // Shortest string "/#soft"
      new Table(41, 1, -1, new short[] {725}),
/* NxS[ 725] */ // Shortest string "/#softv"
      new Table(26, 1, -1, new short[] {726}),
/* NxS[ 726] */ // Shortest string "/#softve"
      new Table(42, 1, -1, new short[] {727}),
/* NxS[ 727] */ // Shortest string "/#softveg"
      new Table(26, 1, -1, new short[] {728}),
/* NxS[ 728] */ // Shortest string "/#softvege"
      new Table(33, 1, -1, new short[] {729}),
/* NxS[ 729] */ // Shortest string "/#softveget"
      new Table(38, 1, -1, new short[] {730}),
/* NxS[ 730] */ // Shortest string "/#softvegeta"
      new Table(33, 1, -1, new short[] {731}),
/* NxS[ 731] */ // Shortest string "/#emiss"
      new Table(31, 1, -1, new short[] {732}),
/* NxS[ 732] */ // Shortest string "/#emissi"
      new Table(25, 1, -1, new short[] {733}),
/* NxS[ 733] */ // Shortest string "/#emissio"
      new Table(36, 1, -1, new short[] {533}),
/* NxS[ 734] */ // Shortest string "/#li"
      new Table(42, 1, -1, new short[] {735}),
/* NxS[ 735] */ // Shortest string "/#lig"
      new Table(35, 1, -1, new short[] {736}),
/* NxS[ 736] */ // Shortest string "/#ligh"
      new Table(33, 1, -1, new short[] {737}),
/* NxS[ 737] */ // Shortest string "/#light"
      new Table(31, 13, -1, new short[] {738, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 739}),
/* NxS[ 738] */ // Shortest string "/#lighti"
      new Table(36, 1, -1, new short[] {740}),
/* NxS[ 739] */ // Shortest string "/#lightm"
      new Table(25, 1, -1, new short[] {540}),
/* NxS[ 740] */ // Shortest string "/#endc"
      new Table(42, 1, -1, new short[] {533}),
/* NxS[ 741] */ // Shortest string "/#el"
      new Table(28, 4, -1, new short[] {537, -1, -1, 653}),
/* NxS[ 742] */ // Shortest string "/#en"
      new Table(24, 1, -1, new short[] {746}),
/* NxS[ 743] */ // Shortest string "/#em"
      new Table(31, 1, -1, new short[] {744}),
/* NxS[ 744] */ // Shortest string "/#emi"
      new Table(28, 1, -1, new short[] {745}),
/* NxS[ 745] */ // Shortest string "/#emis"
      new Table(28, 1, -1, new short[] {731}),
/* NxS[ 746] */ // Shortest string "/#end"
      new Table(31, 4, -1, new short[] {653, -1, -1, 740}),
/* NxS[ 747] */ // Shortest string "/#of"
      new Table(29, 1, -1, new short[] {758}),
/* NxS[ 748] */ // Shortest string "/#on"
      new Table(26, 1, -1, new short[] {749}),
/* NxS[ 749] */ // Shortest string "/#one"
      new Table(43, 1, -1, new short[] {750}),
/* NxS[ 750] */ // Shortest string "/#onem"
      new Table(31, 1, -1, new short[] {751}),
/* NxS[ 751] */ // Shortest string "/#onemi"
      new Table(36, 1, -1, new short[] {752}),
/* NxS[ 752] */ // Shortest string "/#onemin"
      new Table(39, 1, -1, new short[] {753}),
/* NxS[ 753] */ // Shortest string "/#oneminu"
      new Table(28, 1, -1, new short[] {754}),
/* NxS[ 754] */ // Shortest string "/#oneminus"
      new Table(24, 5, -1, new short[] {755, -1, -1, -1, 756}),
/* NxS[ 755] */ // Shortest string "/#oneminusd"
      new Table(28, 1, -1, new short[] {757}),
/* NxS[ 756] */ // Shortest string "/#oneminuss"
      new Table(30, 1, -1, new short[] {670}),
/* NxS[ 757] */ // Shortest string "/#ds"
      new Table(33, 1, -1, new short[] {706}),
/* NxS[ 758] */ // Shortest string "/#off"
      new Table(28, 1, -1, new short[] {759}),
/* NxS[ 759] */ // Shortest string "/#offs"
      new Table(26, 1, -1, new short[] {532}),
/* NxS[ 760] */ // Shortest string "/#do"
      new Table(24, 47, 533, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 772, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 3, 533, -1, 533, -1, -1, 3}),
/* NxS[ 761] */ // Shortest string "/#de"
      new Table(29, 8, -1, new short[] {765, -1, -1, -1, -1, -1, 
          -1, 766}),
/* NxS[ 762] */ // Shortest string "/#di"
      new Table(29, 1, -1, new short[] {763}),
/* NxS[ 763] */ // Shortest string "/#dif"
      new Table(29, 1, -1, new short[] {764}),
/* NxS[ 764] */ // Shortest string "/#diff"
      new Table(39, 1, -1, new short[] {574}),
/* NxS[ 765] */ // Shortest string "/#def"
      new Table(31, 1, -1, new short[] {769}),
/* NxS[ 766] */ // Shortest string "/#den"
      new Table(28, 1, -1, new short[] {767}),
/* NxS[ 767] */ // Shortest string "/#dens"
      new Table(31, 1, -1, new short[] {768}),
/* NxS[ 768] */ // Shortest string "/#densi"
      new Table(33, 1, -1, new short[] {618}),
/* NxS[ 769] */ // Shortest string "/#defi"
      new Table(36, 1, -1, new short[] {770}),
/* NxS[ 770] */ // Shortest string "/#defin"
      new Table(26, 1, -1, new short[] {771}),
/* NxS[ 771] */ // Shortest string "/#define"
      new Table(54, 35, -1, new short[] {4, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 3, 533, -1, 533, -1, -1, 3, 533, 533, 533, 533, 533, 
          533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533}),
/* NxS[ 772] */ // Shortest string "/#dou"
      new Table(37, 1, -1, new short[] {641}),
/* NxS[ 773] */ // Shortest string "/_o"
      new Table(37, 1, -1, new short[] {880}),
/* NxS[ 774] */ // Shortest string "/_l"
      new Table(31, 1, -1, new short[] {856}),
/* NxS[ 775] */ // Shortest string "/_s"
      new Table(31, 10, -1, new short[] {846, -1, -1, 847, -1, -1, 
          -1, -1, -1, 848}),
/* NxS[ 776] */ // Shortest string "/_w"
      new Table(25, 1, -1, new short[] {813}),
/* NxS[ 777] */ // Shortest string "/_c"
      new Table(25, 1, -1, new short[] {808}),
/* NxS[ 778] */ // Shortest string "/_p"
      new Table(30, 1, -1, new short[] {794}),
/* NxS[ 779] */ // Shortest string "/_m"
      new Table(25, 1, -1, new short[] {780}),
/* NxS[ 780] */ // Shortest string "/_mo"
      new Table(24, 1, -1, new short[] {781}),
/* NxS[ 781] */ // Shortest string "/_mod"
      new Table(26, 1, -1, new short[] {782}),
/* NxS[ 782] */ // Shortest string "/_mode"
      new Table(27, 1, -1, new short[] {783}),
/* NxS[ 783] */ // Shortest string "/_model"
      new Table(27, 1, -1, new short[] {784}),
/* NxS[ 784] */ // Shortest string "/_modell"
      new Table(31, 1, -1, new short[] {785}),
/* NxS[ 785] */ // Shortest string "/_modelli"
      new Table(42, 1, -1, new short[] {786}),
/* NxS[ 786] */ // Shortest string "/_modellig"
      new Table(35, 1, -1, new short[] {787}),
/* NxS[ 787] */ // Shortest string "/_modelligh"
      new Table(33, 1, -1, new short[] {788}),
/* NxS[ 788] */ // Shortest string "/_modellight"
      new Table(34, 1, -1, new short[] {789}),
/* NxS[ 789] */ // Shortest string "/_modellightc"
      new Table(25, 1, -1, new short[] {790}),
/* NxS[ 790] */ // Shortest string "/_modellightco"
      new Table(27, 1, -1, new short[] {791}),
/* NxS[ 791] */ // Shortest string "/_modellightcol"
      new Table(25, 1, -1, new short[] {792}),
/* NxS[ 792] */ // Shortest string "/_modellightcolo"
      new Table(30, 1, -1, new short[] {793}),
/* NxS[ 793] */ // Shortest string "/_time"
      new Table(54, 34, -1, new short[] {5, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 5, 5, -1, 5, -1, -1, 5, 5, 5, 5, 5, 5, 
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5}),
/* NxS[ 794] */ // Shortest string "/_pr"
      new Table(25, 1, -1, new short[] {795}),
/* NxS[ 795] */ // Shortest string "/_pro"
      new Table(63, 1, -1, new short[] {796}),
/* NxS[ 796] */ // Shortest string "/_proj"
      new Table(26, 1, -1, new short[] {797}),
/* NxS[ 797] */ // Shortest string "/_proje"
      new Table(34, 1, -1, new short[] {798}),
/* NxS[ 798] */ // Shortest string "/_projec"
      new Table(33, 1, -1, new short[] {799}),
/* NxS[ 799] */ // Shortest string "/_project"
      new Table(31, 1, -1, new short[] {800}),
/* NxS[ 800] */ // Shortest string "/_projecti"
      new Table(25, 1, -1, new short[] {801}),
/* NxS[ 801] */ // Shortest string "/_scree"
      new Table(36, 1, -1, new short[] {802}),
/* NxS[ 802] */ // Shortest string "/_screen"
      new Table(40, 1, -1, new short[] {803}),
/* NxS[ 803] */ // Shortest string "/_screenp"
      new Table(38, 1, -1, new short[] {804}),
/* NxS[ 804] */ // Shortest string "/_screenpa"
      new Table(30, 1, -1, new short[] {805}),
/* NxS[ 805] */ // Shortest string "/_screenpar"
      new Table(38, 1, -1, new short[] {806}),
/* NxS[ 806] */ // Shortest string "/_screenpara"
      new Table(43, 1, -1, new short[] {807}),
/* NxS[ 807] */ // Shortest string "/_screenparam"
      new Table(28, 1, -1, new short[] {793}),
/* NxS[ 808] */ // Shortest string "/_co"
      new Table(28, 1, -1, new short[] {809}),
/* NxS[ 809] */ // Shortest string "/_sin"
      new Table(33, 1, -1, new short[] {810}),
/* NxS[ 810] */ // Shortest string "/_t"
      new Table(31, 1, -1, new short[] {811}),
/* NxS[ 811] */ // Shortest string "/_ti"
      new Table(43, 1, -1, new short[] {812}),
/* NxS[ 812] */ // Shortest string "/_tim"
      new Table(26, 1, -1, new short[] {793}),
/* NxS[ 813] */ // Shortest string "/_wo"
      new Table(30, 1, -1, new short[] {814}),
/* NxS[ 814] */ // Shortest string "/_wor"
      new Table(27, 1, -1, new short[] {815}),
/* NxS[ 815] */ // Shortest string "/_worl"
      new Table(24, 1, -1, new short[] {816}),
/* NxS[ 816] */ // Shortest string "/_world"
      new Table(28, 22, -1, new short[] {817, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 818}),
/* NxS[ 817] */ // Shortest string "/_worlds"
      new Table(40, 1, -1, new short[] {827}),
/* NxS[ 818] */ // Shortest string "/_world2"
      new Table(25, 3, -1, new short[] {819, -1, 820}),
/* NxS[ 819] */ // Shortest string "/_world2o"
      new Table(37, 1, -1, new short[] {824}),
/* NxS[ 820] */ // Shortest string "/_world2l"
      new Table(31, 1, -1, new short[] {821}),
/* NxS[ 821] */ // Shortest string "/_world2li"
      new Table(42, 1, -1, new short[] {822}),
/* NxS[ 822] */ // Shortest string "/_world2lig"
      new Table(35, 1, -1, new short[] {823}),
/* NxS[ 823] */ // Shortest string "/_world2ligh"
      new Table(33, 1, -1, new short[] {793}),
/* NxS[ 824] */ // Shortest string "/_world2ob"
      new Table(63, 1, -1, new short[] {825}),
/* NxS[ 825] */ // Shortest string "/_world2obj"
      new Table(26, 1, -1, new short[] {826}),
/* NxS[ 826] */ // Shortest string "/_world2obje"
      new Table(34, 1, -1, new short[] {823}),
/* NxS[ 827] */ // Shortest string "/_worldsp"
      new Table(38, 1, -1, new short[] {828}),
/* NxS[ 828] */ // Shortest string "/_worldspa"
      new Table(34, 1, -1, new short[] {829}),
/* NxS[ 829] */ // Shortest string "/_worldspac"
      new Table(26, 1, -1, new short[] {830}),
/* NxS[ 830] */ // Shortest string "/_worldspace"
      new Table(27, 8, -1, new short[] {831, -1, -1, -1, -1, -1, 
          -1, 832}),
/* NxS[ 831] */ // Shortest string "/_worldspacel"
      new Table(31, 1, -1, new short[] {839}),
/* NxS[ 832] */ // Shortest string "/_worldspacec"
      new Table(38, 1, -1, new short[] {833}),
/* NxS[ 833] */ // Shortest string "/_worldspaceca"
      new Table(43, 1, -1, new short[] {834}),
/* NxS[ 834] */ // Shortest string "/_worldspacecam"
      new Table(26, 1, -1, new short[] {835}),
/* NxS[ 835] */ // Shortest string "/_worldspacecame"
      new Table(30, 1, -1, new short[] {836}),
/* NxS[ 836] */ // Shortest string "/_worldspacecamer"
      new Table(38, 1, -1, new short[] {837}),
/* NxS[ 837] */ // Shortest string "/_objectspacelight"
      new Table(40, 1, -1, new short[] {838}),
/* NxS[ 838] */ // Shortest string "/_objectspacelightp"
      new Table(25, 1, -1, new short[] {807}),
/* NxS[ 839] */ // Shortest string "/_worldspaceli"
      new Table(42, 1, -1, new short[] {840}),
/* NxS[ 840] */ // Shortest string "/_worldspacelig"
      new Table(35, 1, -1, new short[] {841}),
/* NxS[ 841] */ // Shortest string "/_worldspaceligh"
      new Table(33, 1, -1, new short[] {842}),
/* NxS[ 842] */ // Shortest string "/_worldspacelight"
      new Table(40, 1, -1, new short[] {843}),
/* NxS[ 843] */ // Shortest string "/_worldspacelightp"
      new Table(25, 1, -1, new short[] {844}),
/* NxS[ 844] */ // Shortest string "/_worldspacelightpo"
      new Table(28, 1, -1, new short[] {845}),
/* NxS[ 845] */ // Shortest string "/_lightcolor"
      new Table(52, 1, -1, new short[] {793}),
/* NxS[ 846] */ // Shortest string "/_si"
      new Table(36, 1, -1, new short[] {809}),
/* NxS[ 847] */ // Shortest string "/_sc"
      new Table(30, 1, -1, new short[] {854}),
/* NxS[ 848] */ // Shortest string "/_sp"
      new Table(26, 1, -1, new short[] {849}),
/* NxS[ 849] */ // Shortest string "/_spe"
      new Table(34, 1, -1, new short[] {850}),
/* NxS[ 850] */ // Shortest string "/_spec"
      new Table(39, 1, -1, new short[] {851}),
/* NxS[ 851] */ // Shortest string "/_specu"
      new Table(27, 1, -1, new short[] {852}),
/* NxS[ 852] */ // Shortest string "/_specul"
      new Table(38, 1, -1, new short[] {853}),
/* NxS[ 853] */ // Shortest string "/_specula"
      new Table(30, 1, -1, new short[] {783}),
/* NxS[ 854] */ // Shortest string "/_scr"
      new Table(26, 1, -1, new short[] {855}),
/* NxS[ 855] */ // Shortest string "/_scre"
      new Table(26, 1, -1, new short[] {801}),
/* NxS[ 856] */ // Shortest string "/_li"
      new Table(42, 1, -1, new short[] {857}),
/* NxS[ 857] */ // Shortest string "/_lig"
      new Table(35, 1, -1, new short[] {858}),
/* NxS[ 858] */ // Shortest string "/_ligh"
      new Table(33, 1, -1, new short[] {859}),
/* NxS[ 859] */ // Shortest string "/_light"
      new Table(33, 17, -1, new short[] {860, 861, -1, -1, -1, -1, 
          -1, -1, -1, -1, 862, -1, -1, -1, -1, -1, 863}),
/* NxS[ 860] */ // Shortest string "/_lightt"
      new Table(26, 1, -1, new short[] {875}),
/* NxS[ 861] */ // Shortest string "/_lightc"
      new Table(25, 1, -1, new short[] {872}),
/* NxS[ 862] */ // Shortest string "/_lightm"
      new Table(38, 1, -1, new short[] {868}),
/* NxS[ 863] */ // Shortest string "/_light2"
      new Table(32, 1, -1, new short[] {864}),
/* NxS[ 864] */ // Shortest string "/_light2w"
      new Table(25, 1, -1, new short[] {865}),
/* NxS[ 865] */ // Shortest string "/_light2wo"
      new Table(30, 1, -1, new short[] {866}),
/* NxS[ 866] */ // Shortest string "/_light2wor"
      new Table(27, 1, -1, new short[] {867}),
/* NxS[ 867] */ // Shortest string "/_light2worl"
      new Table(24, 1, -1, new short[] {793}),
/* NxS[ 868] */ // Shortest string "/_lightma"
      new Table(33, 1, -1, new short[] {869}),
/* NxS[ 869] */ // Shortest string "/_lightmat"
      new Table(30, 1, -1, new short[] {870}),
/* NxS[ 870] */ // Shortest string "/_lightmatr"
      new Table(31, 1, -1, new short[] {871}),
/* NxS[ 871] */ // Shortest string "/_lightmatri"
      new Table(45, 1, -1, new short[] {845}),
/* NxS[ 872] */ // Shortest string "/_lightco"
      new Table(27, 1, -1, new short[] {873}),
/* NxS[ 873] */ // Shortest string "/_lightcol"
      new Table(25, 1, -1, new short[] {874}),
/* NxS[ 874] */ // Shortest string "/_lightcolo"
      new Table(30, 1, -1, new short[] {845}),
/* NxS[ 875] */ // Shortest string "/_lightte"
      new Table(45, 1, -1, new short[] {876}),
/* NxS[ 876] */ // Shortest string "/_lighttex"
      new Table(33, 1, -1, new short[] {877}),
/* NxS[ 877] */ // Shortest string "/_lighttext"
      new Table(39, 1, -1, new short[] {878}),
/* NxS[ 878] */ // Shortest string "/_lighttextu"
      new Table(30, 1, -1, new short[] {879}),
/* NxS[ 879] */ // Shortest string "/_lighttextur"
      new Table(26, 1, -1, new short[] {845}),
/* NxS[ 880] */ // Shortest string "/_ob"
      new Table(63, 1, -1, new short[] {881}),
/* NxS[ 881] */ // Shortest string "/_obj"
      new Table(26, 1, -1, new short[] {882}),
/* NxS[ 882] */ // Shortest string "/_obje"
      new Table(34, 1, -1, new short[] {883}),
/* NxS[ 883] */ // Shortest string "/_objec"
      new Table(33, 1, -1, new short[] {884}),
/* NxS[ 884] */ // Shortest string "/_object"
      new Table(28, 22, -1, new short[] {885, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 886}),
/* NxS[ 885] */ // Shortest string "/_objects"
      new Table(40, 1, -1, new short[] {887}),
/* NxS[ 886] */ // Shortest string "/_object2"
      new Table(27, 6, -1, new short[] {820, -1, -1, -1, -1, 864}),
/* NxS[ 887] */ // Shortest string "/_objectsp"
      new Table(38, 1, -1, new short[] {888}),
/* NxS[ 888] */ // Shortest string "/_objectspa"
      new Table(34, 1, -1, new short[] {889}),
/* NxS[ 889] */ // Shortest string "/_objectspac"
      new Table(26, 1, -1, new short[] {890}),
/* NxS[ 890] */ // Shortest string "/_objectspace"
      new Table(27, 1, -1, new short[] {891}),
/* NxS[ 891] */ // Shortest string "/_objectspacel"
      new Table(31, 1, -1, new short[] {892}),
/* NxS[ 892] */ // Shortest string "/_objectspaceli"
      new Table(42, 1, -1, new short[] {893}),
/* NxS[ 893] */ // Shortest string "/_objectspacelig"
      new Table(35, 1, -1, new short[] {894}),
/* NxS[ 894] */ // Shortest string "/_objectspaceligh"
      new Table(33, 1, -1, new short[] {837}),
/* NxS[ 895] */ // Shortest string "/2d"
      new Table(54, 34, -1, new short[] {6, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 6, 6, -1, 6, -1, -1, 6, 6, 6, 6, 6, 6, 
          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}),
/* NxS[ 896] */ // Shortest string "/zf"
      new Table(38, 1, -1, new short[] {905}),
/* NxS[ 897] */ // Shortest string "/zw"
      new Table(30, 1, -1, new short[] {902}),
/* NxS[ 898] */ // Shortest string "/zt"
      new Table(26, 1, -1, new short[] {899}),
/* NxS[ 899] */ // Shortest string "/zte"
      new Table(28, 1, -1, new short[] {900}),
/* NxS[ 900] */ // Shortest string "/ztes"
      new Table(33, 1, -1, new short[] {901}),
/* NxS[ 901] */ // Shortest string "/lod"
      new Table(54, 34, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}),
/* NxS[ 902] */ // Shortest string "/zwr"
      new Table(31, 1, -1, new short[] {903}),
/* NxS[ 903] */ // Shortest string "/zwri"
      new Table(33, 1, -1, new short[] {904}),
/* NxS[ 904] */ // Shortest string "/zwrit"
      new Table(26, 1, -1, new short[] {901}),
/* NxS[ 905] */ // Shortest string "/zfa"
      new Table(31, 1, -1, new short[] {906}),
/* NxS[ 906] */ // Shortest string "/fai"
      new Table(27, 1, -1, new short[] {901}),
/* NxS[ 907] */ // Shortest string "/mo"
      new Table(24, 1, -1, new short[] {919}),
/* NxS[ 908] */ // Shortest string "/mi"
      new Table(36, 1, -1, new short[] {911}),
/* NxS[ 909] */ // Shortest string "/ma"
      new Table(33, 13, -1, new short[] {912, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 911}),
/* NxS[ 910] */ // Shortest string "/mu"
      new Table(27, 1, -1, new short[] {911}),
/* NxS[ 911] */ // Shortest string "/ddy"
      new Table(54, 31, -1, new short[] {911, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 9}),
/* NxS[ 912] */ // Shortest string "/mat"
      new Table(26, 5, -1, new short[] {913, -1, -1, -1, 914}),
/* NxS[ 913] */ // Shortest string "/mate"
      new Table(30, 1, -1, new short[] {917}),
/* NxS[ 914] */ // Shortest string "/matr"
      new Table(31, 1, -1, new short[] {915}),
/* NxS[ 915] */ // Shortest string "/matri"
      new Table(45, 1, -1, new short[] {916}),
/* NxS[ 916] */ // Shortest string "/int2"
      new Table(54, 34, -1, new short[] {10, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 10, 10, -1, 10, -1, -1, 10, 10, 10, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 917] */ // Shortest string "/mater"
      new Table(31, 1, -1, new short[] {918}),
/* NxS[ 918] */ // Shortest string "/materi"
      new Table(38, 1, -1, new short[] {906}),
/* NxS[ 919] */ // Shortest string "/mod"
      new Table(26, 4, -1, new short[] {901, -1, -1, 911}),
/* NxS[ 920] */ // Shortest string "/ge"
      new Table(25, 1, -1, new short[] {927}),
/* NxS[ 921] */ // Shortest string "/gr"
      new Table(38, 1, -1, new short[] {922}),
/* NxS[ 922] */ // Shortest string "/gra"
      new Table(37, 1, -1, new short[] {923}),
/* NxS[ 923] */ // Shortest string "/use"
      new Table(40, 1, -1, new short[] {924}),
/* NxS[ 924] */ // Shortest string "/usep"
      new Table(38, 1, -1, new short[] {925}),
/* NxS[ 925] */ // Shortest string "/usepa"
      new Table(28, 1, -1, new short[] {926}),
/* NxS[ 926] */ // Shortest string "/tag"
      new Table(28, 1, -1, new short[] {901}),
/* NxS[ 927] */ // Shortest string "/geo"
      new Table(43, 1, -1, new short[] {928}),
/* NxS[ 928] */ // Shortest string "/geom"
      new Table(26, 1, -1, new short[] {929}),
/* NxS[ 929] */ // Shortest string "/geome"
      new Table(33, 1, -1, new short[] {930}),
/* NxS[ 930] */ // Shortest string "/geomet"
      new Table(30, 1, -1, new short[] {931}),
/* NxS[ 931] */ // Shortest string "/geometr"
      new Table(44, 1, -1, new short[] {932}),
/* NxS[ 932] */ // Shortest string "/pixel"
      new Table(28, 1, -1, new short[] {933}),
/* NxS[ 933] */ // Shortest string "/pixels"
      new Table(35, 1, -1, new short[] {934}),
/* NxS[ 934] */ // Shortest string "/pixelsh"
      new Table(38, 1, -1, new short[] {935}),
/* NxS[ 935] */ // Shortest string "/pixelsha"
      new Table(24, 1, -1, new short[] {936}),
/* NxS[ 936] */ // Shortest string "/buff"
      new Table(26, 1, -1, new short[] {937}),
/* NxS[ 937] */ // Shortest string "/buffe"
      new Table(30, 1, -1, new short[] {938}),
/* NxS[ 938] */ // Shortest string "/true"
      new Table(54, 34, -1, new short[] {11, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 11, 11, -1, 11, -1, -1, 11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}),
/* NxS[ 939] */ // Shortest string "/vo"
      new Table(27, 5, -1, new short[] {952, -1, -1, -1, 953}),
/* NxS[ 940] */ // Shortest string "/ve"
      new Table(30, 5, -1, new short[] {941, -1, -1, -1, 942}),
/* NxS[ 941] */ // Shortest string "/ver"
      new Table(33, 1, -1, new short[] {944}),
/* NxS[ 942] */ // Shortest string "/vec"
      new Table(33, 1, -1, new short[] {943}),
/* NxS[ 943] */ // Shortest string "/vect"
      new Table(25, 1, -1, new short[] {1330}),
/* NxS[ 944] */ // Shortest string "/vert"
      new Table(26, 1, -1, new short[] {945}),
/* NxS[ 945] */ // Shortest string "/verte"
      new Table(45, 1, -1, new short[] {946}),
/* NxS[ 946] */ // Shortest string "/vertex"
      new Table(54, 39, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 947, 
          933}),
/* NxS[ 947] */ // Shortest string "/vertexl"
      new Table(43, 1, -1, new short[] {948}),
/* NxS[ 948] */ // Shortest string "/vertexlm"
      new Table(54, 41, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
          -1, -1, 949}),
/* NxS[ 949] */ // Shortest string "/vertexlmr"
      new Table(42, 1, -1, new short[] {950}),
/* NxS[ 950] */ // Shortest string "/vertexlmrg"
      new Table(37, 1, -1, new short[] {951}),
/* NxS[ 951] */ // Shortest string "/cgprogra"
      new Table(43, 1, -1, new short[] {901}),
/* NxS[ 952] */ // Shortest string "/vol"
      new Table(38, 1, -1, new short[] {954}),
/* NxS[ 953] */ // Shortest string "/voi"
      new Table(24, 1, -1, new short[] {938}),
/* NxS[ 954] */ // Shortest string "/vola"
      new Table(33, 1, -1, new short[] {955}),
/* NxS[ 955] */ // Shortest string "/volat"
      new Table(31, 1, -1, new short[] {956}),
/* NxS[ 956] */ // Shortest string "/compi"
      new Table(27, 1, -1, new short[] {957}),
/* NxS[ 957] */ // Shortest string "/fals"
      new Table(26, 1, -1, new short[] {938}),
/* NxS[ 958] */ // Shortest string "/po"
      new Table(31, 2, -1, new short[] {1003, 911}),
/* NxS[ 959] */ // Shortest string "/pr"
      new Table(25, 14, -1, new short[] {983, 984, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 985}),
/* NxS[ 960] */ // Shortest string "/pi"
      new Table(45, 1, -1, new short[] {981}),
/* NxS[ 961] */ // Shortest string "/pa"
      new Table(28, 7, -1, new short[] {962, -1, -1, -1, -1, -1, 
          963}),
/* NxS[ 962] */ // Shortest string "/pas"
      new Table(28, 1, -1, new short[] {980}),
/* NxS[ 963] */ // Shortest string "/pac"
      new Table(47, 1, -1, new short[] {964}),
/* NxS[ 964] */ // Shortest string "/pack"
      new Table(61, 1, -1, new short[] {965}),
/* NxS[ 965] */ // Shortest string "/pack_"
      new Table(49, 7, -1, new short[] {966, -1, -1, -1, -1, -1, 
          967}),
/* NxS[ 966] */ // Shortest string "/pack_2"
      new Table(35, 5, -1, new short[] {972, -1, -1, -1, 973}),
/* NxS[ 967] */ // Shortest string "/pack_4"
      new Table(37, 3, -1, new short[] {969, -1, 968}),
/* NxS[ 968] */ // Shortest string "/pack_4u"
      new Table(37, 1, -1, new short[] {969}),
/* NxS[ 969] */ // Shortest string "/pack_4b"
      new Table(44, 1, -1, new short[] {970}),
/* NxS[ 970] */ // Shortest string "/satura"
      new Table(33, 1, -1, new short[] {971}),
/* NxS[ 971] */ // Shortest string "/invers"
      new Table(26, 1, -1, new short[] {911}),
/* NxS[ 972] */ // Shortest string "/pack_2h"
      new Table(38, 1, -1, new short[] {978}),
/* NxS[ 973] */ // Shortest string "/pack_2u"
      new Table(28, 1, -1, new short[] {974}),
/* NxS[ 974] */ // Shortest string "/pack_2us"
      new Table(35, 1, -1, new short[] {975}),
/* NxS[ 975] */ // Shortest string "/pack_2ush"
      new Table(25, 1, -1, new short[] {976}),
/* NxS[ 976] */ // Shortest string "/sq"
      new Table(30, 1, -1, new short[] {977}),
/* NxS[ 977] */ // Shortest string "/sqr"
      new Table(33, 1, -1, new short[] {911}),
/* NxS[ 978] */ // Shortest string "/pack_2ha"
      new Table(27, 1, -1, new short[] {979}),
/* NxS[ 979] */ // Shortest string "/isin"
      new Table(29, 1, -1, new short[] {911}),
/* NxS[ 980] */ // Shortest string "/pass"
      new Table(54, 34, -1, new short[] {12, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 11, 11, -1, 11, -1, -1, 11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}),
/* NxS[ 981] */ // Shortest string "/pix"
      new Table(26, 1, -1, new short[] {982}),
/* NxS[ 982] */ // Shortest string "/pixe"
      new Table(27, 1, -1, new short[] {932}),
/* NxS[ 983] */ // Shortest string "/pro"
      new Table(40, 1, -1, new short[] {998}),
/* NxS[ 984] */ // Shortest string "/pre"
      new Table(34, 7, -1, new short[] {988, -1, -1, -1, -1, -1, 
          989}),
/* NxS[ 985] */ // Shortest string "/pra"
      new Table(42, 1, -1, new short[] {986}),
/* NxS[ 986] */ // Shortest string "/prag"
      new Table(43, 1, -1, new short[] {987}),
/* NxS[ 987] */ // Shortest string "/pragm"
      new Table(38, 1, -1, new short[] {901}),
/* NxS[ 988] */ // Shortest string "/prec"
      new Table(31, 1, -1, new short[] {997}),
/* NxS[ 989] */ // Shortest string "/prep"
      new Table(38, 1, -1, new short[] {990}),
/* NxS[ 990] */ // Shortest string "/prepa"
      new Table(28, 1, -1, new short[] {991}),
/* NxS[ 991] */ // Shortest string "/prepas"
      new Table(28, 1, -1, new short[] {992}),
/* NxS[ 992] */ // Shortest string "/prepass"
      new Table(29, 9, -1, new short[] {993, -1, -1, -1, -1, -1, 
          -1, -1, 994}),
/* NxS[ 993] */ // Shortest string "/prepassf"
      new Table(31, 1, -1, new short[] {996}),
/* NxS[ 994] */ // Shortest string "/forwardb"
      new Table(38, 1, -1, new short[] {995}),
/* NxS[ 995] */ // Shortest string "/diffu"
      new Table(28, 1, -1, new short[] {904}),
/* NxS[ 996] */ // Shortest string "/prepassfi"
      new Table(36, 1, -1, new short[] {918}),
/* NxS[ 997] */ // Shortest string "/preci"
      new Table(28, 1, -1, new short[] {957}),
/* NxS[ 998] */ // Shortest string "/prop"
      new Table(26, 1, -1, new short[] {999}),
/* NxS[ 999] */ // Shortest string "/prope"
      new Table(30, 1, -1, new short[] {1000}),
/* NxS[1000] */ // Shortest string "/proper"
      new Table(33, 1, -1, new short[] {1001}),
/* NxS[1001] */ // Shortest string "/propert"
      new Table(31, 1, -1, new short[] {1002}),
/* NxS[1002] */ // Shortest string "/properti"
      new Table(26, 1, -1, new short[] {926}),
/* NxS[1003] */ // Shortest string "/poi"
      new Table(36, 1, -1, new short[] {1004}),
/* NxS[1004] */ // Shortest string "/poin"
      new Table(33, 1, -1, new short[] {1005}),
/* NxS[1005] */ // Shortest string "/point"
      new Table(54, 39, -1, new short[] {10, -1, -1, -1, -1, -1, 
          -1, 1007, -1, -1, 10, 10, -1, 10, -1, -1, 10, 10, 10, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, 
          1006}),
/* NxS[1006] */ // Shortest string "/lines"
      new Table(33, 1, -1, new short[] {1018}),
/* NxS[1007] */ // Shortest string "/point_"
      new Table(34, 3, -1, new short[] {1008, -1, 1009}),
/* NxS[1008] */ // Shortest string "/point_c"
      new Table(25, 1, -1, new short[] {1014}),
/* NxS[1009] */ // Shortest string "/point_n"
      new Table(25, 1, -1, new short[] {1010}),
/* NxS[1010] */ // Shortest string "/point_no"
      new Table(38, 1, -1, new short[] {1011}),
/* NxS[1011] */ // Shortest string "/point_noa"
      new Table(33, 1, -1, new short[] {1012}),
/* NxS[1012] */ // Shortest string "/spo"
      new Table(33, 1, -1, new short[] {1013}),
/* NxS[1013] */ // Shortest string "/spot"
      new Table(54, 34, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 13, 13, -1, 13, -1, -1, 13, 13, 13, 13, 13, 13, 
          13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13}),
/* NxS[1014] */ // Shortest string "/point_co"
      new Table(25, 1, -1, new short[] {1015}),
/* NxS[1015] */ // Shortest string "/point_coo"
      new Table(47, 1, -1, new short[] {1016}),
/* NxS[1016] */ // Shortest string "/point_cook"
      new Table(31, 1, -1, new short[] {1017}),
/* NxS[1017] */ // Shortest string "/point_cooki"
      new Table(26, 1, -1, new short[] {1013}),
/* NxS[1018] */ // Shortest string "/linest"
      new Table(30, 1, -1, new short[] {1019}),
/* NxS[1019] */ // Shortest string "/linestr"
      new Table(26, 1, -1, new short[] {1020}),
/* NxS[1020] */ // Shortest string "/linestre"
      new Table(38, 1, -1, new short[] {1021}),
/* NxS[1021] */ // Shortest string "/linestrea"
      new Table(43, 1, -1, new short[] {916}),
/* NxS[1022] */ // Shortest string "/us"
      new Table(26, 1, -1, new short[] {923}),
/* NxS[1023] */ // Shortest string "/ui"
      new Table(36, 1, -1, new short[] {1298}),
/* NxS[1024] */ // Shortest string "/un"
      new Table(31, 10, -1, new short[] {1025, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1026}),
/* NxS[1025] */ // Shortest string "/uni"
      new Table(29, 5, -1, new short[] {1036, -1, -1, -1, 1037}),
/* NxS[1026] */ // Shortest string "/unp"
      new Table(38, 1, -1, new short[] {1027}),
/* NxS[1027] */ // Shortest string "/unpa"
      new Table(34, 1, -1, new short[] {1028}),
/* NxS[1028] */ // Shortest string "/unpac"
      new Table(47, 1, -1, new short[] {1029}),
/* NxS[1029] */ // Shortest string "/unpack"
      new Table(36, 26, -1, new short[] {1030, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 965}),
/* NxS[1030] */ // Shortest string "/unpackn"
      new Table(25, 1, -1, new short[] {1031}),
/* NxS[1031] */ // Shortest string "/unpackno"
      new Table(30, 1, -1, new short[] {1032}),
/* NxS[1032] */ // Shortest string "/unpacknor"
      new Table(43, 1, -1, new short[] {1033}),
/* NxS[1033] */ // Shortest string "/unpacknorm"
      new Table(38, 1, -1, new short[] {1034}),
/* NxS[1034] */ // Shortest string "/unpacknorma"
      new Table(27, 1, -1, new short[] {1035}),
/* NxS[1035] */ // Shortest string "/unpacknormal"
      new Table(54, 31, -1, new short[] {1035, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 14}),
/* NxS[1036] */ // Shortest string "/unif"
      new Table(25, 1, -1, new short[] {1296}),
/* NxS[1037] */ // Shortest string "/unit"
      new Table(44, 1, -1, new short[] {1038}),
/* NxS[1038] */ // Shortest string "/unity"
      new Table(61, 1, -1, new short[] {1039}),
/* NxS[1039] */ // Shortest string "/unity_"
      new Table(24, 20, -1, new short[] {1040, -1, -1, 1041, 1042, -1, 
          -1, 1043, -1, -1, 1044, 1045, 1046, -1, 1047, 1048, 1049, -1, -1, 1050}),
/* NxS[1040] */ // Shortest string "/unity_d"
      new Table(26, 1, -1, new short[] {1280}),
/* NxS[1041] */ // Shortest string "/unity_l"
      new Table(31, 1, -1, new short[] {1265}),
/* NxS[1042] */ // Shortest string "/unity_s"
      new Table(34, 5, -1, new short[] {1247, -1, -1, -1, 1248}),
/* NxS[1043] */ // Shortest string "/unity_i"
      new Table(36, 1, -1, new short[] {1233}),
/* NxS[1044] */ // Shortest string "/unity_c"
      new Table(25, 14, -1, new short[] {1195, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1196}),
/* NxS[1045] */ // Shortest string "/unity_h"
      new Table(38, 1, -1, new short[] {1181}),
/* NxS[1046] */ // Shortest string "/unity_n"
      new Table(26, 1, -1, new short[] {1169}),
/* NxS[1047] */ // Shortest string "/unity_a"
      new Table(33, 1, -1, new short[] {1159}),
/* NxS[1048] */ // Shortest string "/unity_u"
      new Table(41, 1, -1, new short[] {1145}),
/* NxS[1049] */ // Shortest string "/unity_p"
      new Table(30, 9, -1, new short[] {1095, -1, -1, -1, -1, -1, 
          -1, -1, 1096}),
/* NxS[1050] */ // Shortest string "/unity_m"
      new Table(31, 8, -1, new short[] {1051, -1, -1, -1, -1, -1, 
          -1, 1052}),
/* NxS[1051] */ // Shortest string "/unity_mi"
      new Table(42, 1, -1, new short[] {1071}),
/* NxS[1052] */ // Shortest string "/unity_ma"
      new Table(33, 1, -1, new short[] {1053}),
/* NxS[1053] */ // Shortest string "/unity_mat"
      new Table(30, 1, -1, new short[] {1054}),
/* NxS[1054] */ // Shortest string "/unity_matr"
      new Table(31, 1, -1, new short[] {1055}),
/* NxS[1055] */ // Shortest string "/unity_matri"
      new Table(45, 1, -1, new short[] {1056}),
/* NxS[1056] */ // Shortest string "/unity_matrix"
      new Table(61, 1, -1, new short[] {1057}),
/* NxS[1057] */ // Shortest string "/unity_matrix_"
      new Table(31, 13, -1, new short[] {1058, -1, 1059, -1, -1, -1, 
          -1, -1, -1, 793, 1061, -1, 1060}),
/* NxS[1058] */ // Shortest string "/unity_matrix_i"
      new Table(33, 1, -1, new short[] {1070}),
/* NxS[1059] */ // Shortest string "/unity_matrix_t"
      new Table(61, 30, -1, new short[] {1063, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1062}),
/* NxS[1060] */ // Shortest string "/unity_matrix_m"
      new Table(41, 1, -1, new short[] {1061}),
/* NxS[1061] */ // Shortest string "/unity_matrix_v"
      new Table(24, 46, 5, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 793, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 5, 5, -1, 5, -1, -1}),
/* NxS[1062] */ // Shortest string "/unity_matrix_te"
      new Table(45, 1, -1, new short[] {1065}),
/* NxS[1063] */ // Shortest string "/unity_matrix_t_"
      new Table(43, 1, -1, new short[] {1064}),
/* NxS[1064] */ // Shortest string "/unity_matrix_t_m"
      new Table(41, 1, -1, new short[] {793}),
/* NxS[1065] */ // Shortest string "/unity_matrix_tex"
      new Table(33, 1, -1, new short[] {1066}),
/* NxS[1066] */ // Shortest string "/unity_matrix_text"
      new Table(39, 1, -1, new short[] {1067}),
/* NxS[1067] */ // Shortest string "/unity_matrix_textu"
      new Table(30, 1, -1, new short[] {1068}),
/* NxS[1068] */ // Shortest string "/unity_matrix_textur"
      new Table(26, 1, -1, new short[] {1069}),
/* NxS[1069] */ // Shortest string "/unity_matrix_texture"
      new Table(48, 5, -1, new short[] {793, 793, 793, -1, 793}),
/* NxS[1070] */ // Shortest string "/unity_matrix_it"
      new Table(61, 1, -1, new short[] {1063}),
/* NxS[1071] */ // Shortest string "/unity_mig"
      new Table(35, 1, -1, new short[] {1072}),
/* NxS[1072] */ // Shortest string "/unity_migh"
      new Table(33, 1, -1, new short[] {1073}),
/* NxS[1073] */ // Shortest string "/unity_might"
      new Table(61, 1, -1, new short[] {1074}),
/* NxS[1074] */ // Shortest string "/unity_might_"
      new Table(36, 1, -1, new short[] {1075}),
/* NxS[1075] */ // Shortest string "/unity_might_n"
      new Table(25, 1, -1, new short[] {1076}),
/* NxS[1076] */ // Shortest string "/unity_might_no"
      new Table(33, 1, -1, new short[] {1077}),
/* NxS[1077] */ // Shortest string "/unity_might_not"
      new Table(61, 1, -1, new short[] {1078}),
/* NxS[1078] */ // Shortest string "/unity_might_not_"
      new Table(35, 1, -1, new short[] {1079}),
/* NxS[1079] */ // Shortest string "/unity_might_not_h"
      new Table(38, 1, -1, new short[] {1080}),
/* NxS[1080] */ // Shortest string "/unity_might_not_ha"
      new Table(41, 1, -1, new short[] {1081}),
/* NxS[1081] */ // Shortest string "/unity_might_not_hav"
      new Table(26, 1, -1, new short[] {1082}),
/* NxS[1082] */ // Shortest string "/unity_might_not_have"
      new Table(61, 1, -1, new short[] {1083}),
/* NxS[1083] */ // Shortest string "/unity_might_not_have_"
      new Table(24, 1, -1, new short[] {1084}),
/* NxS[1084] */ // Shortest string "/unity_might_not_have_d"
      new Table(26, 1, -1, new short[] {1085}),
/* NxS[1085] */ // Shortest string "/unity_might_not_have_de"
      new Table(40, 1, -1, new short[] {1086}),
/* NxS[1086] */ // Shortest string "/unity_might_not_have_dep"
      new Table(33, 1, -1, new short[] {1087}),
/* NxS[1087] */ // Shortest string "/unity_might_not_have_dept"
      new Table(35, 1, -1, new short[] {1088}),
/* NxS[1088] */ // Shortest string "/unity_might_not_have_depth"
      new Table(61, 1, -1, new short[] {1089}),
/* NxS[1089] */ // Shortest string "/unity_might_not_have_depth_"
      new Table(33, 1, -1, new short[] {1090}),
/* NxS[1090] */ // Shortest string "/unity_might_not_have_depth_t"
      new Table(26, 1, -1, new short[] {1091}),
/* NxS[1091] */ // Shortest string "/unity_might_not_have_depth_te"
      new Table(45, 1, -1, new short[] {1092}),
/* NxS[1092] */ // Shortest string "/unity_might_not_have_depth_tex"
      new Table(33, 1, -1, new short[] {1093}),
/* NxS[1093] */ // Shortest string "/unity_might_not_have_depth_text"
      new Table(39, 1, -1, new short[] {1094}),
/* NxS[1094] */ // Shortest string "/unity_might_not_have_depth_textu"
      new Table(30, 1, -1, new short[] {1017}),
/* NxS[1095] */ // Shortest string "/unity_pr"
      new Table(25, 1, -1, new short[] {1139}),
/* NxS[1096] */ // Shortest string "/unity_pa"
      new Table(28, 1, -1, new short[] {1097}),
/* NxS[1097] */ // Shortest string "/unity_pas"
      new Table(28, 1, -1, new short[] {1098}),
/* NxS[1098] */ // Shortest string "/unity_pass"
      new Table(61, 1, -1, new short[] {1099}),
/* NxS[1099] */ // Shortest string "/unity_pass_"
      new Table(28, 13, -1, new short[] {1100, 1101, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1102}),
/* NxS[1100] */ // Shortest string "/unity_pass_s"
      new Table(35, 1, -1, new short[] {1123}),
/* NxS[1101] */ // Shortest string "/unity_pass_f"
      new Table(25, 1, -1, new short[] {1115}),
/* NxS[1102] */ // Shortest string "/unity_pass_p"
      new Table(30, 1, -1, new short[] {1103}),
/* NxS[1103] */ // Shortest string "/unity_pass_pr"
      new Table(26, 1, -1, new short[] {1104}),
/* NxS[1104] */ // Shortest string "/unity_pass_pre"
      new Table(40, 1, -1, new short[] {1105}),
/* NxS[1105] */ // Shortest string "/unity_pass_prep"
      new Table(38, 1, -1, new short[] {1106}),
/* NxS[1106] */ // Shortest string "/unity_pass_prepa"
      new Table(28, 1, -1, new short[] {1107}),
/* NxS[1107] */ // Shortest string "/unity_pass_prepas"
      new Table(28, 1, -1, new short[] {1108}),
/* NxS[1108] */ // Shortest string "/unity_pass_prepass"
      new Table(29, 9, -1, new short[] {1109, -1, -1, -1, -1, -1, 
          -1, -1, 1110}),
/* NxS[1109] */ // Shortest string "/unity_pass_prepassf"
      new Table(31, 1, -1, new short[] {1112}),
/* NxS[1110] */ // Shortest string "/unity_pass_forwardb"
      new Table(38, 1, -1, new short[] {1111}),
/* NxS[1111] */ // Shortest string "/unity_pass_forwardba"
      new Table(28, 1, -1, new short[] {1017}),
/* NxS[1112] */ // Shortest string "/unity_pass_prepassfi"
      new Table(36, 1, -1, new short[] {1113}),
/* NxS[1113] */ // Shortest string "/unity_pass_prepassfin"
      new Table(38, 1, -1, new short[] {1114}),
/* NxS[1114] */ // Shortest string "/shader_api_openg"
      new Table(27, 1, -1, new short[] {1013}),
/* NxS[1115] */ // Shortest string "/unity_pass_fo"
      new Table(30, 1, -1, new short[] {1116}),
/* NxS[1116] */ // Shortest string "/unity_pass_for"
      new Table(32, 1, -1, new short[] {1117}),
/* NxS[1117] */ // Shortest string "/unity_pass_forw"
      new Table(38, 1, -1, new short[] {1118}),
/* NxS[1118] */ // Shortest string "/unity_pass_forwa"
      new Table(30, 1, -1, new short[] {1119}),
/* NxS[1119] */ // Shortest string "/unity_pass_forwar"
      new Table(24, 1, -1, new short[] {1120}),
/* NxS[1120] */ // Shortest string "/unity_pass_forward"
      new Table(37, 2, -1, new short[] {1110, 1121}),
/* NxS[1121] */ // Shortest string "/unity_pass_forwarda"
      new Table(24, 1, -1, new short[] {1122}),
/* NxS[1122] */ // Shortest string "/cbuffer_en"
      new Table(24, 1, -1, new short[] {1013}),
/* NxS[1123] */ // Shortest string "/unity_pass_sh"
      new Table(38, 1, -1, new short[] {1124}),
/* NxS[1124] */ // Shortest string "/unity_pass_sha"
      new Table(24, 1, -1, new short[] {1125}),
/* NxS[1125] */ // Shortest string "/unity_pass_shad"
      new Table(25, 1, -1, new short[] {1126}),
/* NxS[1126] */ // Shortest string "/unity_pass_shado"
      new Table(32, 1, -1, new short[] {1127}),
/* NxS[1127] */ // Shortest string "/unity_pass_shadow"
      new Table(34, 1, -1, new short[] {1128}),
/* NxS[1128] */ // Shortest string "/unity_pass_shadowc"
      new Table(25, 14, -1, new short[] {1129, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1130}),
/* NxS[1129] */ // Shortest string "/unity_pass_shadowco"
      new Table(27, 1, -1, new short[] {1134}),
/* NxS[1130] */ // Shortest string "/unity_pass_shadowca"
      new Table(28, 1, -1, new short[] {1131}),
/* NxS[1131] */ // Shortest string "/unity_pass_shadowcas"
      new Table(33, 1, -1, new short[] {1132}),
/* NxS[1132] */ // Shortest string "/unity_pass_shadowcast"
      new Table(26, 1, -1, new short[] {1133}),
/* NxS[1133] */ // Shortest string "/unity_pass_shadowcaste"
      new Table(30, 1, -1, new short[] {1013}),
/* NxS[1134] */ // Shortest string "/unity_pass_shadowcol"
      new Table(27, 1, -1, new short[] {1135}),
/* NxS[1135] */ // Shortest string "/unity_pass_shadowcoll"
      new Table(26, 1, -1, new short[] {1136}),
/* NxS[1136] */ // Shortest string "/unity_pass_shadowcolle"
      new Table(34, 1, -1, new short[] {1137}),
/* NxS[1137] */ // Shortest string "/unity_pass_shadowcollec"
      new Table(33, 1, -1, new short[] {1138}),
/* NxS[1138] */ // Shortest string "/unity_pass_shadowcollect"
      new Table(25, 1, -1, new short[] {1133}),
/* NxS[1139] */ // Shortest string "/unity_pro"
      new Table(63, 1, -1, new short[] {1140}),
/* NxS[1140] */ // Shortest string "/unity_proj"
      new Table(61, 1, -1, new short[] {1141}),
/* NxS[1141] */ // Shortest string "/unity_proj_"
      new Table(34, 1, -1, new short[] {1142}),
/* NxS[1142] */ // Shortest string "/unity_proj_c"
      new Table(25, 1, -1, new short[] {1143}),
/* NxS[1143] */ // Shortest string "/unity_proj_co"
      new Table(25, 1, -1, new short[] {1144}),
/* NxS[1144] */ // Shortest string "/unity_proj_coo"
      new Table(30, 1, -1, new short[] {1122}),
/* NxS[1145] */ // Shortest string "/unity_uv"
      new Table(61, 1, -1, new short[] {1146}),
/* NxS[1146] */ // Shortest string "/unity_uv_"
      new Table(28, 1, -1, new short[] {1147}),
/* NxS[1147] */ // Shortest string "/unity_uv_s"
      new Table(33, 1, -1, new short[] {1148}),
/* NxS[1148] */ // Shortest string "/unity_uv_st"
      new Table(38, 1, -1, new short[] {1149}),
/* NxS[1149] */ // Shortest string "/unity_uv_sta"
      new Table(30, 1, -1, new short[] {1150}),
/* NxS[1150] */ // Shortest string "/unity_uv_star"
      new Table(33, 1, -1, new short[] {1151}),
/* NxS[1151] */ // Shortest string "/unity_uv_start"
      new Table(28, 1, -1, new short[] {1152}),
/* NxS[1152] */ // Shortest string "/unity_uv_starts"
      new Table(61, 1, -1, new short[] {1153}),
/* NxS[1153] */ // Shortest string "/unity_uv_starts_"
      new Table(38, 1, -1, new short[] {1154}),
/* NxS[1154] */ // Shortest string "/unity_uv_starts_a"
      new Table(33, 1, -1, new short[] {1155}),
/* NxS[1155] */ // Shortest string "/unity_uv_starts_at"
      new Table(61, 1, -1, new short[] {1156}),
/* NxS[1156] */ // Shortest string "/unity_uv_starts_at_"
      new Table(33, 1, -1, new short[] {1157}),
/* NxS[1157] */ // Shortest string "/unity_uv_starts_at_t"
      new Table(25, 1, -1, new short[] {1158}),
/* NxS[1158] */ // Shortest string "/unity_uv_starts_at_to"
      new Table(40, 1, -1, new short[] {1013}),
/* NxS[1159] */ // Shortest string "/unity_at"
      new Table(33, 1, -1, new short[] {1160}),
/* NxS[1160] */ // Shortest string "/unity_att"
      new Table(26, 1, -1, new short[] {1161}),
/* NxS[1161] */ // Shortest string "/unity_atte"
      new Table(36, 1, -1, new short[] {1162}),
/* NxS[1162] */ // Shortest string "/unity_atten"
      new Table(61, 1, -1, new short[] {1163}),
/* NxS[1163] */ // Shortest string "/unity_atten_"
      new Table(34, 1, -1, new short[] {1164}),
/* NxS[1164] */ // Shortest string "/unity_atten_c"
      new Table(35, 1, -1, new short[] {1165}),
/* NxS[1165] */ // Shortest string "/unity_atten_ch"
      new Table(38, 1, -1, new short[] {1166}),
/* NxS[1166] */ // Shortest string "/unity_atten_cha"
      new Table(36, 1, -1, new short[] {1167}),
/* NxS[1167] */ // Shortest string "/unity_atten_chan"
      new Table(36, 1, -1, new short[] {1168}),
/* NxS[1168] */ // Shortest string "/unity_atten_chann"
      new Table(26, 1, -1, new short[] {1114}),
/* NxS[1169] */ // Shortest string "/unity_ne"
      new Table(38, 1, -1, new short[] {1170}),
/* NxS[1170] */ // Shortest string "/unity_nea"
      new Table(30, 1, -1, new short[] {1171}),
/* NxS[1171] */ // Shortest string "/unity_near"
      new Table(61, 1, -1, new short[] {1172}),
/* NxS[1172] */ // Shortest string "/unity_near_"
      new Table(34, 1, -1, new short[] {1173}),
/* NxS[1173] */ // Shortest string "/unity_near_c"
      new Table(27, 1, -1, new short[] {1174}),
/* NxS[1174] */ // Shortest string "/unity_near_cl"
      new Table(31, 1, -1, new short[] {1175}),
/* NxS[1175] */ // Shortest string "/unity_near_cli"
      new Table(40, 1, -1, new short[] {1176}),
/* NxS[1176] */ // Shortest string "/unity_near_clip"
      new Table(61, 1, -1, new short[] {1177}),
/* NxS[1177] */ // Shortest string "/unity_near_clip_"
      new Table(41, 1, -1, new short[] {1178}),
/* NxS[1178] */ // Shortest string "/unity_near_clip_v"
      new Table(38, 1, -1, new short[] {1179}),
/* NxS[1179] */ // Shortest string "/unity_near_clip_va"
      new Table(27, 1, -1, new short[] {1180}),
/* NxS[1180] */ // Shortest string "/unity_near_clip_val"
      new Table(39, 1, -1, new short[] {1017}),
/* NxS[1181] */ // Shortest string "/unity_ha"
      new Table(27, 1, -1, new short[] {1182}),
/* NxS[1182] */ // Shortest string "/unity_hal"
      new Table(29, 1, -1, new short[] {1183}),
/* NxS[1183] */ // Shortest string "/unity_half"
      new Table(61, 1, -1, new short[] {1184}),
/* NxS[1184] */ // Shortest string "/unity_half_"
      new Table(33, 1, -1, new short[] {1185}),
/* NxS[1185] */ // Shortest string "/unity_half_t"
      new Table(26, 1, -1, new short[] {1186}),
/* NxS[1186] */ // Shortest string "/unity_half_te"
      new Table(45, 1, -1, new short[] {1187}),
/* NxS[1187] */ // Shortest string "/unity_half_tex"
      new Table(26, 1, -1, new short[] {1188}),
/* NxS[1188] */ // Shortest string "/unity_half_texe"
      new Table(27, 1, -1, new short[] {1189}),
/* NxS[1189] */ // Shortest string "/unity_half_texel"
      new Table(61, 1, -1, new short[] {1190}),
/* NxS[1190] */ // Shortest string "/unity_half_texel_"
      new Table(25, 1, -1, new short[] {1191}),
/* NxS[1191] */ // Shortest string "/unity_half_texel_o"
      new Table(29, 1, -1, new short[] {1192}),
/* NxS[1192] */ // Shortest string "/unity_half_texel_of"
      new Table(29, 1, -1, new short[] {1193}),
/* NxS[1193] */ // Shortest string "/unity_half_texel_off"
      new Table(28, 1, -1, new short[] {1194}),
/* NxS[1194] */ // Shortest string "/unity_half_texel_offs"
      new Table(26, 1, -1, new short[] {1012}),
/* NxS[1195] */ // Shortest string "/unity_co"
      new Table(43, 1, -1, new short[] {1218}),
/* NxS[1196] */ // Shortest string "/unity_ca"
      new Table(36, 1, -1, new short[] {1197}),
/* NxS[1197] */ // Shortest string "/unity_can"
      new Table(61, 1, -1, new short[] {1198}),
/* NxS[1198] */ // Shortest string "/unity_can_"
      new Table(34, 1, -1, new short[] {1199}),
/* NxS[1199] */ // Shortest string "/unity_can_c"
      new Table(25, 1, -1, new short[] {1200}),
/* NxS[1200] */ // Shortest string "/unity_can_co"
      new Table(43, 1, -1, new short[] {1201}),
/* NxS[1201] */ // Shortest string "/unity_can_com"
      new Table(40, 1, -1, new short[] {1202}),
/* NxS[1202] */ // Shortest string "/unity_can_comp"
      new Table(31, 1, -1, new short[] {1203}),
/* NxS[1203] */ // Shortest string "/unity_can_compi"
      new Table(27, 1, -1, new short[] {1204}),
/* NxS[1204] */ // Shortest string "/unity_can_compil"
      new Table(26, 1, -1, new short[] {1205}),
/* NxS[1205] */ // Shortest string "/unity_can_compile"
      new Table(61, 1, -1, new short[] {1206}),
/* NxS[1206] */ // Shortest string "/unity_can_compile_"
      new Table(33, 1, -1, new short[] {1207}),
/* NxS[1207] */ // Shortest string "/unity_can_compile_t"
      new Table(26, 1, -1, new short[] {1208}),
/* NxS[1208] */ // Shortest string "/unity_can_compile_te"
      new Table(28, 1, -1, new short[] {1209}),
/* NxS[1209] */ // Shortest string "/unity_can_compile_tes"
      new Table(28, 1, -1, new short[] {1210}),
/* NxS[1210] */ // Shortest string "/unity_can_compile_tess"
      new Table(26, 1, -1, new short[] {1211}),
/* NxS[1211] */ // Shortest string "/unity_can_compile_tesse"
      new Table(27, 1, -1, new short[] {1212}),
/* NxS[1212] */ // Shortest string "/unity_can_compile_tessel"
      new Table(27, 1, -1, new short[] {1213}),
/* NxS[1213] */ // Shortest string "/unity_can_compile_tessell"
      new Table(38, 1, -1, new short[] {1214}),
/* NxS[1214] */ // Shortest string "/unity_can_compile_tessella"
      new Table(33, 1, -1, new short[] {1215}),
/* NxS[1215] */ // Shortest string "/unity_can_compile_tessellat"
      new Table(31, 1, -1, new short[] {1216}),
/* NxS[1216] */ // Shortest string "/unity_can_compile_tessellati"
      new Table(25, 1, -1, new short[] {1217}),
/* NxS[1217] */ // Shortest string "/unity_can_compile_tessellatio"
      new Table(36, 1, -1, new short[] {1013}),
/* NxS[1218] */ // Shortest string "/unity_com"
      new Table(40, 1, -1, new short[] {1219}),
/* NxS[1219] */ // Shortest string "/unity_comp"
      new Table(31, 1, -1, new short[] {1220}),
/* NxS[1220] */ // Shortest string "/unity_compi"
      new Table(27, 1, -1, new short[] {1221}),
/* NxS[1221] */ // Shortest string "/unity_compil"
      new Table(26, 1, -1, new short[] {1222}),
/* NxS[1222] */ // Shortest string "/unity_compile"
      new Table(30, 1, -1, new short[] {1223}),
/* NxS[1223] */ // Shortest string "/unity_compiler"
      new Table(61, 1, -1, new short[] {1224}),
/* NxS[1224] */ // Shortest string "/unity_compiler_"
      new Table(34, 2, -1, new short[] {1225, 1226}),
/* NxS[1225] */ // Shortest string "/unity_compiler_c"
      new Table(42, 1, -1, new short[] {1013}),
/* NxS[1226] */ // Shortest string "/unity_compiler_h"
      new Table(27, 1, -1, new short[] {1227}),
/* NxS[1227] */ // Shortest string "/unity_compiler_hl"
      new Table(28, 1, -1, new short[] {1228}),
/* NxS[1228] */ // Shortest string "/unity_compiler_hls"
      new Table(27, 1, -1, new short[] {1229}),
/* NxS[1229] */ // Shortest string "/unity_compiler_hlsl"
      new Table(49, 39, -1, new short[] {1230, -1, -1, -1, -1, 13, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 13, -1, 13, -1, -1, 13, 
          13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
          13}),
/* NxS[1230] */ // Shortest string "/unity_compiler_hlsl2"
      new Table(42, 1, -1, new short[] {1231}),
/* NxS[1231] */ // Shortest string "/unity_compiler_hlsl2g"
      new Table(27, 1, -1, new short[] {1232}),
/* NxS[1232] */ // Shortest string "/unity_compiler_hlsl2gl"
      new Table(28, 1, -1, new short[] {1114}),
/* NxS[1233] */ // Shortest string "/unity_in"
      new Table(31, 1, -1, new short[] {1234}),
/* NxS[1234] */ // Shortest string "/unity_ini"
      new Table(33, 1, -1, new short[] {1235}),
/* NxS[1235] */ // Shortest string "/unity_init"
      new Table(31, 1, -1, new short[] {1236}),
/* NxS[1236] */ // Shortest string "/unity_initi"
      new Table(38, 1, -1, new short[] {1237}),
/* NxS[1237] */ // Shortest string "/unity_initia"
      new Table(27, 1, -1, new short[] {1238}),
/* NxS[1238] */ // Shortest string "/unity_initial"
      new Table(31, 1, -1, new short[] {1239}),
/* NxS[1239] */ // Shortest string "/unity_initiali"
      new Table(46, 1, -1, new short[] {1240}),
/* NxS[1240] */ // Shortest string "/unity_initializ"
      new Table(26, 1, -1, new short[] {1241}),
/* NxS[1241] */ // Shortest string "/unity_initialize"
      new Table(61, 1, -1, new short[] {1242}),
/* NxS[1242] */ // Shortest string "/unity_initialize_"
      new Table(25, 1, -1, new short[] {1243}),
/* NxS[1243] */ // Shortest string "/unity_initialize_o"
      new Table(39, 1, -1, new short[] {1244}),
/* NxS[1244] */ // Shortest string "/unity_initialize_ou"
      new Table(33, 1, -1, new short[] {1245}),
/* NxS[1245] */ // Shortest string "/unity_initialize_out"
      new Table(40, 1, -1, new short[] {1246}),
/* NxS[1246] */ // Shortest string "/unity_initialize_outp"
      new Table(39, 1, -1, new short[] {1012}),
/* NxS[1247] */ // Shortest string "/unity_sc"
      new Table(38, 1, -1, new short[] {1264}),
/* NxS[1248] */ // Shortest string "/unity_sa"
      new Table(43, 1, -1, new short[] {1249}),
/* NxS[1249] */ // Shortest string "/unity_sam"
      new Table(40, 1, -1, new short[] {1250}),
/* NxS[1250] */ // Shortest string "/unity_samp"
      new Table(27, 1, -1, new short[] {1251}),
/* NxS[1251] */ // Shortest string "/unity_sampl"
      new Table(26, 1, -1, new short[] {1252}),
/* NxS[1252] */ // Shortest string "/unity_sample"
      new Table(61, 1, -1, new short[] {1253}),
/* NxS[1253] */ // Shortest string "/unity_sample_"
      new Table(28, 1, -1, new short[] {1254}),
/* NxS[1254] */ // Shortest string "/unity_sample_s"
      new Table(35, 1, -1, new short[] {1255}),
/* NxS[1255] */ // Shortest string "/unity_sample_sh"
      new Table(38, 1, -1, new short[] {1256}),
/* NxS[1256] */ // Shortest string "/unity_sample_sha"
      new Table(24, 1, -1, new short[] {1257}),
/* NxS[1257] */ // Shortest string "/unity_sample_shad"
      new Table(25, 1, -1, new short[] {1258}),
/* NxS[1258] */ // Shortest string "/unity_sample_shado"
      new Table(32, 1, -1, new short[] {1259}),
/* NxS[1259] */ // Shortest string "/unity_sample_shadow"
      new Table(54, 34, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, 1260, -1, -1, 13, 13, -1, 13, -1, -1, 13, 13, 13, 13, 13, 13, 
          13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13}),
/* NxS[1260] */ // Shortest string "/unity_sample_shadow_"
      new Table(40, 1, -1, new short[] {1261}),
/* NxS[1261] */ // Shortest string "/unity_sample_shadow_p"
      new Table(30, 1, -1, new short[] {1262}),
/* NxS[1262] */ // Shortest string "/unity_sample_shadow_pr"
      new Table(25, 1, -1, new short[] {1263}),
/* NxS[1263] */ // Shortest string "/unity_sample_shadow_pro"
      new Table(63, 1, -1, new short[] {1013}),
/* NxS[1264] */ // Shortest string "/unity_sca"
      new Table(27, 1, -1, new short[] {812}),
/* NxS[1265] */ // Shortest string "/unity_li"
      new Table(42, 1, -1, new short[] {1266}),
/* NxS[1266] */ // Shortest string "/unity_lig"
      new Table(35, 1, -1, new short[] {1267}),
/* NxS[1267] */ // Shortest string "/unity_ligh"
      new Table(33, 1, -1, new short[] {1268}),
/* NxS[1268] */ // Shortest string "/unity_light"
      new Table(43, 1, -1, new short[] {1269}),
/* NxS[1269] */ // Shortest string "/unity_lightm"
      new Table(25, 1, -1, new short[] {1270}),
/* NxS[1270] */ // Shortest string "/unity_lightmo"
      new Table(24, 1, -1, new short[] {1271}),
/* NxS[1271] */ // Shortest string "/unity_lightmod"
      new Table(26, 1, -1, new short[] {1272}),
/* NxS[1272] */ // Shortest string "/unity_lightmode"
      new Table(27, 1, -1, new short[] {1273}),
/* NxS[1273] */ // Shortest string "/unity_lightmodel"
      new Table(61, 1, -1, new short[] {1274}),
/* NxS[1274] */ // Shortest string "/unity_lightmodel_"
      new Table(38, 1, -1, new short[] {1275}),
/* NxS[1275] */ // Shortest string "/unity_lightmodel_a"
      new Table(43, 1, -1, new short[] {1276}),
/* NxS[1276] */ // Shortest string "/unity_lightmodel_am"
      new Table(37, 1, -1, new short[] {1277}),
/* NxS[1277] */ // Shortest string "/unity_lightmodel_amb"
      new Table(31, 1, -1, new short[] {1278}),
/* NxS[1278] */ // Shortest string "/unity_lightmodel_ambi"
      new Table(26, 1, -1, new short[] {1279}),
/* NxS[1279] */ // Shortest string "/unity_lightmodel_ambie"
      new Table(36, 1, -1, new short[] {823}),
/* NxS[1280] */ // Shortest string "/unity_de"
      new Table(27, 8, -1, new short[] {1281, -1, -1, -1, -1, -1, 
          -1, 1282}),
/* NxS[1281] */ // Shortest string "/unity_del"
      new Table(33, 1, -1, new short[] {1295}),
/* NxS[1282] */ // Shortest string "/unity_dec"
      new Table(27, 1, -1, new short[] {1283}),
/* NxS[1283] */ // Shortest string "/unity_decl"
      new Table(38, 1, -1, new short[] {1284}),
/* NxS[1284] */ // Shortest string "/unity_decla"
      new Table(30, 1, -1, new short[] {1285}),
/* NxS[1285] */ // Shortest string "/unity_declar"
      new Table(26, 1, -1, new short[] {1286}),
/* NxS[1286] */ // Shortest string "/unity_declare"
      new Table(61, 1, -1, new short[] {1287}),
/* NxS[1287] */ // Shortest string "/unity_declare_"
      new Table(28, 1, -1, new short[] {1288}),
/* NxS[1288] */ // Shortest string "/unity_declare_s"
      new Table(35, 1, -1, new short[] {1289}),
/* NxS[1289] */ // Shortest string "/unity_declare_sh"
      new Table(38, 1, -1, new short[] {1290}),
/* NxS[1290] */ // Shortest string "/unity_declare_sha"
      new Table(24, 1, -1, new short[] {1291}),
/* NxS[1291] */ // Shortest string "/unity_declare_shad"
      new Table(25, 1, -1, new short[] {1292}),
/* NxS[1292] */ // Shortest string "/unity_declare_shado"
      new Table(32, 1, -1, new short[] {1293}),
/* NxS[1293] */ // Shortest string "/unity_declare_shadow"
      new Table(43, 1, -1, new short[] {1294}),
/* NxS[1294] */ // Shortest string "/unity_declare_shadowm"
      new Table(38, 1, -1, new short[] {1158}),
/* NxS[1295] */ // Shortest string "/unity_delt"
      new Table(38, 1, -1, new short[] {809}),
/* NxS[1296] */ // Shortest string "/unifo"
      new Table(30, 1, -1, new short[] {1297}),
/* NxS[1297] */ // Shortest string "/unifor"
      new Table(43, 1, -1, new short[] {938}),
/* NxS[1298] */ // Shortest string "/uin"
      new Table(33, 1, -1, new short[] {1299}),
/* NxS[1299] */ // Shortest string "/half"
      new Table(49, 39, -1, new short[] {916, 916, -1, -1, -1, 10, 
          916, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, -1, 10, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          10}),
/* NxS[1300] */ // Shortest string "/al"
      new Table(27, 14, -1, new short[] {911, -1, -1, -1, -1, 1347, 
          -1, -1, -1, -1, -1, -1, -1, 1348}),
/* NxS[1301] */ // Shortest string "/as"
      new Table(31, 1, -1, new short[] {908}),
/* NxS[1302] */ // Shortest string "/at"
      new Table(38, 1, -1, new short[] {1345}),
/* NxS[1303] */ // Shortest string "/ac"
      new Table(25, 1, -1, new short[] {1305}),
/* NxS[1304] */ // Shortest string "/an"
      new Table(44, 1, -1, new short[] {911}),
/* NxS[1305] */ // Shortest string "/ab"
      new Table(28, 1, -1, new short[] {911}),
/* NxS[1306] */ // Shortest string "/ap"
      new Table(40, 1, -1, new short[] {1311}),
/* NxS[1307] */ // Shortest string "/am"
      new Table(37, 1, -1, new short[] {1308}),
/* NxS[1308] */ // Shortest string "/amb"
      new Table(31, 1, -1, new short[] {1309}),
/* NxS[1309] */ // Shortest string "/ambi"
      new Table(26, 1, -1, new short[] {1310}),
/* NxS[1310] */ // Shortest string "/ambie"
      new Table(36, 1, -1, new short[] {900}),
/* NxS[1311] */ // Shortest string "/app"
      new Table(24, 3, -1, new short[] {1312, -1, 1313}),
/* NxS[1312] */ // Shortest string "/appd"
      new Table(38, 1, -1, new short[] {1331}),
/* NxS[1313] */ // Shortest string "/appe"
      new Table(36, 1, -1, new short[] {1314}),
/* NxS[1314] */ // Shortest string "/appen"
      new Table(24, 1, -1, new short[] {1315}),
/* NxS[1315] */ // Shortest string "/append"
      new Table(28, 1, -1, new short[] {1316}),
/* NxS[1316] */ // Shortest string "/rws"
      new Table(33, 1, -1, new short[] {1317}),
/* NxS[1317] */ // Shortest string "/rwst"
      new Table(30, 1, -1, new short[] {1318}),
/* NxS[1318] */ // Shortest string "/rwstr"
      new Table(39, 1, -1, new short[] {1319}),
/* NxS[1319] */ // Shortest string "/rwstru"
      new Table(34, 1, -1, new short[] {1320}),
/* NxS[1320] */ // Shortest string "/rwstruc"
      new Table(33, 1, -1, new short[] {1321}),
/* NxS[1321] */ // Shortest string "/rwstruct"
      new Table(39, 1, -1, new short[] {1322}),
/* NxS[1322] */ // Shortest string "/structu"
      new Table(30, 1, -1, new short[] {1323}),
/* NxS[1323] */ // Shortest string "/structur"
      new Table(26, 1, -1, new short[] {1324}),
/* NxS[1324] */ // Shortest string "/structure"
      new Table(24, 1, -1, new short[] {1325}),
/* NxS[1325] */ // Shortest string "/structured"
      new Table(37, 1, -1, new short[] {1326}),
/* NxS[1326] */ // Shortest string "/structuredb"
      new Table(39, 1, -1, new short[] {1327}),
/* NxS[1327] */ // Shortest string "/rwbu"
      new Table(29, 1, -1, new short[] {1328}),
/* NxS[1328] */ // Shortest string "/rwbuf"
      new Table(29, 1, -1, new short[] {1329}),
/* NxS[1329] */ // Shortest string "/rwbuff"
      new Table(26, 1, -1, new short[] {1330}),
/* NxS[1330] */ // Shortest string "/vecto"
      new Table(30, 1, -1, new short[] {916}),
/* NxS[1331] */ // Shortest string "/appda"
      new Table(33, 1, -1, new short[] {1332}),
/* NxS[1332] */ // Shortest string "/appdat"
      new Table(38, 1, -1, new short[] {1333}),
/* NxS[1333] */ // Shortest string "/appdata"
      new Table(61, 1, -1, new short[] {1334}),
/* NxS[1334] */ // Shortest string "/appdata_"
      new Table(29, 9, -1, new short[] {1335, -1, 1336, -1, 1337, -1, 
          -1, -1, 1338}),
/* NxS[1335] */ // Shortest string "/appdata_f"
      new Table(39, 1, -1, new short[] {1343}),
/* NxS[1336] */ // Shortest string "/appdata_i"
      new Table(43, 1, -1, new short[] {1342}),
/* NxS[1337] */ // Shortest string "/appdata_t"
      new Table(38, 1, -1, new short[] {1341}),
/* NxS[1338] */ // Shortest string "/appdata_b"
      new Table(38, 1, -1, new short[] {1339}),
/* NxS[1339] */ // Shortest string "/appdata_ba"
      new Table(28, 1, -1, new short[] {1340}),
/* NxS[1340] */ // Shortest string "/rang"
      new Table(26, 1, -1, new short[] {895}),
/* NxS[1341] */ // Shortest string "/appdata_ta"
      new Table(36, 1, -1, new short[] {895}),
/* NxS[1342] */ // Shortest string "/appdata_im"
      new Table(42, 1, -1, new short[] {895}),
/* NxS[1343] */ // Shortest string "/appdata_fu"
      new Table(27, 1, -1, new short[] {1344}),
/* NxS[1344] */ // Shortest string "/appdata_ful"
      new Table(27, 1, -1, new short[] {895}),
/* NxS[1345] */ // Shortest string "/ata"
      new Table(36, 1, -1, new short[] {1346}),
/* NxS[1346] */ // Shortest string "/exp"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 911, -1, -1, -1, -1, 911}),
/* NxS[1347] */ // Shortest string "/alw"
      new Table(38, 1, -1, new short[] {1351}),
/* NxS[1348] */ // Shortest string "/alp"
      new Table(35, 1, -1, new short[] {1349}),
/* NxS[1349] */ // Shortest string "/alph"
      new Table(38, 1, -1, new short[] {1350}),
/* NxS[1350] */ // Shortest string "/alpha"
      new Table(33, 1, -1, new short[] {898}),
/* NxS[1351] */ // Shortest string "/alwa"
      new Table(44, 1, -1, new short[] {926}),
/* NxS[1352] */ // Shortest string "/bo"
      new Table(25, 1, -1, new short[] {1403}),
/* NxS[1353] */ // Shortest string "/bl"
      new Table(26, 1, -1, new short[] {1397}),
/* NxS[1354] */ // Shortest string "/br"
      new Table(26, 1, -1, new short[] {1395}),
/* NxS[1355] */ // Shortest string "/bi"
      new Table(33, 4, -1, new short[] {1365, -1, -1, 1366}),
/* NxS[1356] */ // Shortest string "/by"
      new Table(33, 1, -1, new short[] {1357}),
/* NxS[1357] */ // Shortest string "/byt"
      new Table(26, 1, -1, new short[] {1358}),
/* NxS[1358] */ // Shortest string "/byte"
      new Table(38, 1, -1, new short[] {1359}),
/* NxS[1359] */ // Shortest string "/bytea"
      new Table(24, 1, -1, new short[] {1360}),
/* NxS[1360] */ // Shortest string "/bytead"
      new Table(24, 1, -1, new short[] {1361}),
/* NxS[1361] */ // Shortest string "/byteadd"
      new Table(30, 1, -1, new short[] {1362}),
/* NxS[1362] */ // Shortest string "/byteaddr"
      new Table(26, 1, -1, new short[] {1363}),
/* NxS[1363] */ // Shortest string "/byteaddre"
      new Table(28, 1, -1, new short[] {1364}),
/* NxS[1364] */ // Shortest string "/byteaddres"
      new Table(28, 1, -1, new short[] {1325}),
/* NxS[1365] */ // Shortest string "/bit"
      new Table(29, 6, -1, new short[] {1374, -1, -1, -1, -1, 1375}),
/* NxS[1366] */ // Shortest string "/bin"
      new Table(24, 1, -1, new short[] {1367}),
/* NxS[1367] */ // Shortest string "/bind"
      new Table(54, 45, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1368}),
/* NxS[1368] */ // Shortest string "/bindc"
      new Table(35, 1, -1, new short[] {1369}),
/* NxS[1369] */ // Shortest string "/bindch"
      new Table(38, 1, -1, new short[] {1370}),
/* NxS[1370] */ // Shortest string "/bindcha"
      new Table(36, 1, -1, new short[] {1371}),
/* NxS[1371] */ // Shortest string "/bindchan"
      new Table(36, 1, -1, new short[] {1372}),
/* NxS[1372] */ // Shortest string "/bindchann"
      new Table(26, 1, -1, new short[] {1373}),
/* NxS[1373] */ // Shortest string "/bindchanne"
      new Table(27, 1, -1, new short[] {926}),
/* NxS[1374] */ // Shortest string "/bitf"
      new Table(31, 1, -1, new short[] {1378}),
/* NxS[1375] */ // Shortest string "/bitc"
      new Table(25, 1, -1, new short[] {1376}),
/* NxS[1376] */ // Shortest string "/bitco"
      new Table(39, 1, -1, new short[] {1377}),
/* NxS[1377] */ // Shortest string "/bitcou"
      new Table(36, 1, -1, new short[] {977}),
/* NxS[1378] */ // Shortest string "/bitfi"
      new Table(26, 1, -1, new short[] {1379}),
/* NxS[1379] */ // Shortest string "/bitfie"
      new Table(27, 1, -1, new short[] {1380}),
/* NxS[1380] */ // Shortest string "/bitfiel"
      new Table(24, 1, -1, new short[] {1381}),
/* NxS[1381] */ // Shortest string "/bitfield"
      new Table(26, 6, -1, new short[] {1382, -1, -1, -1, 1383, 1384}),
/* NxS[1382] */ // Shortest string "/bitfielde"
      new Table(45, 1, -1, new short[] {1391}),
/* NxS[1383] */ // Shortest string "/bitfieldr"
      new Table(26, 1, -1, new short[] {1387}),
/* NxS[1384] */ // Shortest string "/bitfieldi"
      new Table(36, 1, -1, new short[] {1385}),
/* NxS[1385] */ // Shortest string "/bitfieldin"
      new Table(28, 1, -1, new short[] {1386}),
/* NxS[1386] */ // Shortest string "/bitfieldins"
      new Table(26, 1, -1, new short[] {976}),
/* NxS[1387] */ // Shortest string "/bitfieldre"
      new Table(41, 1, -1, new short[] {1388}),
/* NxS[1388] */ // Shortest string "/inv"
      new Table(26, 1, -1, new short[] {1389}),
/* NxS[1389] */ // Shortest string "/inve"
      new Table(30, 1, -1, new short[] {1390}),
/* NxS[1390] */ // Shortest string "/inver"
      new Table(28, 1, -1, new short[] {971}),
/* NxS[1391] */ // Shortest string "/bitfieldex"
      new Table(33, 1, -1, new short[] {1392}),
/* NxS[1392] */ // Shortest string "/bitfieldext"
      new Table(30, 1, -1, new short[] {1393}),
/* NxS[1393] */ // Shortest string "/refr"
      new Table(38, 1, -1, new short[] {1394}),
/* NxS[1394] */ // Shortest string "/refle"
      new Table(34, 1, -1, new short[] {977}),
/* NxS[1395] */ // Shortest string "/bre"
      new Table(38, 1, -1, new short[] {1396}),
/* NxS[1396] */ // Shortest string "/brea"
      new Table(47, 1, -1, new short[] {938}),
/* NxS[1397] */ // Shortest string "/ble"
      new Table(36, 1, -1, new short[] {1398}),
/* NxS[1398] */ // Shortest string "/blen"
      new Table(24, 1, -1, new short[] {1399}),
/* NxS[1399] */ // Shortest string "/blend"
      new Table(54, 39, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
          1400}),
/* NxS[1400] */ // Shortest string "/blends"
      new Table(33, 1, -1, new short[] {1401}),
/* NxS[1401] */ // Shortest string "/blendst"
      new Table(38, 1, -1, new short[] {1402}),
/* NxS[1402] */ // Shortest string "/blendsta"
      new Table(33, 1, -1, new short[] {957}),
/* NxS[1403] */ // Shortest string "/boo"
      new Table(27, 1, -1, new short[] {1299}),
/* NxS[1404] */ // Shortest string "/no"
      new Table(30, 11, -1, new short[] {1419, 1420, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1421}),
/* NxS[1405] */ // Shortest string "/na"
      new Table(43, 1, -1, new short[] {1414}),
/* NxS[1406] */ // Shortest string "/nu"
      new Table(43, 1, -1, new short[] {1407}),
/* NxS[1407] */ // Shortest string "/num"
      new Table(33, 1, -1, new short[] {1408}),
/* NxS[1408] */ // Shortest string "/numt"
      new Table(35, 1, -1, new short[] {1409}),
/* NxS[1409] */ // Shortest string "/numth"
      new Table(30, 1, -1, new short[] {1410}),
/* NxS[1410] */ // Shortest string "/numthr"
      new Table(26, 1, -1, new short[] {1411}),
/* NxS[1411] */ // Shortest string "/numthre"
      new Table(38, 1, -1, new short[] {1412}),
/* NxS[1412] */ // Shortest string "/numthrea"
      new Table(24, 1, -1, new short[] {1413}),
/* NxS[1413] */ // Shortest string "/clas"
      new Table(28, 1, -1, new short[] {938}),
/* NxS[1414] */ // Shortest string "/nam"
      new Table(26, 1, -1, new short[] {1415}),
/* NxS[1415] */ // Shortest string "/name"
      new Table(54, 39, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
          1416}),
/* NxS[1416] */ // Shortest string "/names"
      new Table(40, 1, -1, new short[] {1417}),
/* NxS[1417] */ // Shortest string "/interf"
      new Table(38, 1, -1, new short[] {1418}),
/* NxS[1418] */ // Shortest string "/interfa"
      new Table(34, 1, -1, new short[] {957}),
/* NxS[1419] */ // Shortest string "/nor"
      new Table(43, 1, -1, new short[] {1441}),
/* NxS[1420] */ // Shortest string "/noi"
      new Table(36, 1, -1, new short[] {1430}),
/* NxS[1421] */ // Shortest string "/nop"
      new Table(26, 1, -1, new short[] {1422}),
/* NxS[1422] */ // Shortest string "/nope"
      new Table(30, 1, -1, new short[] {1423}),
/* NxS[1423] */ // Shortest string "/noper"
      new Table(28, 1, -1, new short[] {1424}),
/* NxS[1424] */ // Shortest string "/nopers"
      new Table(40, 1, -1, new short[] {1425}),
/* NxS[1425] */ // Shortest string "/nopersp"
      new Table(26, 1, -1, new short[] {1426}),
/* NxS[1426] */ // Shortest string "/noperspe"
      new Table(34, 1, -1, new short[] {1427}),
/* NxS[1427] */ // Shortest string "/noperspec"
      new Table(33, 1, -1, new short[] {1428}),
/* NxS[1428] */ // Shortest string "/noperspect"
      new Table(31, 1, -1, new short[] {1429}),
/* NxS[1429] */ // Shortest string "/noperspecti"
      new Table(41, 1, -1, new short[] {957}),
/* NxS[1430] */ // Shortest string "/noin"
      new Table(33, 1, -1, new short[] {1431}),
/* NxS[1431] */ // Shortest string "/noint"
      new Table(26, 1, -1, new short[] {1432}),
/* NxS[1432] */ // Shortest string "/nointe"
      new Table(30, 1, -1, new short[] {1433}),
/* NxS[1433] */ // Shortest string "/nointer"
      new Table(40, 1, -1, new short[] {1434}),
/* NxS[1434] */ // Shortest string "/nointerp"
      new Table(25, 1, -1, new short[] {1435}),
/* NxS[1435] */ // Shortest string "/nointerpo"
      new Table(27, 1, -1, new short[] {1436}),
/* NxS[1436] */ // Shortest string "/nointerpol"
      new Table(38, 1, -1, new short[] {1437}),
/* NxS[1437] */ // Shortest string "/nointerpola"
      new Table(33, 1, -1, new short[] {1438}),
/* NxS[1438] */ // Shortest string "/nointerpolat"
      new Table(31, 1, -1, new short[] {1439}),
/* NxS[1439] */ // Shortest string "/nointerpolati"
      new Table(25, 1, -1, new short[] {1440}),
/* NxS[1440] */ // Shortest string "/exter"
      new Table(36, 1, -1, new short[] {938}),
/* NxS[1441] */ // Shortest string "/norm"
      new Table(38, 1, -1, new short[] {1442}),
/* NxS[1442] */ // Shortest string "/norma"
      new Table(27, 1, -1, new short[] {1443}),
/* NxS[1443] */ // Shortest string "/tex1ds"
      new Table(31, 1, -1, new short[] {1444}),
/* NxS[1444] */ // Shortest string "/tex1dsi"
      new Table(46, 1, -1, new short[] {971}),
/* NxS[1445] */ // Shortest string "/ha"
      new Table(27, 1, -1, new short[] {1446}),
/* NxS[1446] */ // Shortest string "/hal"
      new Table(29, 1, -1, new short[] {1299}),
/* NxS[1447] */ // Shortest string "/co"
      new Table(27, 17, -1, new short[] {1482, 1483, -1, -1, -1, -1, 
          -1, -1, -1, 1484, -1, -1, -1, -1, -1, -1, 1485}),
/* NxS[1448] */ // Shortest string "/ce"
      new Table(31, 6, -1, new short[] {910, -1, -1, -1, -1, 1478}),
/* NxS[1449] */ // Shortest string "/cl"
      new Table(31, 8, -1, new short[] {1477, -1, -1, -1, -1, -1, 
          -1, 1476}),
/* NxS[1450] */ // Shortest string "/cr"
      new Table(25, 1, -1, new short[] {1475}),
/* NxS[1451] */ // Shortest string "/cb"
      new Table(39, 1, -1, new short[] {1465}),
/* NxS[1452] */ // Shortest string "/ca"
      new Table(33, 1, -1, new short[] {1460}),
/* NxS[1453] */ // Shortest string "/cu"
      new Table(27, 1, -1, new short[] {906}),
/* NxS[1454] */ // Shortest string "/cg"
      new Table(40, 1, -1, new short[] {1455}),
/* NxS[1455] */ // Shortest string "/cgp"
      new Table(30, 1, -1, new short[] {1456}),
/* NxS[1456] */ // Shortest string "/cgpr"
      new Table(25, 1, -1, new short[] {1457}),
/* NxS[1457] */ // Shortest string "/cgpro"
      new Table(42, 1, -1, new short[] {1458}),
/* NxS[1458] */ // Shortest string "/cgprog"
      new Table(30, 1, -1, new short[] {1459}),
/* NxS[1459] */ // Shortest string "/cgprogr"
      new Table(38, 1, -1, new short[] {951}),
/* NxS[1460] */ // Shortest string "/cat"
      new Table(26, 1, -1, new short[] {1461}),
/* NxS[1461] */ // Shortest string "/cate"
      new Table(42, 1, -1, new short[] {1462}),
/* NxS[1462] */ // Shortest string "/categ"
      new Table(25, 1, -1, new short[] {1463}),
/* NxS[1463] */ // Shortest string "/catego"
      new Table(30, 1, -1, new short[] {1464}),
/* NxS[1464] */ // Shortest string "/densit"
      new Table(44, 1, -1, new short[] {901}),
/* NxS[1465] */ // Shortest string "/cbu"
      new Table(29, 1, -1, new short[] {1466}),
/* NxS[1466] */ // Shortest string "/cbuf"
      new Table(29, 1, -1, new short[] {1467}),
/* NxS[1467] */ // Shortest string "/cbuff"
      new Table(26, 1, -1, new short[] {1468}),
/* NxS[1468] */ // Shortest string "/cbuffe"
      new Table(30, 1, -1, new short[] {1469}),
/* NxS[1469] */ // Shortest string "/cbuffer"
      new Table(54, 34, -1, new short[] {11, -1, -1, -1, -1, -1, 
          -1, 1470, -1, -1, 11, 11, -1, 11, -1, -1, 11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}),
/* NxS[1470] */ // Shortest string "/cbuffer_"
      new Table(26, 3, -1, new short[] {1471, -1, 1472}),
/* NxS[1471] */ // Shortest string "/cbuffer_e"
      new Table(36, 1, -1, new short[] {1122}),
/* NxS[1472] */ // Shortest string "/cbuffer_s"
      new Table(33, 1, -1, new short[] {1473}),
/* NxS[1473] */ // Shortest string "/cbuffer_st"
      new Table(38, 1, -1, new short[] {1474}),
/* NxS[1474] */ // Shortest string "/cbuffer_sta"
      new Table(30, 1, -1, new short[] {1012}),
/* NxS[1475] */ // Shortest string "/cro"
      new Table(28, 1, -1, new short[] {1305}),
/* NxS[1476] */ // Shortest string "/cla"
      new Table(28, 16, -1, new short[] {1413, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1477}),
/* NxS[1477] */ // Shortest string "/ler"
      new Table(40, 1, -1, new short[] {911}),
/* NxS[1478] */ // Shortest string "/cen"
      new Table(33, 1, -1, new short[] {1479}),
/* NxS[1479] */ // Shortest string "/cent"
      new Table(30, 1, -1, new short[] {1480}),
/* NxS[1480] */ // Shortest string "/centr"
      new Table(25, 1, -1, new short[] {1481}),
/* NxS[1481] */ // Shortest string "/centro"
      new Table(31, 1, -1, new short[] {953}),
/* NxS[1482] */ // Shortest string "/col"
      new Table(25, 1, -1, new short[] {1503}),
/* NxS[1483] */ // Shortest string "/tan"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 911, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 911}),
/* NxS[1484] */ // Shortest string "/con"
      new Table(28, 6, -1, new short[] {1489, -1, -1, -1, -1, 1490}),
/* NxS[1485] */ // Shortest string "/com"
      new Table(37, 4, -1, new short[] {1486, -1, -1, 1487}),
/* NxS[1486] */ // Shortest string "/comb"
      new Table(31, 1, -1, new short[] {1488}),
/* NxS[1487] */ // Shortest string "/comp"
      new Table(54, 42, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, 
          -1, -1, -1, 956}),
/* NxS[1488] */ // Shortest string "/combi"
      new Table(36, 1, -1, new short[] {904}),
/* NxS[1489] */ // Shortest string "/cons"
      new Table(33, 7, -1, new short[] {1493, -1, -1, -1, -1, -1, 
          1494}),
/* NxS[1490] */ // Shortest string "/cont"
      new Table(31, 1, -1, new short[] {1491}),
/* NxS[1491] */ // Shortest string "/conti"
      new Table(36, 1, -1, new short[] {1492}),
/* NxS[1492] */ // Shortest string "/contin"
      new Table(39, 1, -1, new short[] {957}),
/* NxS[1493] */ // Shortest string "/const"
      new Table(24, 46, 11, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1496, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 11, 11, -1, 11, -1, -1}),
/* NxS[1494] */ // Shortest string "/consu"
      new Table(43, 1, -1, new short[] {1495}),
/* NxS[1495] */ // Shortest string "/consum"
      new Table(26, 1, -1, new short[] {1315}),
/* NxS[1496] */ // Shortest string "/consta"
      new Table(36, 1, -1, new short[] {1497}),
/* NxS[1497] */ // Shortest string "/constan"
      new Table(33, 1, -1, new short[] {1498}),
/* NxS[1498] */ // Shortest string "/constant"
      new Table(34, 1, -1, new short[] {1499}),
/* NxS[1499] */ // Shortest string "/dstc"
      new Table(25, 1, -1, new short[] {1500}),
/* NxS[1500] */ // Shortest string "/dstco"
      new Table(27, 1, -1, new short[] {1501}),
/* NxS[1501] */ // Shortest string "/dstcol"
      new Table(25, 1, -1, new short[] {1502}),
/* NxS[1502] */ // Shortest string "/dstcolo"
      new Table(30, 1, -1, new short[] {901}),
/* NxS[1503] */ // Shortest string "/colo"
      new Table(30, 1, -1, new short[] {1504}),
/* NxS[1504] */ // Shortest string "/color"
      new Table(43, 45, -1, new short[] {1505, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
          6, -1, 6, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
          6, 6, 6, 6, 6, 6, 6}),
/* NxS[1505] */ // Shortest string "/colorm"
      new Table(38, 1, -1, new short[] {1506}),
/* NxS[1506] */ // Shortest string "/colorma"
      new Table(28, 6, -1, new short[] {1507, -1, -1, -1, -1, 1508}),
/* NxS[1507] */ // Shortest string "/fallbac"
      new Table(47, 1, -1, new short[] {901}),
/* NxS[1508] */ // Shortest string "/colormat"
      new Table(26, 1, -1, new short[] {913}),
/* NxS[1509] */ // Shortest string "/te"
      new Table(34, 12, -1, new short[] {1541, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1542}),
/* NxS[1510] */ // Shortest string "/tr"
      new Table(31, 9, -1, new short[] {1520, -1, -1, -1, -1, -1, 
          -1, 1521, 1522}),
/* NxS[1511] */ // Shortest string "/tb"
      new Table(39, 1, -1, new short[] {1518}),
/* NxS[1512] */ // Shortest string "/ta"
      new Table(36, 7, -1, new short[] {1483, -1, -1, -1, -1, -1, 
          926}),
/* NxS[1513] */ // Shortest string "/ty"
      new Table(40, 1, -1, new short[] {1514}),
/* NxS[1514] */ // Shortest string "/typ"
      new Table(26, 1, -1, new short[] {1515}),
/* NxS[1515] */ // Shortest string "/type"
      new Table(24, 1, -1, new short[] {1516}),
/* NxS[1516] */ // Shortest string "/typed"
      new Table(26, 1, -1, new short[] {1517}),
/* NxS[1517] */ // Shortest string "/typede"
      new Table(29, 1, -1, new short[] {938}),
/* NxS[1518] */ // Shortest string "/bu"
      new Table(29, 1, -1, new short[] {1519}),
/* NxS[1519] */ // Shortest string "/buf"
      new Table(29, 1, -1, new short[] {936}),
/* NxS[1520] */ // Shortest string "/tri"
      new Table(38, 1, -1, new short[] {1534}),
/* NxS[1521] */ // Shortest string "/tra"
      new Table(36, 1, -1, new short[] {1524}),
/* NxS[1522] */ // Shortest string "/tru"
      new Table(26, 11, -1, new short[] {938, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1523}),
/* NxS[1523] */ // Shortest string "/fra"
      new Table(34, 1, -1, new short[] {911}),
/* NxS[1524] */ // Shortest string "/tran"
      new Table(28, 1, -1, new short[] {1525}),
/* NxS[1525] */ // Shortest string "/trans"
      new Table(29, 12, -1, new short[] {1526, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1527}),
/* NxS[1526] */ // Shortest string "/transf"
      new Table(25, 1, -1, new short[] {1528}),
/* NxS[1527] */ // Shortest string "/transp"
      new Table(25, 1, -1, new short[] {1390}),
/* NxS[1528] */ // Shortest string "/transfo"
      new Table(30, 1, -1, new short[] {1529}),
/* NxS[1529] */ // Shortest string "/transfor"
      new Table(43, 1, -1, new short[] {1530}),
/* NxS[1530] */ // Shortest string "/transform"
      new Table(61, 1, -1, new short[] {1531}),
/* NxS[1531] */ // Shortest string "/transform_"
      new Table(33, 1, -1, new short[] {1532}),
/* NxS[1532] */ // Shortest string "/transform_t"
      new Table(26, 1, -1, new short[] {1533}),
/* NxS[1533] */ // Shortest string "/transform_te"
      new Table(45, 1, -1, new short[] {1013}),
/* NxS[1534] */ // Shortest string "/tria"
      new Table(36, 1, -1, new short[] {1535}),
/* NxS[1535] */ // Shortest string "/trian"
      new Table(42, 1, -1, new short[] {1536}),
/* NxS[1536] */ // Shortest string "/triang"
      new Table(27, 1, -1, new short[] {1537}),
/* NxS[1537] */ // Shortest string "/triangl"
      new Table(26, 1, -1, new short[] {1538}),
/* NxS[1538] */ // Shortest string "/triangle"
      new Table(24, 46, 10, new short[] {-1, -1, -1, -1, 1006, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1539, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 10, 10, -1, 10, -1, -1}),
/* NxS[1539] */ // Shortest string "/trianglea"
      new Table(24, 1, -1, new short[] {1540}),
/* NxS[1540] */ // Shortest string "/linead"
      new Table(63, 1, -1, new short[] {916}),
/* NxS[1541] */ // Shortest string "/tec"
      new Table(35, 1, -1, new short[] {1610}),
/* NxS[1542] */ // Shortest string "/tex"
      new Table(30, 21, -1, new short[] {1543, -1, -1, 1544, 1545, -1, 
          -1, 1546, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1547, 1548, 1549}),
/* NxS[1543] */ // Shortest string "/texr"
      new Table(26, 12, -1, new short[] {1608, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1546}),
/* NxS[1544] */ // Shortest string "/text"
      new Table(39, 1, -1, new short[] {1593}),
/* NxS[1545] */ // Shortest string "/texc"
      new Table(39, 1, -1, new short[] {1585}),
/* NxS[1546] */ // Shortest string "/texb"
      new Table(39, 1, -1, new short[] {1583}),
/* NxS[1547] */ // Shortest string "/tex1"
      new Table(24, 1, -1, new short[] {1577}),
/* NxS[1548] */ // Shortest string "/tex2"
      new Table(24, 1, -1, new short[] {1562}),
/* NxS[1549] */ // Shortest string "/tex3"
      new Table(24, 1, -1, new short[] {1550}),
/* NxS[1550] */ // Shortest string "/tex3d"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, 1551, 1443, 1552, -1, -1, -1, -1, -1, -1, -1, 1553, -1, -1, 1554, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 911}),
/* NxS[1551] */ // Shortest string "/fm"
      new Table(25, 1, -1, new short[] {1561}),
/* NxS[1552] */ // Shortest string "/tex1df"
      new Table(26, 1, -1, new short[] {1558}),
/* NxS[1553] */ // Shortest string "/tex1db"
      new Table(31, 1, -1, new short[] {1557}),
/* NxS[1554] */ // Shortest string "/tex1dp"
      new Table(30, 1, -1, new short[] {1555}),
/* NxS[1555] */ // Shortest string "/tex1dpr"
      new Table(25, 1, -1, new short[] {1556}),
/* NxS[1556] */ // Shortest string "/tex1dpro"
      new Table(63, 1, -1, new short[] {911}),
/* NxS[1557] */ // Shortest string "/tex1dbi"
      new Table(38, 1, -1, new short[] {1305}),
/* NxS[1558] */ // Shortest string "/tex1dfe"
      new Table(33, 1, -1, new short[] {1559}),
/* NxS[1559] */ // Shortest string "/tex1dfet"
      new Table(34, 1, -1, new short[] {1560}),
/* NxS[1560] */ // Shortest string "/lengt"
      new Table(35, 1, -1, new short[] {911}),
/* NxS[1561] */ // Shortest string "/fmo"
      new Table(24, 1, -1, new short[] {911}),
/* NxS[1562] */ // Shortest string "/tex2d"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, 1551, 1443, 1552, -1, -1, -1, -1, 1563, -1, -1, 1553, 1564, -1, 1554, -1, 
          -1, 1565, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 911}),
/* NxS[1563] */ // Shortest string "/tex1dc"
      new Table(43, 1, -1, new short[] {1575}),
/* NxS[1564] */ // Shortest string "/tex2da"
      new Table(30, 1, -1, new short[] {1572}),
/* NxS[1565] */ // Shortest string "/tex2dm"
      new Table(28, 1, -1, new short[] {1566}),
/* NxS[1566] */ // Shortest string "/tex2dms"
      new Table(28, 11, -1, new short[] {1443, 1552, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1567}),
/* NxS[1567] */ // Shortest string "/tex2dmsa"
      new Table(30, 1, -1, new short[] {1568}),
/* NxS[1568] */ // Shortest string "/tex2dmsar"
      new Table(30, 1, -1, new short[] {1569}),
/* NxS[1569] */ // Shortest string "/tex2dmsarr"
      new Table(38, 1, -1, new short[] {1570}),
/* NxS[1570] */ // Shortest string "/tex2dmsarra"
      new Table(44, 1, -1, new short[] {1571}),
/* NxS[1571] */ // Shortest string "/tex2dmsarray"
      new Table(28, 2, -1, new short[] {1443, 1552}),
/* NxS[1572] */ // Shortest string "/tex2dar"
      new Table(30, 1, -1, new short[] {1573}),
/* NxS[1573] */ // Shortest string "/tex2darr"
      new Table(38, 1, -1, new short[] {1574}),
/* NxS[1574] */ // Shortest string "/tex2darra"
      new Table(44, 1, -1, new short[] {1550}),
/* NxS[1575] */ // Shortest string "/tex1dcm"
      new Table(40, 1, -1, new short[] {1576}),
/* NxS[1576] */ // Shortest string "/tex1dcmp"
      new Table(27, 11, -1, new short[] {1551, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1553}),
/* NxS[1577] */ // Shortest string "/tex1d"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, 1551, 1443, 1552, -1, -1, -1, -1, 1563, -1, -1, 1553, 1578, -1, 1554, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 911}),
/* NxS[1578] */ // Shortest string "/tex1da"
      new Table(30, 1, -1, new short[] {1579}),
/* NxS[1579] */ // Shortest string "/tex1dar"
      new Table(30, 1, -1, new short[] {1580}),
/* NxS[1580] */ // Shortest string "/tex1darr"
      new Table(38, 1, -1, new short[] {1581}),
/* NxS[1581] */ // Shortest string "/tex1darra"
      new Table(44, 1, -1, new short[] {1582}),
/* NxS[1582] */ // Shortest string "/tex1darray"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, 1551, 1443, 1552, -1, -1, -1, -1, 1563, -1, -1, 1553, -1, -1, 1554, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 911}),
/* NxS[1583] */ // Shortest string "/texbu"
      new Table(29, 1, -1, new short[] {1584}),
/* NxS[1584] */ // Shortest string "/texbuf"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, -1, 1443, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 911}),
/* NxS[1585] */ // Shortest string "/texcu"
      new Table(37, 1, -1, new short[] {1586}),
/* NxS[1586] */ // Shortest string "/texcub"
      new Table(26, 1, -1, new short[] {1587}),
/* NxS[1587] */ // Shortest string "/texcube"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, 1551, 1443, -1, -1, -1, -1, -1, -1, -1, -1, 1553, 1588, -1, 1554, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 911}),
/* NxS[1588] */ // Shortest string "/texcubea"
      new Table(30, 1, -1, new short[] {1589}),
/* NxS[1589] */ // Shortest string "/texcubear"
      new Table(30, 1, -1, new short[] {1590}),
/* NxS[1590] */ // Shortest string "/texcubearr"
      new Table(38, 1, -1, new short[] {1591}),
/* NxS[1591] */ // Shortest string "/texcubearra"
      new Table(44, 1, -1, new short[] {1592}),
/* NxS[1592] */ // Shortest string "/texcubearray"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, 1551, 1443, -1, -1, -1, -1, -1, -1, -1, -1, 1553, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 911}),
/* NxS[1593] */ // Shortest string "/textu"
      new Table(30, 1, -1, new short[] {1594}),
/* NxS[1594] */ // Shortest string "/textur"
      new Table(26, 1, -1, new short[] {1595}),
/* NxS[1595] */ // Shortest string "/texture"
      new Table(24, 46, 11, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1596, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 1597, 1598, 953, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 11, 11, -1, 11, -1, -1}),
/* NxS[1596] */ // Shortest string "/texturec"
      new Table(39, 1, -1, new short[] {1601}),
/* NxS[1597] */ // Shortest string "/texture1"
      new Table(24, 1, -1, new short[] {1603}),
/* NxS[1598] */ // Shortest string "/texture2"
      new Table(24, 1, -1, new short[] {1599}),
/* NxS[1599] */ // Shortest string "/texture2d"
      new Table(24, 46, 11, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1604, -1, -1, -1, -1, 1600, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 11, 11, -1, 11, -1, -1}),
/* NxS[1600] */ // Shortest string "/texture2dm"
      new Table(28, 1, -1, new short[] {1603}),
/* NxS[1601] */ // Shortest string "/texturecu"
      new Table(37, 1, -1, new short[] {1602}),
/* NxS[1602] */ // Shortest string "/texturecub"
      new Table(26, 1, -1, new short[] {1603}),
/* NxS[1603] */ // Shortest string "/texture1d"
      new Table(24, 46, 11, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1604, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 11, 11, -1, 11, -1, -1}),
/* NxS[1604] */ // Shortest string "/texture1da"
      new Table(30, 1, -1, new short[] {1605}),
/* NxS[1605] */ // Shortest string "/texture1dar"
      new Table(30, 1, -1, new short[] {1606}),
/* NxS[1606] */ // Shortest string "/texture1darr"
      new Table(38, 1, -1, new short[] {1607}),
/* NxS[1607] */ // Shortest string "/texture1darra"
      new Table(44, 1, -1, new short[] {938}),
/* NxS[1608] */ // Shortest string "/texre"
      new Table(34, 1, -1, new short[] {1609}),
/* NxS[1609] */ // Shortest string "/texrec"
      new Table(33, 1, -1, new short[] {1550}),
/* NxS[1610] */ // Shortest string "/tech"
      new Table(36, 1, -1, new short[] {1611}),
/* NxS[1611] */ // Shortest string "/techn"
      new Table(31, 1, -1, new short[] {1612}),
/* NxS[1612] */ // Shortest string "/techni"
      new Table(51, 1, -1, new short[] {1613}),
/* NxS[1613] */ // Shortest string "/techniq"
      new Table(39, 1, -1, new short[] {1614}),
/* NxS[1614] */ // Shortest string "/techniqu"
      new Table(26, 1, -1, new short[] {1615}),
/* NxS[1615] */ // Shortest string "/technique"
      new Table(48, 40, -1, new short[] {1616, -1, -1, -1, -1, -1, 
          11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, 11, -1, -1, 
          11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
          11, 11}),
/* NxS[1616] */ // Shortest string "/technique1"
      new Table(48, 5, -1, new short[] {938, -1, -1, -1, 938}),
/* NxS[1617] */ // Shortest string "/wr"
      new Table(31, 1, -1, new short[] {1622}),
/* NxS[1618] */ // Shortest string "/wh"
      new Table(31, 1, -1, new short[] {1619}),
/* NxS[1619] */ // Shortest string "/whi"
      new Table(27, 1, -1, new short[] {1620}),
/* NxS[1620] */ // Shortest string "/els"
      new Table(26, 1, -1, new short[] {1621}),
/* NxS[1621] */ // Shortest string "/else"
      new Table(54, 34, -1, new short[] {15, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 15, 15, -1, 15, -1, -1, 15, 15, 15, 15, 15, 15, 
          15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15}),
/* NxS[1622] */ // Shortest string "/wri"
      new Table(33, 1, -1, new short[] {1623}),
/* NxS[1623] */ // Shortest string "/writ"
      new Table(26, 1, -1, new short[] {1624}),
/* NxS[1624] */ // Shortest string "/read"
      new Table(43, 1, -1, new short[] {1625}),
/* NxS[1625] */ // Shortest string "/readm"
      new Table(38, 1, -1, new short[] {1626}),
/* NxS[1626] */ // Shortest string "/readma"
      new Table(28, 1, -1, new short[] {1507}),
/* NxS[1627] */ // Shortest string "/is"
      new Table(29, 8, -1, new short[] {1659, -1, 1660, -1, -1, -1, 
          -1, 1661}),
/* NxS[1628] */ // Shortest string "/if"
      new Table(24, 46, 15, new short[] {1657, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1656, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 15, 15, -1, 15, -1, -1}),
/* NxS[1629] */ // Shortest string "/in"
      new Table(24, 46, 11, new short[] {-1, 1630, -1, 1631, -1, -1, 
          -1, -1, -1, 1632, 1633, -1, -1, -1, -1, -1, 1634, 1388, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 11, 11, -1, 11, -1, -1}),
/* NxS[1630] */ // Shortest string "/ino"
      new Table(39, 1, -1, new short[] {1655}),
/* NxS[1631] */ // Shortest string "/inl"
      new Table(31, 1, -1, new short[] {1654}),
/* NxS[1632] */ // Shortest string "/int"
      new Table(24, 46, 10, new short[] {-1, -1, 1643, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1644, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 916, 916, -1, -1, -1, 10, 916, -1, -1, -1, -1, -1, -1, 
          -1, -1, 10, 10, -1, 10, -1, -1}),
/* NxS[1633] */ // Shortest string "/inc"
      new Table(27, 1, -1, new short[] {1641}),
/* NxS[1634] */ // Shortest string "/inp"
      new Table(39, 1, -1, new short[] {1635}),
/* NxS[1635] */ // Shortest string "/inpu"
      new Table(33, 1, -1, new short[] {1636}),
/* NxS[1636] */ // Shortest string "/input"
      new Table(40, 1, -1, new short[] {1637}),
/* NxS[1637] */ // Shortest string "/inputp"
      new Table(38, 1, -1, new short[] {1638}),
/* NxS[1638] */ // Shortest string "/inputpa"
      new Table(33, 1, -1, new short[] {1639}),
/* NxS[1639] */ // Shortest string "/inputpat"
      new Table(34, 1, -1, new short[] {1640}),
/* NxS[1640] */ // Shortest string "/inputpatc"
      new Table(35, 1, -1, new short[] {916}),
/* NxS[1641] */ // Shortest string "/incl"
      new Table(39, 1, -1, new short[] {1642}),
/* NxS[1642] */ // Shortest string "/inclu"
      new Table(24, 1, -1, new short[] {904}),
/* NxS[1643] */ // Shortest string "/inte"
      new Table(30, 1, -1, new short[] {1653}),
/* NxS[1644] */ // Shortest string "/intb"
      new Table(31, 1, -1, new short[] {1645}),
/* NxS[1645] */ // Shortest string "/intbi"
      new Table(33, 1, -1, new short[] {1646}),
/* NxS[1646] */ // Shortest string "/intbit"
      new Table(28, 1, -1, new short[] {1647}),
/* NxS[1647] */ // Shortest string "/intbits"
      new Table(33, 1, -1, new short[] {1648}),
/* NxS[1648] */ // Shortest string "/intbitst"
      new Table(25, 1, -1, new short[] {1649}),
/* NxS[1649] */ // Shortest string "/intbitsto"
      new Table(29, 1, -1, new short[] {1650}),
/* NxS[1650] */ // Shortest string "/intbitstof"
      new Table(27, 1, -1, new short[] {1651}),
/* NxS[1651] */ // Shortest string "/intbitstofl"
      new Table(25, 1, -1, new short[] {1652}),
/* NxS[1652] */ // Shortest string "/intbitstoflo"
      new Table(38, 1, -1, new short[] {977}),
/* NxS[1653] */ // Shortest string "/inter"
      new Table(29, 1, -1, new short[] {1417}),
/* NxS[1654] */ // Shortest string "/inli"
      new Table(36, 1, -1, new short[] {957}),
/* NxS[1655] */ // Shortest string "/inou"
      new Table(33, 1, -1, new short[] {938}),
/* NxS[1656] */ // Shortest string "/ifn"
      new Table(24, 1, -1, new short[] {1657}),
/* NxS[1657] */ // Shortest string "/ifd"
      new Table(26, 1, -1, new short[] {1658}),
/* NxS[1658] */ // Shortest string "/eli"
      new Table(29, 1, -1, new short[] {1621}),
/* NxS[1659] */ // Shortest string "/isf"
      new Table(31, 1, -1, new short[] {1662}),
/* NxS[1660] */ // Shortest string "/isi"
      new Table(36, 1, -1, new short[] {979}),
/* NxS[1661] */ // Shortest string "/isn"
      new Table(38, 1, -1, new short[] {908}),
/* NxS[1662] */ // Shortest string "/isfi"
      new Table(36, 1, -1, new short[] {1663}),
/* NxS[1663] */ // Shortest string "/isfin"
      new Table(31, 1, -1, new short[] {970}),
/* NxS[1664] */ // Shortest string "/ro"
      new Table(39, 1, -1, new short[] {1718}),
/* NxS[1665] */ // Shortest string "/re"
      new Table(29, 14, -1, new short[] {1696, -1, -1, -1, 1697, 1698, 
          -1, 1699, -1, 1700, -1, -1, -1, 1701}),
/* NxS[1666] */ // Shortest string "/rs"
      new Table(51, 1, -1, new short[] {976}),
/* NxS[1667] */ // Shortest string "/rw"
      new Table(28, 10, -1, new short[] {1316, -1, -1, -1, -1, 1681, 
          -1, -1, -1, 1682}),
/* NxS[1668] */ // Shortest string "/ra"
      new Table(24, 13, -1, new short[] {1669, -1, -1, -1, 1670, -1, 
          -1, -1, -1, -1, -1, -1, 1671}),
/* NxS[1669] */ // Shortest string "/rad"
      new Table(31, 1, -1, new short[] {1679}),
/* NxS[1670] */ // Shortest string "/ras"
      new Table(33, 1, -1, new short[] {1672}),
/* NxS[1671] */ // Shortest string "/ran"
      new Table(42, 1, -1, new short[] {1340}),
/* NxS[1672] */ // Shortest string "/rast"
      new Table(26, 1, -1, new short[] {1673}),
/* NxS[1673] */ // Shortest string "/raste"
      new Table(30, 1, -1, new short[] {1674}),
/* NxS[1674] */ // Shortest string "/raster"
      new Table(31, 1, -1, new short[] {1675}),
/* NxS[1675] */ // Shortest string "/rasteri"
      new Table(46, 1, -1, new short[] {1676}),
/* NxS[1676] */ // Shortest string "/rasteriz"
      new Table(26, 1, -1, new short[] {1677}),
/* NxS[1677] */ // Shortest string "/rasterize"
      new Table(30, 1, -1, new short[] {1678}),
/* NxS[1678] */ // Shortest string "/rasterizer"
      new Table(28, 1, -1, new short[] {1400}),
/* NxS[1679] */ // Shortest string "/radi"
      new Table(38, 1, -1, new short[] {1680}),
/* NxS[1680] */ // Shortest string "/radia"
      new Table(36, 1, -1, new short[] {1305}),
/* NxS[1681] */ // Shortest string "/rwt"
      new Table(26, 1, -1, new short[] {1683}),
/* NxS[1682] */ // Shortest string "/rwb"
      new Table(39, 6, -1, new short[] {1327, -1, -1, -1, -1, 1356}),
/* NxS[1683] */ // Shortest string "/rwte"
      new Table(45, 1, -1, new short[] {1684}),
/* NxS[1684] */ // Shortest string "/rwtex"
      new Table(33, 1, -1, new short[] {1685}),
/* NxS[1685] */ // Shortest string "/rwtext"
      new Table(39, 1, -1, new short[] {1686}),
/* NxS[1686] */ // Shortest string "/rwtextu"
      new Table(30, 1, -1, new short[] {1687}),
/* NxS[1687] */ // Shortest string "/rwtextur"
      new Table(26, 1, -1, new short[] {1688}),
/* NxS[1688] */ // Shortest string "/rwtexture"
      new Table(48, 3, -1, new short[] {1689, 1689, 1690}),
/* NxS[1689] */ // Shortest string "/rwtexture1"
      new Table(24, 1, -1, new short[] {1691}),
/* NxS[1690] */ // Shortest string "/sampler2"
      new Table(24, 1, -1, new short[] {916}),
/* NxS[1691] */ // Shortest string "/rwtexture1d"
      new Table(24, 46, 10, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1692, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 10, 10, -1, 10, -1, -1}),
/* NxS[1692] */ // Shortest string "/rwtexture1da"
      new Table(30, 1, -1, new short[] {1693}),
/* NxS[1693] */ // Shortest string "/rwtexture1dar"
      new Table(30, 1, -1, new short[] {1694}),
/* NxS[1694] */ // Shortest string "/rwtexture1darr"
      new Table(38, 1, -1, new short[] {1695}),
/* NxS[1695] */ // Shortest string "/rwtexture1darra"
      new Table(44, 1, -1, new short[] {916}),
/* NxS[1696] */ // Shortest string "/ref"
      new Table(54, 41, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 1717, 
          -1, -1, 1393}),
/* NxS[1697] */ // Shortest string "/ret"
      new Table(39, 1, -1, new short[] {1716}),
/* NxS[1698] */ // Shortest string "/rec"
      new Table(33, 1, -1, new short[] {895}),
/* NxS[1699] */ // Shortest string "/ren"
      new Table(24, 1, -1, new short[] {1704}),
/* NxS[1700] */ // Shortest string "/rea"
      new Table(24, 1, -1, new short[] {1624}),
/* NxS[1701] */ // Shortest string "/reg"
      new Table(31, 1, -1, new short[] {1702}),
/* NxS[1702] */ // Shortest string "/regi"
      new Table(28, 1, -1, new short[] {1703}),
/* NxS[1703] */ // Shortest string "/regis"
      new Table(33, 1, -1, new short[] {936}),
/* NxS[1704] */ // Shortest string "/rend"
      new Table(26, 1, -1, new short[] {1705}),
/* NxS[1705] */ // Shortest string "/rende"
      new Table(30, 1, -1, new short[] {1706}),
/* NxS[1706] */ // Shortest string "/render"
      new Table(33, 1, -1, new short[] {1707}),
/* NxS[1707] */ // Shortest string "/rendert"
      new Table(38, 1, -1, new short[] {1708}),
/* NxS[1708] */ // Shortest string "/renderta"
      new Table(30, 1, -1, new short[] {1709}),
/* NxS[1709] */ // Shortest string "/rendertar"
      new Table(42, 1, -1, new short[] {1710}),
/* NxS[1710] */ // Shortest string "/rendertarg"
      new Table(26, 1, -1, new short[] {1711}),
/* NxS[1711] */ // Shortest string "/rendertarge"
      new Table(33, 1, -1, new short[] {1712}),
/* NxS[1712] */ // Shortest string "/rendertarget"
      new Table(41, 1, -1, new short[] {1713}),
/* NxS[1713] */ // Shortest string "/depthstencilv"
      new Table(31, 1, -1, new short[] {1714}),
/* NxS[1714] */ // Shortest string "/depthstencilvi"
      new Table(26, 1, -1, new short[] {1715}),
/* NxS[1715] */ // Shortest string "/depthstencilvie"
      new Table(32, 1, -1, new short[] {938}),
/* NxS[1716] */ // Shortest string "/exte"
      new Table(30, 1, -1, new short[] {1440}),
/* NxS[1717] */ // Shortest string "/refl"
      new Table(26, 1, -1, new short[] {1394}),
/* NxS[1718] */ // Shortest string "/rou"
      new Table(36, 1, -1, new short[] {1561}),
/* NxS[1719] */ // Shortest string "/fo"
      new Table(30, 13, -1, new short[] {1762, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 901}),
/* NxS[1720] */ // Shortest string "/fl"
      new Table(25, 1, -1, new short[] {1745}),
/* NxS[1721] */ // Shortest string "/fr"
      new Table(26, 13, -1, new short[] {1744, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1523}),
/* NxS[1722] */ // Shortest string "/fi"
      new Table(36, 10, -1, new short[] {1738, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1739}),
/* NxS[1723] */ // Shortest string "/fw"
      new Table(31, 1, -1, new short[] {1736}),
/* NxS[1724] */ // Shortest string "/fa"
      new Table(27, 8, -1, new short[] {1725, -1, -1, -1, 906, -1, 
          -1, 1726}),
/* NxS[1725] */ // Shortest string "/fal"
      new Table(27, 2, -1, new short[] {1733, 957}),
/* NxS[1726] */ // Shortest string "/fac"
      new Table(26, 1, -1, new short[] {1727}),
/* NxS[1727] */ // Shortest string "/face"
      new Table(29, 1, -1, new short[] {1728}),
/* NxS[1728] */ // Shortest string "/facef"
      new Table(25, 1, -1, new short[] {1729}),
/* NxS[1729] */ // Shortest string "/facefo"
      new Table(30, 1, -1, new short[] {1730}),
/* NxS[1730] */ // Shortest string "/facefor"
      new Table(32, 1, -1, new short[] {1731}),
/* NxS[1731] */ // Shortest string "/faceforw"
      new Table(38, 1, -1, new short[] {1732}),
/* NxS[1732] */ // Shortest string "/faceforwa"
      new Table(30, 1, -1, new short[] {1561}),
/* NxS[1733] */ // Shortest string "/fall"
      new Table(37, 1, -1, new short[] {1734}),
/* NxS[1734] */ // Shortest string "/fallb"
      new Table(38, 1, -1, new short[] {1735}),
/* NxS[1735] */ // Shortest string "/fallba"
      new Table(34, 1, -1, new short[] {1507}),
/* NxS[1736] */ // Shortest string "/fwi"
      new Table(24, 1, -1, new short[] {1737}),
/* NxS[1737] */ // Shortest string "/leng"
      new Table(33, 1, -1, new short[] {1560}),
/* NxS[1738] */ // Shortest string "/fin"
      new Table(24, 1, -1, new short[] {1741}),
/* NxS[1739] */ // Shortest string "/fix"
      new Table(26, 1, -1, new short[] {1740}),
/* NxS[1740] */ // Shortest string "/fixe"
      new Table(24, 1, -1, new short[] {1299}),
/* NxS[1741] */ // Shortest string "/find"
      new Table(27, 17, -1, new short[] {1742, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1742}),
/* NxS[1742] */ // Shortest string "/findl"
      new Table(28, 1, -1, new short[] {1743}),
/* NxS[1743] */ // Shortest string "/findls"
      new Table(37, 1, -1, new short[] {911}),
/* NxS[1744] */ // Shortest string "/lde"
      new Table(45, 1, -1, new short[] {1477}),
/* NxS[1745] */ // Shortest string "/flo"
      new Table(25, 14, -1, new short[] {1746, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1747}),
/* NxS[1746] */ // Shortest string "/floo"
      new Table(30, 1, -1, new short[] {911}),
/* NxS[1747] */ // Shortest string "/floa"
      new Table(33, 1, -1, new short[] {1748}),
/* NxS[1748] */ // Shortest string "/float"
      new Table(24, 46, 10, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1749, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 1750, 1751, 1751, -1, -1, -1, 10, 1751, -1, -1, -1, -1, -1, -1, 
          -1, -1, 10, 10, -1, 10, -1, -1}),
/* NxS[1749] */ // Shortest string "/floatt"
      new Table(25, 1, -1, new short[] {1753}),
/* NxS[1750] */ // Shortest string "/float1"
      new Table(45, 1, -1, new short[] {1752}),
/* NxS[1751] */ // Shortest string "/float2"
      new Table(45, 43, -1, new short[] {1752, -1, -1, -1, -1, -1, 
          -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, -1, 
          10, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          10, 10, 10, 10, 10}),
/* NxS[1752] */ // Shortest string "/float1x"
      new Table(48, 8, -1, new short[] {916, 916, 916, -1, -1, -1, 
          -1, 916}),
/* NxS[1753] */ // Shortest string "/floatto"
      new Table(30, 2, -1, new short[] {1754, 1755}),
/* NxS[1754] */ // Shortest string "/floattor"
      new Table(38, 1, -1, new short[] {1760}),
/* NxS[1755] */ // Shortest string "/floattoi"
      new Table(36, 1, -1, new short[] {1756}),
/* NxS[1756] */ // Shortest string "/floattoin"
      new Table(33, 1, -1, new short[] {1757}),
/* NxS[1757] */ // Shortest string "/floattoint"
      new Table(37, 1, -1, new short[] {1758}),
/* NxS[1758] */ // Shortest string "/floattointb"
      new Table(31, 1, -1, new short[] {1759}),
/* NxS[1759] */ // Shortest string "/floattointbi"
      new Table(33, 1, -1, new short[] {1305}),
/* NxS[1760] */ // Shortest string "/floattora"
      new Table(32, 1, -1, new short[] {1761}),
/* NxS[1761] */ // Shortest string "/floattoraw"
      new Table(31, 1, -1, new short[] {1755}),
/* NxS[1762] */ // Shortest string "/for"
      new Table(54, 43, -1, new short[] {15, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 15, 15, -1, 15, -1, -1, 15, 15, 15, 15, 15, 15, 
          15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1763}),
/* NxS[1763] */ // Shortest string "/forw"
      new Table(38, 1, -1, new short[] {1764}),
/* NxS[1764] */ // Shortest string "/forwa"
      new Table(30, 1, -1, new short[] {1765}),
/* NxS[1765] */ // Shortest string "/forwar"
      new Table(24, 1, -1, new short[] {1766}),
/* NxS[1766] */ // Shortest string "/forward"
      new Table(37, 2, -1, new short[] {994, 1767}),
/* NxS[1767] */ // Shortest string "/forwarda"
      new Table(24, 1, -1, new short[] {1768}),
/* NxS[1768] */ // Shortest string "/forwardad"
      new Table(24, 1, -1, new short[] {901}),
/* NxS[1769] */ // Shortest string "/so"
      new Table(29, 1, -1, new short[] {1915}),
/* NxS[1770] */ // Shortest string "/se"
      new Table(33, 8, -1, new short[] {1901, -1, -1, -1, -1, -1, 
          -1, 1902}),
/* NxS[1771] */ // Shortest string "/sr"
      new Table(34, 1, -1, new short[] {1897}),
/* NxS[1772] */ // Shortest string "/si"
      new Table(36, 7, -1, new short[] {1896, -1, -1, -1, -1, -1, 
          908}),
/* NxS[1773] */ // Shortest string "/sw"
      new Table(31, 1, -1, new short[] {1893}),
/* NxS[1774] */ // Shortest string "/st"
      new Table(26, 13, -1, new short[] {1876, -1, -1, -1, 1877, -1, 
          -1, -1, -1, -1, -1, -1, 1878}),
/* NxS[1775] */ // Shortest string "/sh"
      new Table(31, 8, -1, new short[] {1823, -1, -1, -1, -1, -1, 
          -1, 1824}),
/* NxS[1776] */ // Shortest string "/sa"
      new Table(33, 11, -1, new short[] {1804, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1805}),
/* NxS[1777] */ // Shortest string "/su"
      new Table(30, 8, -1, new short[] {1790, -1, -1, -1, -1, -1, 
          -1, 1791}),
/* NxS[1778] */ // Shortest string "/sp"
      new Table(25, 2, -1, new short[] {1012, 1786}),
/* NxS[1779] */ // Shortest string "/sm"
      new Table(25, 1, -1, new short[] {1780}),
/* NxS[1780] */ // Shortest string "/smo"
      new Table(25, 1, -1, new short[] {1781}),
/* NxS[1781] */ // Shortest string "/smoo"
      new Table(33, 1, -1, new short[] {1782}),
/* NxS[1782] */ // Shortest string "/smoot"
      new Table(35, 1, -1, new short[] {1783}),
/* NxS[1783] */ // Shortest string "/smooth"
      new Table(28, 1, -1, new short[] {1784}),
/* NxS[1784] */ // Shortest string "/smooths"
      new Table(33, 1, -1, new short[] {1785}),
/* NxS[1785] */ // Shortest string "/smoothst"
      new Table(26, 1, -1, new short[] {1477}),
/* NxS[1786] */ // Shortest string "/spe"
      new Table(34, 1, -1, new short[] {1787}),
/* NxS[1787] */ // Shortest string "/spec"
      new Table(39, 1, -1, new short[] {1788}),
/* NxS[1788] */ // Shortest string "/specu"
      new Table(27, 1, -1, new short[] {1789}),
/* NxS[1789] */ // Shortest string "/specul"
      new Table(38, 1, -1, new short[] {1502}),
/* NxS[1790] */ // Shortest string "/sur"
      new Table(29, 1, -1, new short[] {1796}),
/* NxS[1791] */ // Shortest string "/sub"
      new Table(28, 1, -1, new short[] {1792}),
/* NxS[1792] */ // Shortest string "/subs"
      new Table(35, 1, -1, new short[] {1793}),
/* NxS[1793] */ // Shortest string "/subsh"
      new Table(38, 1, -1, new short[] {1794}),
/* NxS[1794] */ // Shortest string "/subsha"
      new Table(24, 1, -1, new short[] {1795}),
/* NxS[1795] */ // Shortest string "/subshad"
      new Table(26, 1, -1, new short[] {1502}),
/* NxS[1796] */ // Shortest string "/surf"
      new Table(38, 1, -1, new short[] {1797}),
/* NxS[1797] */ // Shortest string "/surfa"
      new Table(34, 1, -1, new short[] {1798}),
/* NxS[1798] */ // Shortest string "/surfac"
      new Table(26, 1, -1, new short[] {1799}),
/* NxS[1799] */ // Shortest string "/surface"
      new Table(25, 1, -1, new short[] {1800}),
/* NxS[1800] */ // Shortest string "/surfaceo"
      new Table(39, 1, -1, new short[] {1801}),
/* NxS[1801] */ // Shortest string "/surfaceou"
      new Table(33, 1, -1, new short[] {1802}),
/* NxS[1802] */ // Shortest string "/surfaceout"
      new Table(40, 1, -1, new short[] {1803}),
/* NxS[1803] */ // Shortest string "/surfaceoutp"
      new Table(39, 1, -1, new short[] {1698}),
/* NxS[1804] */ // Shortest string "/sat"
      new Table(39, 1, -1, new short[] {1821}),
/* NxS[1805] */ // Shortest string "/sam"
      new Table(40, 1, -1, new short[] {1806}),
/* NxS[1806] */ // Shortest string "/samp"
      new Table(27, 1, -1, new short[] {1807}),
/* NxS[1807] */ // Shortest string "/sampl"
      new Table(26, 1, -1, new short[] {1808}),
/* NxS[1808] */ // Shortest string "/sample"
      new Table(54, 41, -1, new short[] {11, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 11, 11, -1, 11, -1, -1, 11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, -1, -1, -1, -1, 
          -1, -1, 1809}),
/* NxS[1809] */ // Shortest string "/sampler"
      new Table(24, 46, 10, new short[] {-1, -1, -1, -1, 1400, -1, 
          -1, -1, -1, -1, 1810, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1690, 1690, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 10, 10, -1, 10, -1, -1}),
/* NxS[1810] */ // Shortest string "/samplerc"
      new Table(25, 15, -1, new short[] {1811, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1812}),
/* NxS[1811] */ // Shortest string "/samplerco"
      new Table(43, 1, -1, new short[] {1814}),
/* NxS[1812] */ // Shortest string "/samplercu"
      new Table(37, 1, -1, new short[] {1813}),
/* NxS[1813] */ // Shortest string "/samplercub"
      new Table(26, 1, -1, new short[] {916}),
/* NxS[1814] */ // Shortest string "/samplercom"
      new Table(40, 1, -1, new short[] {1815}),
/* NxS[1815] */ // Shortest string "/samplercomp"
      new Table(38, 1, -1, new short[] {1816}),
/* NxS[1816] */ // Shortest string "/samplercompa"
      new Table(30, 1, -1, new short[] {1817}),
/* NxS[1817] */ // Shortest string "/samplercompar"
      new Table(31, 1, -1, new short[] {1818}),
/* NxS[1818] */ // Shortest string "/samplercompari"
      new Table(28, 1, -1, new short[] {1819}),
/* NxS[1819] */ // Shortest string "/samplercomparis"
      new Table(25, 1, -1, new short[] {1820}),
/* NxS[1820] */ // Shortest string "/samplercompariso"
      new Table(36, 1, -1, new short[] {1678}),
/* NxS[1821] */ // Shortest string "/satu"
      new Table(30, 1, -1, new short[] {1822}),
/* NxS[1822] */ // Shortest string "/satur"
      new Table(38, 1, -1, new short[] {970}),
/* NxS[1823] */ // Shortest string "/shi"
      new Table(36, 1, -1, new short[] {1873}),
/* NxS[1824] */ // Shortest string "/sha"
      new Table(24, 7, -1, new short[] {1825, -1, -1, -1, -1, -1, 
          1826}),
/* NxS[1825] */ // Shortest string "/shad"
      new Table(25, 2, -1, new short[] {1827, 1828}),
/* NxS[1826] */ // Shortest string "/shar"
      new Table(26, 1, -1, new short[] {953}),
/* NxS[1827] */ // Shortest string "/shado"
      new Table(32, 1, -1, new short[] {1864}),
/* NxS[1828] */ // Shortest string "/shade"
      new Table(30, 1, -1, new short[] {1829}),
/* NxS[1829] */ // Shortest string "/shader"
      new Table(54, 34, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, 1830, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}),
/* NxS[1830] */ // Shortest string "/shader_"
      new Table(38, 1, -1, new short[] {1831}),
/* NxS[1831] */ // Shortest string "/shader_a"
      new Table(40, 1, -1, new short[] {1832}),
/* NxS[1832] */ // Shortest string "/shader_ap"
      new Table(31, 1, -1, new short[] {1833}),
/* NxS[1833] */ // Shortest string "/shader_api"
      new Table(61, 1, -1, new short[] {1834}),
/* NxS[1834] */ // Shortest string "/shader_api_"
      new Table(24, 22, -1, new short[] {1835, 1836, -1, -1, -1, 1837, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1838, -1, 1839, 1840, -1, 1841}),
/* NxS[1835] */ // Shortest string "/shader_api_d"
      new Table(50, 1, -1, new short[] {1859}),
/* NxS[1836] */ // Shortest string "/shader_api_o"
      new Table(40, 1, -1, new short[] {1856}),
/* NxS[1837] */ // Shortest string "/shader_api_f"
      new Table(27, 1, -1, new short[] {1853}),
/* NxS[1838] */ // Shortest string "/shader_api_p"
      new Table(28, 1, -1, new short[] {1852}),
/* NxS[1839] */ // Shortest string "/shader_api_g"
      new Table(27, 1, -1, new short[] {1850}),
/* NxS[1840] */ // Shortest string "/shader_api_m"
      new Table(25, 1, -1, new short[] {1847}),
/* NxS[1841] */ // Shortest string "/shader_api_x"
      new Table(37, 1, -1, new short[] {1842}),
/* NxS[1842] */ // Shortest string "/shader_api_xb"
      new Table(25, 1, -1, new short[] {1843}),
/* NxS[1843] */ // Shortest string "/shader_api_xbo"
      new Table(45, 1, -1, new short[] {1844}),
/* NxS[1844] */ // Shortest string "/shader_api_xbox"
      new Table(50, 1, -1, new short[] {1845}),
/* NxS[1845] */ // Shortest string "/shader_api_xbox3"
      new Table(57, 1, -1, new short[] {1846}),
/* NxS[1846] */ // Shortest string "/shader_api_xbox36"
      new Table(52, 1, -1, new short[] {1013}),
/* NxS[1847] */ // Shortest string "/shader_api_mo"
      new Table(37, 1, -1, new short[] {1848}),
/* NxS[1848] */ // Shortest string "/shader_api_mob"
      new Table(31, 1, -1, new short[] {1849}),
/* NxS[1849] */ // Shortest string "/shader_api_mobi"
      new Table(27, 1, -1, new short[] {1017}),
/* NxS[1850] */ // Shortest string "/shader_api_gl"
      new Table(26, 1, -1, new short[] {1851}),
/* NxS[1851] */ // Shortest string "/shader_api_gle"
      new Table(28, 1, -1, new short[] {1013}),
/* NxS[1852] */ // Shortest string "/shader_api_ps"
      new Table(50, 1, -1, new short[] {1013}),
/* NxS[1853] */ // Shortest string "/shader_api_fl"
      new Table(38, 1, -1, new short[] {1854}),
/* NxS[1854] */ // Shortest string "/shader_api_fla"
      new Table(28, 1, -1, new short[] {1855}),
/* NxS[1855] */ // Shortest string "/shader_api_flas"
      new Table(35, 1, -1, new short[] {1013}),
/* NxS[1856] */ // Shortest string "/shader_api_op"
      new Table(26, 1, -1, new short[] {1857}),
/* NxS[1857] */ // Shortest string "/shader_api_ope"
      new Table(36, 1, -1, new short[] {1858}),
/* NxS[1858] */ // Shortest string "/shader_api_open"
      new Table(42, 1, -1, new short[] {1114}),
/* NxS[1859] */ // Shortest string "/shader_api_d3"
      new Table(24, 1, -1, new short[] {1860}),
/* NxS[1860] */ // Shortest string "/shader_api_d3d"
      new Table(48, 13, -1, new short[] {1861, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1013}),
/* NxS[1861] */ // Shortest string "/shader_api_d3d1"
      new Table(48, 1, -1, new short[] {1862}),
/* NxS[1862] */ // Shortest string "/shader_api_d3d11"
      new Table(54, 34, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, 1863, -1, -1, 13, 13, -1, 13, -1, -1, 13, 13, 13, 13, 13, 13, 
          13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13}),
/* NxS[1863] */ // Shortest string "/shader_api_d3d11_"
      new Table(60, 1, -1, new short[] {1533}),
/* NxS[1864] */ // Shortest string "/shadow"
      new Table(34, 1, -1, new short[] {1865}),
/* NxS[1865] */ // Shortest string "/shadowc"
      new Table(25, 14, -1, new short[] {1866, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1867}),
/* NxS[1866] */ // Shortest string "/shadowco"
      new Table(27, 1, -1, new short[] {1869}),
/* NxS[1867] */ // Shortest string "/shadowca"
      new Table(28, 1, -1, new short[] {1868}),
/* NxS[1868] */ // Shortest string "/shadowcas"
      new Table(33, 1, -1, new short[] {1795}),
/* NxS[1869] */ // Shortest string "/shadowcol"
      new Table(27, 1, -1, new short[] {1870}),
/* NxS[1870] */ // Shortest string "/shadowcoll"
      new Table(26, 1, -1, new short[] {1871}),
/* NxS[1871] */ // Shortest string "/shadowcolle"
      new Table(34, 1, -1, new short[] {1872}),
/* NxS[1872] */ // Shortest string "/shadowcollec"
      new Table(33, 1, -1, new short[] {1501}),
/* NxS[1873] */ // Shortest string "/shin"
      new Table(31, 1, -1, new short[] {1874}),
/* NxS[1874] */ // Shortest string "/shini"
      new Table(36, 1, -1, new short[] {1875}),
/* NxS[1875] */ // Shortest string "/shinin"
      new Table(26, 1, -1, new short[] {925}),
/* NxS[1876] */ // Shortest string "/ste"
      new Table(36, 5, -1, new short[] {1892, -1, -1, -1, 911}),
/* NxS[1877] */ // Shortest string "/str"
      new Table(31, 9, -1, new short[] {1887, -1, -1, -1, -1, -1, 
          -1, -1, 1888}),
/* NxS[1878] */ // Shortest string "/sta"
      new Table(33, 1, -1, new short[] {1879}),
/* NxS[1879] */ // Shortest string "/stat"
      new Table(26, 6, -1, new short[] {1880, -1, -1, -1, -1, 1881}),
/* NxS[1880] */ // Shortest string "/state"
      new Table(37, 1, -1, new short[] {1882}),
/* NxS[1881] */ // Shortest string "/stati"
      new Table(34, 1, -1, new short[] {938}),
/* NxS[1882] */ // Shortest string "/stateb"
      new Table(27, 1, -1, new short[] {1883}),
/* NxS[1883] */ // Shortest string "/statebl"
      new Table(25, 1, -1, new short[] {1884}),
/* NxS[1884] */ // Shortest string "/stateblo"
      new Table(34, 1, -1, new short[] {1885}),
/* NxS[1885] */ // Shortest string "/statebloc"
      new Table(47, 1, -1, new short[] {1886}),
/* NxS[1886] */ // Shortest string "/stateblock"
      new Table(54, 39, -1, new short[] {11, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 11, 11, -1, 11, -1, -1, 11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, -1, -1, -1, -1, 
          1400}),
/* NxS[1887] */ // Shortest string "/stri"
      new Table(36, 1, -1, new short[] {1891}),
/* NxS[1888] */ // Shortest string "/stru"
      new Table(34, 1, -1, new short[] {1889}),
/* NxS[1889] */ // Shortest string "/struc"
      new Table(33, 1, -1, new short[] {1890}),
/* NxS[1890] */ // Shortest string "/struct"
      new Table(24, 46, 11, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1322, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 11, 11, -1, 11, -1, -1}),
/* NxS[1891] */ // Shortest string "/strin"
      new Table(42, 1, -1, new short[] {916}),
/* NxS[1892] */ // Shortest string "/sten"
      new Table(34, 1, -1, new short[] {905}),
/* NxS[1893] */ // Shortest string "/swi"
      new Table(33, 1, -1, new short[] {1894}),
/* NxS[1894] */ // Shortest string "/swit"
      new Table(34, 1, -1, new short[] {1895}),
/* NxS[1895] */ // Shortest string "/switc"
      new Table(35, 1, -1, new short[] {1621}),
/* NxS[1896] */ // Shortest string "/sin"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1303, 911, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 911}),
/* NxS[1897] */ // Shortest string "/dst"
      new Table(34, 5, -1, new short[] {1499, -1, -1, -1, 1898}),
/* NxS[1898] */ // Shortest string "/dsta"
      new Table(27, 1, -1, new short[] {1899}),
/* NxS[1899] */ // Shortest string "/dstal"
      new Table(40, 1, -1, new short[] {1900}),
/* NxS[1900] */ // Shortest string "/dstalp"
      new Table(35, 1, -1, new short[] {987}),
/* NxS[1901] */ // Shortest string "/set"
      new Table(33, 1, -1, new short[] {1910}),
/* NxS[1902] */ // Shortest string "/sep"
      new Table(38, 1, -1, new short[] {1903}),
/* NxS[1903] */ // Shortest string "/sepa"
      new Table(30, 1, -1, new short[] {1904}),
/* NxS[1904] */ // Shortest string "/separ"
      new Table(38, 1, -1, new short[] {1905}),
/* NxS[1905] */ // Shortest string "/separa"
      new Table(33, 1, -1, new short[] {1906}),
/* NxS[1906] */ // Shortest string "/separat"
      new Table(26, 1, -1, new short[] {1907}),
/* NxS[1907] */ // Shortest string "/separate"
      new Table(28, 1, -1, new short[] {1908}),
/* NxS[1908] */ // Shortest string "/separates"
      new Table(40, 1, -1, new short[] {1909}),
/* NxS[1909] */ // Shortest string "/separatesp"
      new Table(26, 1, -1, new short[] {1786}),
/* NxS[1910] */ // Shortest string "/sett"
      new Table(26, 1, -1, new short[] {1911}),
/* NxS[1911] */ // Shortest string "/sette"
      new Table(45, 1, -1, new short[] {1912}),
/* NxS[1912] */ // Shortest string "/settex"
      new Table(33, 1, -1, new short[] {1913}),
/* NxS[1913] */ // Shortest string "/settext"
      new Table(39, 1, -1, new short[] {1914}),
/* NxS[1914] */ // Shortest string "/settextu"
      new Table(30, 1, -1, new short[] {904}),
/* NxS[1915] */ // Shortest string "/sof"
      new Table(33, 1, -1, new short[] {1916}),
/* NxS[1916] */ // Shortest string "/soft"
      new Table(41, 1, -1, new short[] {1917}),
/* NxS[1917] */ // Shortest string "/softv"
      new Table(26, 1, -1, new short[] {1918}),
/* NxS[1918] */ // Shortest string "/softve"
      new Table(42, 1, -1, new short[] {1919}),
/* NxS[1919] */ // Shortest string "/softveg"
      new Table(26, 1, -1, new short[] {1920}),
/* NxS[1920] */ // Shortest string "/softvege"
      new Table(33, 1, -1, new short[] {1921}),
/* NxS[1921] */ // Shortest string "/softveget"
      new Table(38, 1, -1, new short[] {1922}),
/* NxS[1922] */ // Shortest string "/softvegeta"
      new Table(33, 1, -1, new short[] {1923}),
/* NxS[1923] */ // Shortest string "/emiss"
      new Table(31, 1, -1, new short[] {1924}),
/* NxS[1924] */ // Shortest string "/emissi"
      new Table(25, 1, -1, new short[] {1925}),
/* NxS[1925] */ // Shortest string "/emissio"
      new Table(36, 1, -1, new short[] {901}),
/* NxS[1926] */ // Shortest string "/ld"
      new Table(26, 1, -1, new short[] {1744}),
/* NxS[1927] */ // Shortest string "/lo"
      new Table(24, 19, -1, new short[] {901, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1940}),
/* NxS[1928] */ // Shortest string "/le"
      new Table(30, 7, -1, new short[] {1477, -1, -1, -1, -1, -1, 
          1939}),
/* NxS[1929] */ // Shortest string "/li"
      new Table(33, 10, -1, new short[] {911, -1, -1, 1930, -1, -1, 
          -1, -1, -1, 1931}),
/* NxS[1930] */ // Shortest string "/lin"
      new Table(26, 1, -1, new short[] {1937}),
/* NxS[1931] */ // Shortest string "/lig"
      new Table(35, 1, -1, new short[] {1932}),
/* NxS[1932] */ // Shortest string "/ligh"
      new Table(33, 1, -1, new short[] {1933}),
/* NxS[1933] */ // Shortest string "/light"
      new Table(31, 13, -1, new short[] {1934, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1935}),
/* NxS[1934] */ // Shortest string "/lighti"
      new Table(36, 1, -1, new short[] {1936}),
/* NxS[1935] */ // Shortest string "/lightm"
      new Table(25, 1, -1, new short[] {1642}),
/* NxS[1936] */ // Shortest string "/endc"
      new Table(42, 1, -1, new short[] {901}),
/* NxS[1937] */ // Shortest string "/line"
      new Table(24, 46, 10, new short[] {-1, -1, -1, -1, 1006, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1938, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 10, 10, -1, 10, -1, -1}),
/* NxS[1938] */ // Shortest string "/linea"
      new Table(24, 7, -1, new short[] {1540, -1, -1, -1, -1, -1, 
          938}),
/* NxS[1939] */ // Shortest string "/len"
      new Table(42, 1, -1, new short[] {1737}),
/* NxS[1940] */ // Shortest string "/log"
      new Table(20, 35, -1, new short[] {9, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1941, 911, -1, -1, -1, -1, 911}),
/* NxS[1941] */ // Shortest string "/log1"
      new Table(52, 1, -1, new short[] {911}),
/* NxS[1942] */ // Shortest string "/el"
      new Table(28, 4, -1, new short[] {1620, -1, -1, 1658}),
/* NxS[1943] */ // Shortest string "/en"
      new Table(24, 1, -1, new short[] {1949}),
/* NxS[1944] */ // Shortest string "/em"
      new Table(31, 1, -1, new short[] {1947}),
/* NxS[1945] */ // Shortest string "/ex"
      new Table(33, 8, -1, new short[] {1946, -1, -1, -1, -1, -1, 
          -1, 1346}),
/* NxS[1946] */ // Shortest string "/ext"
      new Table(26, 1, -1, new short[] {1716}),
/* NxS[1947] */ // Shortest string "/emi"
      new Table(28, 1, -1, new short[] {1948}),
/* NxS[1948] */ // Shortest string "/emis"
      new Table(28, 1, -1, new short[] {1923}),
/* NxS[1949] */ // Shortest string "/end"
      new Table(31, 4, -1, new short[] {1658, -1, -1, 1936}),
/* NxS[1950] */ // Shortest string "/of"
      new Table(29, 1, -1, new short[] {1963}),
/* NxS[1951] */ // Shortest string "/on"
      new Table(26, 1, -1, new short[] {1954}),
/* NxS[1952] */ // Shortest string "/ou"
      new Table(33, 1, -1, new short[] {1953}),
/* NxS[1953] */ // Shortest string "/out"
      new Table(24, 46, 11, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1634, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 11, 11, -1, 11, -1, -1}),
/* NxS[1954] */ // Shortest string "/one"
      new Table(43, 1, -1, new short[] {1955}),
/* NxS[1955] */ // Shortest string "/onem"
      new Table(31, 1, -1, new short[] {1956}),
/* NxS[1956] */ // Shortest string "/onemi"
      new Table(36, 1, -1, new short[] {1957}),
/* NxS[1957] */ // Shortest string "/onemin"
      new Table(39, 1, -1, new short[] {1958}),
/* NxS[1958] */ // Shortest string "/oneminu"
      new Table(28, 1, -1, new short[] {1959}),
/* NxS[1959] */ // Shortest string "/oneminus"
      new Table(24, 5, -1, new short[] {1960, -1, -1, -1, 1961}),
/* NxS[1960] */ // Shortest string "/oneminusd"
      new Table(28, 1, -1, new short[] {1962}),
/* NxS[1961] */ // Shortest string "/oneminuss"
      new Table(30, 1, -1, new short[] {1771}),
/* NxS[1962] */ // Shortest string "/ds"
      new Table(33, 1, -1, new short[] {1897}),
/* NxS[1963] */ // Shortest string "/off"
      new Table(28, 1, -1, new short[] {1964}),
/* NxS[1964] */ // Shortest string "/offs"
      new Table(26, 1, -1, new short[] {900}),
/* NxS[1965] */ // Shortest string "/dd"
      new Table(44, 2, -1, new short[] {911, 911}),
/* NxS[1966] */ // Shortest string "/do"
      new Table(24, 46, 15, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 911, -1, -1, -1, -1, -1, 2013, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 15, 15, -1, 15, -1, -1}),
/* NxS[1967] */ // Shortest string "/de"
      new Table(29, 14, -1, new short[] {1987, -1, -1, -1, 1988, -1, 
          -1, 1989, -1, -1, -1, 1990, -1, 1991}),
/* NxS[1968] */ // Shortest string "/di"
      new Table(28, 3, -1, new short[] {1969, 1970, 1971}),
/* NxS[1969] */ // Shortest string "/dis"
      new Table(33, 2, -1, new short[] {1982, 1983}),
/* NxS[1970] */ // Shortest string "/dif"
      new Table(29, 1, -1, new short[] {1981}),
/* NxS[1971] */ // Shortest string "/dir"
      new Table(26, 1, -1, new short[] {1972}),
/* NxS[1972] */ // Shortest string "/dire"
      new Table(34, 1, -1, new short[] {1973}),
/* NxS[1973] */ // Shortest string "/direc"
      new Table(33, 1, -1, new short[] {1974}),
/* NxS[1974] */ // Shortest string "/direct"
      new Table(31, 1, -1, new short[] {1975}),
/* NxS[1975] */ // Shortest string "/directi"
      new Table(25, 1, -1, new short[] {1976}),
/* NxS[1976] */ // Shortest string "/directio"
      new Table(36, 1, -1, new short[] {1977}),
/* NxS[1977] */ // Shortest string "/direction"
      new Table(38, 1, -1, new short[] {1978}),
/* NxS[1978] */ // Shortest string "/directiona"
      new Table(27, 1, -1, new short[] {1979}),
/* NxS[1979] */ // Shortest string "/directional"
      new Table(54, 34, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, 1980, -1, -1, 13, 13, -1, 13, -1, -1, 13, 13, 13, 13, 13, 13, 
          13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13}),
/* NxS[1980] */ // Shortest string "/directional_"
      new Table(34, 1, -1, new short[] {1008}),
/* NxS[1981] */ // Shortest string "/diff"
      new Table(39, 1, -1, new short[] {995}),
/* NxS[1982] */ // Shortest string "/dist"
      new Table(38, 1, -1, new short[] {1985}),
/* NxS[1983] */ // Shortest string "/disc"
      new Table(38, 1, -1, new short[] {1984}),
/* NxS[1984] */ // Shortest string "/disca"
      new Table(30, 1, -1, new short[] {953}),
/* NxS[1985] */ // Shortest string "/dista"
      new Table(36, 1, -1, new short[] {1986}),
/* NxS[1986] */ // Shortest string "/distan"
      new Table(34, 1, -1, new short[] {971}),
/* NxS[1987] */ // Shortest string "/def"
      new Table(31, 1, -1, new short[] {2010}),
/* NxS[1988] */ // Shortest string "/det"
      new Table(26, 1, -1, new short[] {2005}),
/* NxS[1989] */ // Shortest string "/den"
      new Table(28, 1, -1, new short[] {2003}),
/* NxS[1990] */ // Shortest string "/dep"
      new Table(33, 1, -1, new short[] {1994}),
/* NxS[1991] */ // Shortest string "/deg"
      new Table(30, 1, -1, new short[] {1992}),
/* NxS[1992] */ // Shortest string "/degr"
      new Table(26, 1, -1, new short[] {1993}),
/* NxS[1993] */ // Shortest string "/degre"
      new Table(26, 1, -1, new short[] {1305}),
/* NxS[1994] */ // Shortest string "/dept"
      new Table(35, 1, -1, new short[] {1995}),
/* NxS[1995] */ // Shortest string "/depth"
      new Table(28, 1, -1, new short[] {1996}),
/* NxS[1996] */ // Shortest string "/depths"
      new Table(33, 1, -1, new short[] {1997}),
/* NxS[1997] */ // Shortest string "/depthst"
      new Table(26, 1, -1, new short[] {1998}),
/* NxS[1998] */ // Shortest string "/depthste"
      new Table(36, 1, -1, new short[] {1999}),
/* NxS[1999] */ // Shortest string "/depthsten"
      new Table(34, 1, -1, new short[] {2000}),
/* NxS[2000] */ // Shortest string "/depthstenc"
      new Table(31, 1, -1, new short[] {2001}),
/* NxS[2001] */ // Shortest string "/depthstenci"
      new Table(27, 1, -1, new short[] {2002}),
/* NxS[2002] */ // Shortest string "/depthstencil"
      new Table(28, 14, -1, new short[] {1400, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1713}),
/* NxS[2003] */ // Shortest string "/dens"
      new Table(31, 1, -1, new short[] {2004}),
/* NxS[2004] */ // Shortest string "/densi"
      new Table(33, 1, -1, new short[] {1464}),
/* NxS[2005] */ // Shortest string "/dete"
      new Table(30, 1, -1, new short[] {2006}),
/* NxS[2006] */ // Shortest string "/deter"
      new Table(43, 1, -1, new short[] {2007}),
/* NxS[2007] */ // Shortest string "/determ"
      new Table(31, 1, -1, new short[] {2008}),
/* NxS[2008] */ // Shortest string "/determi"
      new Table(36, 1, -1, new short[] {2009}),
/* NxS[2009] */ // Shortest string "/determin"
      new Table(38, 1, -1, new short[] {1377}),
/* NxS[2010] */ // Shortest string "/defi"
      new Table(36, 1, -1, new short[] {2011}),
/* NxS[2011] */ // Shortest string "/defin"
      new Table(26, 1, -1, new short[] {2012}),
/* NxS[2012] */ // Shortest string "/define"
      new Table(54, 35, -1, new short[] {15, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 15, 15, -1, 15, -1, -1, 15, 15, 15, 15, 15, 15, 
          15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1621}),
/* NxS[2013] */ // Shortest string "/dou"
      new Table(37, 1, -1, new short[] {2014}),
/* NxS[2014] */ // Shortest string "/doub"
      new Table(27, 1, -1, new short[] {2015}),
/* NxS[2015] */ // Shortest string "/doubl"
      new Table(26, 1, -1, new short[] {2016}),
/* NxS[2016] */ // Shortest string "/double"
      new Table(49, 39, -1, new short[] {916, 916, -1, -1, -1, 8, 
          916, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
          7}),
/* NxS[2017] */ // Shortest string "\"\\"
      new Table(0, 1, 22, new short[] {-1}),
/* NxS[2018] */ // Shortest string "/*"
      new Table(3, 1, 2018, new short[] {2019}),
/* NxS[2019] */ // Shortest string "/**"
      new Table(1, 3, 2018, new short[] {18, 2018, 2019}),
/* NxS[2020] */ new Table(0, 0, -1, null), // Shortest string ""
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = MapC(code) - NxS[state].min;
            if (idx < 0) idx += 64;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '{white_space}',	Shortest string "\t"
/* Ignore */
            break;
        case 2: // Recognized ':({blank})*{HLSLCGSpecialKeyWords}({white_space}|{symbol})',	Shortest string ":fog/"
return (int)ShaderlabToken.HLSLCGKEYWORDSPECIAL;
            break;
        case 3: // Recognized '({white_space}|{symbol})#{white_space}*({UNITYBuiltinKeywords}|{HLSLCGBlockKeyWords})({blank}+{words}|{symbol}+)*{white_space}',	Shortest string "/#do\t"
        case 4: // Recognized '({white_space}|{symbol})#{white_space}*({UNITYBuiltinKeywords}|{HLSLCGBlockKeyWords})({blank}+{words}|{symbol}+)*{white_space}',	Shortest string "/#do\x20"
return (int)ShaderlabToken.UNITYKEYWORD_PARA;
            break;
        case 5: // Recognized '({white_space}|{symbol}){UNITYBuiltinValues}({white_space}|{symbol})',	Shortest string "/_time/"
return (int)ShaderlabToken.UNITYVALUES;
            break;
        case 6: // Recognized '({white_space}|{symbol}){UNITYBuiltinDataTypes}({white_space}|{symbol})',	Shortest string "/2d/"
return (int)ShaderlabToken.UNITYDATATYPE;
            break;
        case 7: // Recognized '({white_space}|{symbol}){UNITYBuiltinKeywords}{blank}*({white_space}|{symbol})',	Shortest string "/lod/"
        case 8: // Recognized '({white_space}|{symbol}){UNITYBuiltinKeywords}{blank}*({white_space}|{symbol})',	Shortest string "/lod\x20"
return (int)ShaderlabToken.UNITYKEYWORD;
            break;
        case 9: // Recognized '({white_space}|{symbol}){HLSLCGFunctions}{blank}*\(',	Shortest string "/ddy("
return (int)ShaderlabToken.HLSLCGFUNCTION;
            break;
        case 10: // Recognized '({white_space}|{symbol}){HLSLCGDatatypes}({white_space}|{symbol})',	Shortest string "/int/"
return (int)ShaderlabToken.HLSLCGDATATYPE;
            break;
        case 11: // Recognized '({white_space}|{symbol}){HLSLCGNonBlockKeyWords}({white_space}|{symbol})',	Shortest string "/in/"
        case 12: // Recognized '({white_space}|{symbol}){HLSLCGNonBlockKeyWords}({white_space}|{symbol})',	Shortest string "/pass\x20"
return (int)ShaderlabToken.HLSLCGKEYWORD;
            break;
        case 13: // Recognized '({white_space}|{symbol}){UNITYBuiltinMacros}({white_space}|{symbol})',	Shortest string "/spot/"
return (int)ShaderlabToken.UNITYMACROS;
            break;
        case 14: // Recognized '({white_space}|{symbol}){UNITYBuiltinFunctions}{blank}*\(',	Shortest string "/unpacknormal("
return (int)ShaderlabToken.UNITYFUNCTION;
            break;
        case 15: // Recognized '({white_space}|{symbol}){HLSLCGBlockKeyWords}({white_space}|{symbol})',	Shortest string "/do/"
return (int)ShaderlabToken.HLSLCGKEYWORD;
            break;
        case 16: // Recognized '\"(\\.|[^\\"])*\"',	Shortest string "\"\""
return (int)ShaderlabToken.STRING_LITERAL;
            break;
        case 17: // Recognized '{singleLineComment}',	Shortest string "//"
return (int)ShaderlabToken.COMMENT;
            break;
        case 18: // Recognized '{multiLineComment}',	Shortest string "/**/"
return (int)ShaderlabToken.COMMENT;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner

// ==============================================================
// <auto-generated>
// This code automatically produced from an embedded resource.
// Do not edit this file, or it will become incompatible with 
// the specification from which it was generated.
// </auto-generated>
// ==============================================================

// Code copied from GPLEX embedded resource
    [Serializable]
    public class BufferException : Exception
    {
        public BufferException() { }
        public BufferException(string message) : base(message) { }
        public BufferException(string message, Exception innerException)
            : base(message, innerException) { }
        protected BufferException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }

    public abstract class ScanBuff
    {
        private string fileNm;

        public const int EndOfFile = -1;
        public const int UnicodeReplacementChar = 0xFFFD;

        public bool IsFile { get { return (fileNm != null); } }
        public string FileName { get { return fileNm; } set { fileNm = value; } }

        public abstract int Pos { get; set; }
        public abstract int Read();
        public virtual void Mark() { }

        public abstract string GetString(int begin, int limit);

        public static ScanBuff GetBuffer(string source)
        {
            return new StringBuffer(source);
        }

        public static ScanBuff GetBuffer(IList<string> source)
        {
            return new LineBuffer(source);
        }

#if (!NOFILES)
        public static ScanBuff GetBuffer(Stream source)
        {
            return new BuildBuffer(source);
        }

#if (!BYTEMODE)
        public static ScanBuff GetBuffer(Stream source, int fallbackCodePage)
        {
            return new BuildBuffer(source, fallbackCodePage);
        }
#endif // !BYTEMODE
#endif // !NOFILES
    }

    #region Buffer classes

    // ==============================================================
    // =====  Definitions for various ScanBuff derived classes   ====
    // ==============================================================
    // ===============         String input          ================
    // ==============================================================

    /// <summary>
    /// This class reads characters from a single string as
    /// required, for example, by Visual Studio language services
    /// </summary>
    sealed class StringBuffer : ScanBuff
    {
        string str;        // input buffer
        int bPos;          // current position in buffer
        int sLen;

        public StringBuffer(string source)
        {
            this.str = source;
            this.sLen = source.Length;
            this.FileName = null;
        }

        public override int Read()
        {
            if (bPos < sLen) return str[bPos++];
            else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see new line
            else { bPos++; return EndOfFile; }                // two strikes and you're out!
        }

        public override string GetString(int begin, int limit)
        {
            //  "limit" can be greater than sLen with the BABEL
            //  option set.  Read returns a "virtual" EOL if
            //  an attempt is made to read past the end of the
            //  string buffer.  Without the guard any attempt 
            //  to fetch yytext for a token that includes the 
            //  EOL will throw an index exception.
            if (limit > sLen) limit = sLen;
            if (limit <= begin) return "";
            else return str.Substring(begin, limit - begin);
        }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }

        public override string ToString() { return "StringBuffer"; }
    }

    // ==============================================================
    //  The LineBuff class contributed by Nigel Horspool, 
    //  nigelh@cs.uvic.cs
    // ==============================================================

    sealed class LineBuffer : ScanBuff
    {
        IList<string> line;    // list of source lines from a file
        int numLines;          // number of strings in line list
        string curLine;        // current line in that list
        int cLine;             // index of current line in the list
        int curLen;            // length of current line
        int curLineStart;      // position of line start in whole file
        int curLineEnd;        // position of line end in whole file
        int maxPos;            // max position ever visited in whole file
        int cPos;              // ordinal number of code in source

        // Constructed from a list of strings, one per source line.
        // The lines have had trailing '\n' characters removed.
        public LineBuffer(IList<string> lineList)
        {
            line = lineList;
            numLines = line.Count;
            cPos = curLineStart = 0;
            curLine = (numLines > 0 ? line[0] : "");
            maxPos = curLineEnd = curLen = curLine.Length;
            cLine = 1;
            FileName = null;
        }

        public override int Read()
        {
            if (cPos < curLineEnd)
                return curLine[cPos++ - curLineStart];
            if (cPos++ == curLineEnd)
                return '\n';
            if (cLine >= numLines)
                return EndOfFile;
            curLine = line[cLine];
            curLen = curLine.Length;
            curLineStart = curLineEnd + 1;
            curLineEnd = curLineStart + curLen;
            if (curLineEnd > maxPos)
                maxPos = curLineEnd;
            cLine++;
            return curLen > 0 ? curLine[0] : '\n';
        }

        // To speed up searches for the line containing a position
        private int cachedPosition;
        private int cachedIxdex;
        private int cachedLineStart;

        // Given a position pos within the entire source, the results are
        //   ix     -- the index of the containing line
        //   lstart -- the position of the first character on that line
        private void findIndex(int pos, out int ix, out int lstart)
        {
            if (pos >= cachedPosition)
            {
                ix = cachedIxdex; lstart = cachedLineStart;
            }
            else
            {
                ix = lstart = 0;
            }
            while (ix < numLines)
            {
                int len = line[ix].Length + 1;
                if (pos < lstart + len) break;
                lstart += len;
                ix++;
            }
            cachedPosition = pos;
            cachedIxdex = ix;
            cachedLineStart = lstart;
        }

        public override string GetString(int begin, int limit)
        {
            if (begin >= maxPos || limit <= begin) return "";
            int endIx, begIx, endLineStart, begLineStart;
            findIndex(begin, out begIx, out begLineStart);
            int begCol = begin - begLineStart;
            findIndex(limit, out endIx, out endLineStart);
            int endCol = limit - endLineStart;
            string s = line[begIx];
            if (begIx == endIx)
            {
                // the usual case, substring all on one line
                return (endCol <= s.Length) ?
                    s.Substring(begCol, endCol - begCol)
                    : s.Substring(begCol) + "\n";
            }
            // the string spans multiple lines, yuk!
            StringBuilder sb = new StringBuilder();
            if (begCol < s.Length)
                sb.Append(s.Substring(begCol));
            for (; ; )
            {
                sb.Append("\n");
                s = line[++begIx];
                if (begIx >= endIx) break;
                sb.Append(s);
            }
            if (endCol <= s.Length)
            {
                sb.Append(s.Substring(0, endCol));
            }
            else
            {
                sb.Append(s);
                sb.Append("\n");
            }
            return sb.ToString();
        }

        public override int Pos
        {
            get { return cPos; }
            set
            {
                cPos = value;
                findIndex(cPos, out cLine, out curLineStart);
                // cLine should be the *next* line after curLine.
                curLine = (cLine < numLines ? line[cLine++] : "");
                curLineEnd = curLineStart + curLine.Length;
            }
        }

        public override string ToString() { return "LineBuffer"; }
    }

#if (!NOFILES)
    // ==============================================================
    // =====     class BuildBuff : for unicode text files    ========
    // ==============================================================

    class BuildBuffer : ScanBuff
    {
        // Double buffer for char stream.
        class BufferElement
        {
            StringBuilder bldr = new StringBuilder();
            StringBuilder next = new StringBuilder();
            int minIx;
            int maxIx;
            int brkIx;
            bool appendToNext;

            internal BufferElement() { }

            internal int MaxIndex { get { return maxIx; } }
            // internal int MinIndex { get { return minIx; } }

            internal char this[int index]
            {
                get
                {
                    if (index < minIx || index >= maxIx)
                        throw new BufferException("Index was outside data buffer");
                    else if (index < brkIx)
                        return bldr[index - minIx];
                    else
                        return next[index - brkIx];
                }
            }

            internal void Append(char[] block, int count)
            {
                maxIx += count;
                if (appendToNext)
                    this.next.Append(block, 0, count);
                else
                {
                    this.bldr.Append(block, 0, count);
                    brkIx = maxIx;
                    appendToNext = true;
                }
            }

            internal string GetString(int start, int limit)
            {
                if (limit <= start)
                    return "";
                if (start >= minIx && limit <= maxIx)
                    if (limit < brkIx) // String entirely in bldr builder
                        return bldr.ToString(start - minIx, limit - start);
                    else if (start >= brkIx) // String entirely in next builder
                        return next.ToString(start - brkIx, limit - start);
                    else // Must do a string-concatenation
                        return
                            bldr.ToString(start - minIx, brkIx - start) +
                            next.ToString(0, limit - brkIx);
                else
                    throw new BufferException("String was outside data buffer");
            }

            internal void Mark(int limit)
            {
                if (limit > brkIx + 16) // Rotate blocks
                {
                    StringBuilder temp = bldr;
                    bldr = next;
                    next = temp;
                    next.Length = 0;
                    minIx = brkIx;
                    brkIx = maxIx;
                }
            }
        }

        BufferElement data = new BufferElement();

        int bPos;            // Postion index in the StringBuilder
        BlockReader NextBlk; // Delegate that serves char-arrays;

        private string EncodingName
        {
            get
            {
                StreamReader rdr = NextBlk.Target as StreamReader;
                return (rdr == null ? "raw-bytes" : rdr.CurrentEncoding.BodyName);
            }
        }

        public BuildBuffer(Stream stream)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Raw(stream);
        }

#if (!BYTEMODE)
        public BuildBuffer(Stream stream, int fallbackCodePage)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Get(stream, fallbackCodePage);
        }
#endif

        /// <summary>
        /// Marks a conservative lower bound for the buffer,
        /// allowing space to be reclaimed.  If an application 
        /// needs to call GetString at arbitrary past locations 
        /// in the input stream, Mark() is not called.
        /// </summary>
        public override void Mark() { data.Mark(bPos - 2); }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }


        /// <summary>
        /// Read returns the ordinal number of the next char, or 
        /// EOF (-1) for an end of stream.  Note that the next
        /// code point may require *two* calls of Read().
        /// </summary>
        /// <returns></returns>
        public override int Read()
        {
            //
            //  Characters at positions 
            //  [data.offset, data.offset + data.bldr.Length)
            //  are available in data.bldr.
            //
            if (bPos < data.MaxIndex)
            {
                // ch0 cannot be EOF
                return (int)data[bPos++];
            }
            else // Read from underlying stream
            {
                // Experimental code, blocks of page size
                char[] chrs = new char[4096];
                int count = NextBlk(chrs, 0, 4096);
                if (count == 0)
                    return EndOfFile;
                else
                {
                    data.Append(chrs, count);
                    return (int)data[bPos++];
                }
            }
        }

        public override string GetString(int begin, int limit)
        {
            return data.GetString(begin, limit);
        }

        public override string ToString()
        {
            return "StringBuilder buffer, encoding: " + this.EncodingName;
        }
    }

    // =============== End ScanBuff-derived classes ==================

    public delegate int BlockReader(char[] block, int index, int number);

    // A delegate factory, serving up a delegate that
    // reads a block of characters from the underlying
    // encoded stream, via a StreamReader object.
    //
    public static class BlockReaderFactory
    {
        public static BlockReader Raw(Stream stream)
        {
            return delegate(char[] block, int index, int number)
            {
                byte[] b = new byte[number];
                int count = stream.Read(b, 0, number);
                int i = 0;
                int j = index;
                for (; i < count; i++, j++)
                    block[j] = (char)b[i];
                return count;
            };
        }

#if (!BYTEMODE)
        public static BlockReader Get(Stream stream, int fallbackCodePage)
        {
            Encoding encoding;
            int preamble = Preamble(stream);

            if (preamble != 0)  // There is a valid BOM here!
                encoding = Encoding.GetEncoding(preamble);
            else if (fallbackCodePage == -1) // Fallback is "raw" bytes
                return Raw(stream);
            else if (fallbackCodePage != -2) // Anything but "guess"
                encoding = Encoding.GetEncoding(fallbackCodePage);
            else // This is the "guess" option
            {
                int guess = new Guesser(stream).GuessCodePage();
                stream.Seek(0, SeekOrigin.Begin);
                if (guess == -1) // ==> this is a 7-bit file
                    encoding = Encoding.ASCII;
                else if (guess == 65001)
                    encoding = Encoding.UTF8;
                else             // ==> use the machine default
                    encoding = Encoding.Default;
            }
            StreamReader reader = new StreamReader(stream, encoding);
            return reader.Read;
        }

        static int Preamble(Stream stream)
        {
            int b0 = stream.ReadByte();
            int b1 = stream.ReadByte();

            if (b0 == 0xfe && b1 == 0xff)
                return 1201; // UTF16BE
            if (b0 == 0xff && b1 == 0xfe)
                return 1200; // UTF16LE

            int b2 = stream.ReadByte();
            if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                return 65001; // UTF8
            //
            // There is no unicode preamble, so we
            // return denoter for the machine default.
            //
            stream.Seek(0, SeekOrigin.Begin);
            return 0;
        }
#endif // !BYTEMODE
    }
#endif // !NOFILES
    #endregion Buffer classes

    // ==============================================================
    // ============      class CodePageHandling         =============
    // ==============================================================
#if (!NOFILES)
    public static class CodePageHandling
    {
        public static int GetCodePage(string option)
        {
            string command = option.ToUpperInvariant();
            if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
                command = command.Substring(9);
            try
            {
                if (command.Equals("RAW"))
                    return -1;
                else if (command.Equals("GUESS"))
                    return -2;
                else if (command.Equals("DEFAULT"))
                    return 0;
                else if (char.IsDigit(command[0]))
                    return int.Parse(command, CultureInfo.InvariantCulture);
                else
                {
                    Encoding enc = Encoding.GetEncoding(command);
                    return enc.CodePage;
                }
            }
            catch (FormatException)
            {
                Console.Error.WriteLine(
                    "Invalid format \"{0}\", using machine default", option);
            }
            catch (ArgumentException)
            {
                Console.Error.WriteLine(
                    "Unknown code page \"{0}\", using machine default", option);
            }
            return 0;
        }
    }
#region guesser
#if (!BYTEMODE)
    // ==============================================================
    // ============          Encoding Guesser           =============
    // ==============================================================

    /// <summary>
    /// This class provides a simple finite state automaton that
    /// scans the file looking for (1) valid UTF-8 byte patterns,
    /// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
    /// The method then guesses whether it is UTF-8 or maybe some 
    /// local machine default encoding.  This works well for the
    /// various Latin encodings.
    /// </summary>
    internal class Guesser
    {
        ScanBuff buffer;

        public int GuessCodePage() { return Scan(); }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int EndToken = 0;

        #region user code
        /* 
         *  Reads the bytes of a file to determine if it is 
         *  UTF-8 or a single-byte code page file.
         */
        public long utfX;
        public long uppr;
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;

        #region ScannerTables
        static int[] startState = new int[] { 11, 0 };

        #region CharacterMap
        static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
        #endregion

        static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };


        [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        // Reason for suppression: cannot have self-reference in array initializer.
        static Guesser()
        {
            nextState[7] = nextState[2];
            nextState[9] = nextState[2];
            nextState[10] = nextState[2];
        }

        int NextState()
        {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                return nextState[state][map[code]];
        }
        #endregion

        public Guesser(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source)
        {
            this.buffer = new BuildBuffer(source);
            code = buffer.Read();
        }

        int Scan()
        {
            for (; ; )
            {
                int next;
                state = currentStart;
                while ((next = NextState()) == goStart)
                    code = buffer.Read();

                state = next;
                code = buffer.Read();

                while ((next = NextState()) > eofNum)
                {
                    state = next;
                    code = buffer.Read();
                }
                if (state <= maxAccept)
                {
                    #region ActionSwitch
#pragma warning disable 162
                    switch (state)
                    {
                        case eofNum:
                            switch (currentStart)
                            {
                                case 11:
                                    if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                                    else if (uppr * 10 > utfX) return 0;   /* default code page */
                                    else return 65001;                     /* UTF-8 encoding */
                                    break;
                            }
                            return EndToken;
                        case 1: // Recognized '{Upper128}',	Shortest string "\xC0"
                        case 2: // Recognized '{Upper128}',	Shortest string "\x80"
                        case 3: // Recognized '{Upper128}',	Shortest string "\xE0"
                        case 4: // Recognized '{Upper128}',	Shortest string "\xF0"
                            uppr++;
                            break;
                        case 5: // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                            uppr += 2;
                            break;
                        case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                            uppr += 3;
                            break;
                        case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                            utfX += 3;
                            break;
                        case 8: // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                            uppr += 2;
                            break;
                        case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                            utfX += 2;
                            break;
                        case 10: // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                            utfX++;
                            break;
                        default:
                            break;
                    }
#pragma warning restore 162
                    #endregion
                }
            }
        }
    } // end class Guesser
    
#endif // !BYTEMODE
#endregion
#endif // !NOFILES

// End of code copied from embedded resource

} // end namespace
