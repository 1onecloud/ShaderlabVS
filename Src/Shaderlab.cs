//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  ROCKYWM
//  DateTime: 2014/8/27 18:23:02
//  UserName: v-rockyl
//  GPLEX input file <Shaderlab.lex - 2014/8/27 18:22:55>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, noParser, noFiles, minimize
//  Option settings: classes, compressMap, compressNext, embedbuffers
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define LEFTANCHORS
#define STANDALONE
#define NOFILES
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;


namespace ShaderlabVS.Lexer
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 120;
        const int initial = 121;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int COMMENT = 1;

#region user code
/**********************************************************************************/
/********************************User Defined Code*********************************/
/**********************************************************************************/
public int NextToken() { return yylex(); }
     public int GetPos() { return yypos; }
     public int GetLength() { return yyleng; }
/********************************Rules Section*********************************/
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {121, 116, 0};

   static int[] anchorState = new int[] {122, 116, 0};

#region CompressedCharacterMap
    //
    // There are 91 equivalence classes
    // There are 2 character sequence regions
    // There are 1 tables, 126 entries
    // There are 1 runs, 0 singletons
    // Decision tree depth is 1
    //
    static sbyte[] mapC0 = new sbyte[126] {
/*     '\0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 16, 0, 16, 16, 16, 2, 2, 
/*   '\x10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x20' */ 17, 24, 14, 88, 2, 19, 20, 2, 29, 30, 3, 9, 26, 10, 11, 1, 
/*      '0' */ 4, 64, 65, 66, 81, 82, 83, 84, 85, 7, 71, 25, 22, 18, 23, 2, 
/*      '@' */ 2, 6, 33, 67, 52, 8, 13, 56, 12, 76, 87, 77, 72, 70, 74, 73, 
/*      'P' */ 59, 90, 60, 38, 62, 68, 54, 75, 79, 80, 78, 31, 15, 32, 2, 86, 
/*      '`' */ 2, 40, 41, 46, 37, 35, 45, 63, 53, 51, 89, 43, 34, 49, 36, 48, 
/*      'p' */ 50, 69, 42, 47, 39, 44, 58, 55, 5, 57, 61, 27, 21, 28 };

    static sbyte MapC(int code)
    { // '\0' <= code <= '\U0010FFFF'
      if (code < 126) // '\0' <= code <= '}'
        return mapC0[code - 0];
      else // '~' <= code <= '\U0010FFFF'
        return (sbyte)2;
    }
#endregion

    static Table[] NxS = new Table[2259] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "^\t"
      new Table(33, 76, -1, new short[] {1853, 1438, 1439, 1440, 1441, 1854, 
          1443, -1, 1444, 1445, -1, 1446, 1447, 1855, 1449, 1657, 1450, 1451, 1452, 1856, 1454, 1857, 
          1456, 1858, -1, 1458, 1859, 1860, -1, 1861, -1, -1, 1462, -1, 1862, 1863, -1, 1864, 
          -1, 1865, 1866, 1867, 1868, 1466, -1, 1869, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 1870, -1, -1, 1849, -1, -1, -1, -1, -1, 1850, -1, 1851, -1, -1, -1, 
          -1, 1852, -1, -1, 1849, 1849}),
/* NxS[   2] */ // Shortest string "/"
      new Table(1, 76, -1, new short[] {104, -1, 105, -1, -1, 1435, 
          -1, -1, -1, -1, -1, -1, 1436, -1, -1, -1, -1, 1848, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1437, 1438, 1439, 1440, 1441, 1442, 
          1443, -1, 1444, 1445, -1, 1446, 1447, 1448, 1449, 1657, 1450, 1451, 1452, 1453, 1454, 1455, 
          1456, 1457, -1, 1458, 1459, 1460, -1, 1461, -1, -1, 1462, -1, 1463, -1, -1, -1, 
          -1, 1464, 1465, -1, -1, 1466}),
/* NxS[   3] */ new Table(0, 0, -1, null), // Shortest string "\0"
/* NxS[   4] */ // Shortest string "0"
      new Table(64, 39, -1, new short[] {7, 7, 7, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 2252, -1, 7, -1, -1, -1, 
          2202}),
/* NxS[   5] */ // Shortest string "x"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[   6] */ // Shortest string "^A"
      new Table(33, 72, -1, new short[] {130, 2242, 130, 130, 485, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2243, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[   7] */ // Shortest string "9"
      new Table(64, 39, -1, new short[] {7, 7, 7, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 7, -1, -1, -1, 
          2202}),
/* NxS[   8] */ // Shortest string "^E"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2204, 130, 130, 130, 130, 130, 
          130, 130, 130, 2205, 130, 130, 130, 130, 130, 1416, 1416, 1416, 130, 130, 432, 130, 
          -1, 130, 130, 2206, 130, 130, 130, 130, 130, 130, 1416, 1416, 1416, 1416, 1416, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 1416, 130, 130, 1416, 130, 1418, 1418, -1, 
          130, 130}),
/* NxS[   9] */ // Shortest string "+"
      new Table(33, 77, -1, new short[] {1437, 1438, 1439, 1440, 1441, 1442, 
          1443, -1, 1444, 1445, -1, 1446, 1447, 1448, 1449, 1657, 1450, 1451, 1452, 1453, 1454, 1455, 
          1456, 1457, -1, 1458, 1459, 1460, -1, 1461, -1, 2201, 2203, 2201, 1463, -1, -1, -1, 
          -1, 1464, 1465, -1, -1, 1466, -1, -1, -1, -1, 2201, 2201, 2201, 2201, 2201, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 2201, -1, 1435, 2201, -1, -1, -1, 2202, 
          -1, 1436, -1, -1, -1, -1, 1848}),
/* NxS[  10] */ // Shortest string "."
      new Table(33, 72, -1, new short[] {1437, 1438, 1439, 1440, 1441, 1442, 
          1443, -1, 1444, 1445, -1, 1446, 1447, 1448, 1449, 1657, 1450, 1451, 1452, 1453, 1454, 1455, 
          1456, 1457, -1, 1458, 1459, 1460, -1, 1461, -1, 100, 101, 100, 1463, -1, -1, -1, 
          -1, 1464, 1465, -1, -1, 1466, -1, -1, -1, -1, 100, 100, 100, 100, 100, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 100, -1, 1435, 100, -1, -1, -1, -1, 
          -1, 1436}),
/* NxS[  11] */ // Shortest string "^F"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 2188, 130, 130, 130, 130, 130, 130, 130, 2189, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  12] */ // Shortest string "\""
      new Table(14, 2, 2186, new short[] {99, 2187}),
/* NxS[  13] */ // Shortest string "&"
      new Table(6, 71, -1, new short[] {1435, -1, -1, -1, -1, -1, 
          -1, 1436, -1, -1, -1, -1, -1, -1, 1848, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1437, 1438, 1439, 1440, 1441, 1442, 1443, -1, 1444, 1445, -1, 
          1446, 1447, 1448, 1449, 1657, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, -1, 1458, 1459, 
          1460, -1, 1461, -1, -1, 1462, -1, 1463, -1, -1, -1, -1, 1464, 1465, -1, -1, 
          1466}),
/* NxS[  14] */ // Shortest string "|"
      new Table(21, 1, -1, new short[] {1848}),
/* NxS[  15] */ // Shortest string "*"
      new Table(6, 71, -1, new short[] {1435, -1, -1, -1, -1, -1, 
          -1, 1436, -1, -1, -1, -1, 1848, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1437, 1438, 1439, 1440, 1441, 1442, 1443, -1, 1444, 1445, -1, 
          1446, 1447, 1448, 1449, 1657, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, -1, 1458, 1459, 
          1460, -1, 1461, -1, -1, 1462, -1, 1463, -1, -1, -1, -1, 1464, 1465, -1, -1, 
          1466}),
/* NxS[  16] */ // Shortest string ";"
      new Table(6, 71, -1, new short[] {1435, -1, -1, -1, -1, -1, 
          -1, 1436, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1437, 1438, 1439, 1440, 1441, 1442, 1443, -1, 1444, 1445, -1, 
          1446, 1447, 1448, 1449, 1657, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, -1, 1458, 1459, 
          1460, -1, 1461, -1, -1, 1462, -1, 1463, -1, -1, -1, -1, 1464, 1465, -1, -1, 
          1466}),
/* NxS[  17] */ // Shortest string "^B"
      new Table(33, 72, -1, new short[] {130, 1426, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1427, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  18] */ // Shortest string "l"
      new Table(33, 72, -1, new short[] {130, 130, 1420, 130, 1421, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1422, 130, 130, 1146, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  19] */ // Shortest string "e"
      new Table(64, 60, 130, new short[] {1416, 1416, 1416, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1416, 1416, 1416, 1416, 1416, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 1416, 1417, 130, 1416, 130, 1418, 1418, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[  20] */ // Shortest string "n"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1410, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  21] */ // Shortest string "d"
      new Table(33, 72, -1, new short[] {130, 130, 1387, 130, 1388, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1146, 1146, 130, 130, 1389, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  22] */ // Shortest string "^S"
      new Table(33, 72, -1, new short[] {130, 130, 1332, 130, 130, 130, 
          1333, 130, 130, 456, 130, 1334, 130, 130, 130, 1335, 130, 1336, 130, 130, 1337, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  23] */ // Shortest string "t"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1300, 130, 130, 130, 130, 1301, 130, 1302}),
/* NxS[  24] */ // Shortest string "a"
      new Table(33, 72, -1, new short[] {130, 1199, 130, 1284, 130, 130, 
          1285, 130, 1061, 130, 130, 130, 130, 1206, 1286, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  25] */ // Shortest string "r"
      new Table(33, 72, -1, new short[] {130, 130, 1268, 130, 130, 130, 
          130, 1269, 130, 130, 130, 130, 130, 1213, 1270, 1271, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  26] */ // Shortest string "f"
      new Table(33, 72, -1, new short[] {130, 1230, 130, 130, 130, 130, 
          130, 1231, 130, 1232, 130, 130, 130, 130, 130, 130, 1233, 130, 1234, 130, 130, 130, 
          1235, 130, 130, 130, 130, 130, 130, 130, 130, 1236, 129, 1237, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  27] */ // Shortest string "^c"
      new Table(33, 72, -1, new short[] {130, 1217, 1218, 130, 130, 130, 
          130, 130, 130, 1219, 130, 130, 130, 130, 130, 1220, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  28] */ // Shortest string "s"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          1212, 1201, 130, 130, 130, 130, 130, 130, 130, 130, 1202, 130, 1203, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 1204, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  29] */ // Shortest string "m"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 1198, 130, 130, 130, 1199, 130, 130, 130, 1200, 130, 130, 402, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  30] */ // Shortest string "p"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1197, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  31] */ // Shortest string "i"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1189, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  32] */ // Shortest string "^D"
      new Table(33, 72, -1, new short[] {130, 130, 1160, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 447, 130, 130, 130, 1161, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 1162, 130, 130, 130, 130, 
          -1, 130, 1163, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  33] */ // Shortest string "^V"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1152}),
/* NxS[  34] */ // Shortest string "^G"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 431, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1091, 130, 130, 130, 130, 130, 130, 1092}),
/* NxS[  35] */ // Shortest string "^P"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 964, 130, 1014}),
/* NxS[  36] */ // Shortest string "^R"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 997, 130, 130, 130, 130, 998}),
/* NxS[  37] */ // Shortest string "^T"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 996}),
/* NxS[  38] */ // Shortest string "^C"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 977, 130, 130, 130, 978, 130, 130, 130, 130, 130, 130, 
          130, 979, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  39] */ // Shortest string "^U"
      new Table(33, 72, -1, new short[] {130, 130, 130, 960, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 961, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  40] */ // Shortest string "^M"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 952, 130, 130, 130, 130, 130, 130, 130, 466, 130, 130, 953, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  41] */ // Shortest string ":"
      new Table(6, 73, -1, new short[] {506, -1, -1, -1, -1, -1, 
          -1, 507, -1, -1, -1, 508, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 509, -1, -1, -1, -1, 510, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 511, -1, 512, -1, -1, -1, -1, 513, 
          514, -1, 515, -1, -1, -1, -1, 516, -1, -1, 517, -1, -1, -1, 518, -1, 
          -1, -1, 519}),
/* NxS[  42] */ // Shortest string "^L"
      new Table(33, 72, -1, new short[] {130, 130, 457, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 458, 130, 130, 459, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 460, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 431, -1, -1, -1, 
          130, 130}),
/* NxS[  43] */ // Shortest string "^O"
      new Table(33, 72, -1, new short[] {130, 130, 130, 436, 130, 130, 
          130, 130, 130, 130, 130, 130, 437, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  44] */ // Shortest string "^N"
      new Table(33, 72, -1, new short[] {130, 130, 427, 130, 130, 130, 
          130, 428, 130, 130, 130, 130, 130, 130, 130, 429, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[  45] */ // Shortest string "^W"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 420}),
/* NxS[  46] */ // Shortest string "I"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 384}),
/* NxS[  47] */ // Shortest string "^Z"
      new Table(62, 65, 130, new short[] {133, 130, 129, 129, 129, 130, 
          130, 130, 130, -1, 130, 130, 130, 134, 130, 130, 130, 130, 130, 129, 129, 129, 
          129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, 
          -1, -1, -1, 130, 131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 130, 130, 132}),
/* NxS[  48] */ // Shortest string "^#"
      new Table(50, 1, -1, new short[] {123}),
/* NxS[  49] */ // Shortest string "^#pragma\t"
      new Table(0, 18, 50, new short[] {49, 50, 50, -1, 50, 50, 
          50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49, 49}),
/* NxS[  50] */ // Shortest string "^#pragma\t/"
      new Table(0, 4, 50, new short[] {-1, 50, 50, -1}),
/* NxS[  51] */ // Shortest string "^Add"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, 52, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 
          54, -1, -1, -1, -1, -1}),
/* NxS[  52] */ // Shortest string "^Add\t"
      new Table(0, 18, -1, new short[] {52, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 52}),
/* NxS[  53] */ // Shortest string "^Add\x20"
      new Table(0, 28, -1, new short[] {52, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, -1, -1, -1, -1, 
          -1, -1, -1, 54, 54, 54}),
/* NxS[  54] */ new Table(0, 0, -1, null), // Shortest string "^Add;"
/* NxS[  55] */ // Shortest string "x0Texture1D"
      new Table(6, 1, -1, new short[] {178}),
/* NxS[  56] */ new Table(0, 0, -1, null), // Shortest string "x0do"
/* NxS[  57] */ // Shortest string "x0Texture2D"
      new Table(70, 28, -1, new short[] {182, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 178}),
/* NxS[  58] */ // Shortest string "x0in"
      new Table(34, 15, -1, new short[] {246, -1, -1, -1, -1, 247, 
          -1, -1, -1, -1, -1, -1, -1, -1, 248}),
/* NxS[  59] */ // Shortest string "x0technique"
      new Table(64, 1, -1, new short[] {320}),
/* NxS[  60] */ // Shortest string "x0Sampler"
      new Table(38, 30, -1, new short[] {193, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 174, 174, 174, 329}),
/* NxS[  61] */ // Shortest string "x0Stateblock"
      new Table(38, 1, -1, new short[] {193}),
/* NxS[  62] */ new Table(0, 0, -1, null), // Shortest string "log("
/* NxS[  63] */ // Shortest string "^One"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          440, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, 52, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 
          54, -1, -1, -1, -1, -1}),
/* NxS[  64] */ // Shortest string "^LogicalOr"
      new Table(60, 64, 130, new short[] {486, 130, 130, 130, 129, 129, 
          129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 487, 130, 130, 130, 130, 129, 
          129, 129, 129, 129, 130, 130, -1, 130, 130, 52, -1, -1, -1, 129, 130, 130, 
          129, 130, -1, -1, -1, 130, 130, -1, -1, 52, 53, -1, -1, -1, -1, -1, 
          -1, -1, 54, 54, 54, -1, -1, -1, -1, -1}),
/* NxS[  65] */ // Shortest string "^LogicalCopy"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 487, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, 52, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 
          54, -1, -1, -1, -1, -1}),
/* NxS[  66] */ new Table(0, 0, -1, null), // Shortest string ":FOG\t"
/* NxS[  67] */ new Table(0, 0, -1, null), // Shortest string "^Pass\t"
/* NxS[  68] */ // Shortest string "^Pass\x20"
      new Table(0, 28, -1, new short[] {67, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 68, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 67}),
/* NxS[  69] */ new Table(0, 0, -1, null), // Shortest string "UnpackNormal("
/* NxS[  70] */ // Shortest string "^Color"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          991, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, 52, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 
          54, -1, -1, -1, -1, -1}),
/* NxS[  71] */ // Shortest string "^Vertex"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 1156, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, 52, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 
          54, -1, -1, -1, -1, -1}),
/* NxS[  72] */ // Shortest string "^VertexLM"
      new Table(60, 64, 130, new short[] {1157, 130, 130, 130, 129, 129, 
          129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 
          129, 129, 129, 129, 130, 130, -1, 130, 130, 52, -1, -1, -1, 129, 130, 130, 
          129, 130, -1, -1, -1, 130, 130, -1, -1, 52, 53, -1, -1, -1, -1, -1, 
          -1, -1, 54, 54, 54, -1, -1, -1, -1, -1}),
/* NxS[  73] */ // Shortest string "^Sub"
      new Table(64, 66, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, 52, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 
          54, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 1367}),
/* NxS[  74] */ // Shortest string "E+00"
      new Table(64, 35, -1, new short[] {74, 74, 74, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 74, 74, 74, 74, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, 74}),
/* NxS[  75] */ // Shortest string "E00"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          149, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 158, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 75, 75, 75, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 75, 75, 75, 75, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, 75}),
/* NxS[  76] */ // Shortest string "^Bind"
      new Table(64, 60, 130, new short[] {129, 129, 129, 1429, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, 52, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 
          54, -1, -1, -1, -1, -1}),
/* NxS[  77] */ // Shortest string "/int\t"
      new Table(0, 18, -1, new short[] {77, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, 77}),
/* NxS[  78] */ new Table(0, 0, -1, null), // Shortest string "/int("
/* NxS[  79] */ // Shortest string "/2D\t"
      new Table(0, 18, -1, new short[] {79, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, 79}),
/* NxS[  80] */ new Table(0, 0, -1, null), // Shortest string "/2D("
/* NxS[  81] */ new Table(0, 0, -1, null), // Shortest string "/do."
/* NxS[  82] */ // Shortest string "/do\x20"
      new Table(0, 33, -1, new short[] {81, 84, -1, 84, -1, -1, 
          -1, -1, -1, 84, 84, 81, -1, -1, -1, -1, 81, 82, 84, 84, 83, 1530, 
          84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81}),
/* NxS[  83] */ // Shortest string "/do&"
      new Table(20, 1, -1, new short[] {81}),
/* NxS[  84] */ // Shortest string "/do/"
      new Table(18, 1, -1, new short[] {81}),
/* NxS[  85] */ // Shortest string "/Buffer\t"
      new Table(0, 18, -1, new short[] {77, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, 77}),
/* NxS[  86] */ // Shortest string "/Buffer\x20"
      new Table(0, 33, -1, new short[] {85, 84, -1, 84, -1, -1, 
          -1, -1, -1, 84, 84, 81, -1, -1, -1, -1, 85, 86, 84, 84, 83, 1530, 
          84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81}),
/* NxS[  87] */ // Shortest string "^\tOne"
      new Table(70, 49, -1, new short[] {1903, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 
          53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 54}),
/* NxS[  88] */ // Shortest string "^\tLogicalOr"
      new Table(60, 59, -1, new short[] {1949, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1950, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, -1, -1, -1, -1, -1, 
          -1, -1, 54, 54, 54}),
/* NxS[  89] */ // Shortest string "^\tLogicalCopy"
      new Table(76, 43, -1, new short[] {1950, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, -1, -1, -1, -1, -1, 
          -1, -1, 54, 54, 54}),
/* NxS[  90] */ // Shortest string "^\tColor"
      new Table(70, 52, -1, new short[] {1996, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 
          53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 54, -1, 80, 80}),
/* NxS[  91] */ // Shortest string "^\tRange"
      new Table(0, 30, -1, new short[] {52, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 91, -1, -1, -1, -1, 
          -1, -1, -1, 54, 54, 54, -1, 1582}),
/* NxS[  92] */ // Shortest string "^\tVertex"
      new Table(72, 58, -1, new short[] {2042, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, -1, 
          -1, -1, -1, -1, -1, -1, 54, 54, 54, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1613}),
/* NxS[  93] */ // Shortest string "^\tVertexLM"
      new Table(60, 59, -1, new short[] {2043, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, -1, -1, -1, -1, -1, 
          -1, -1, 54, 54, 54}),
/* NxS[  94] */ // Shortest string "^\tSub"
      new Table(0, 39, -1, new short[] {52, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, -1, -1, -1, -1, 
          -1, -1, -1, 54, 54, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          2095}),
/* NxS[  95] */ // Shortest string "^\tBind"
      new Table(67, 52, -1, new short[] {2118, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 54}),
/* NxS[  96] */ // Shortest string "^\tBlend"
      new Table(0, 39, -1, new short[] {52, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, -1, -1, -1, -1, 
          -1, -1, -1, 54, 54, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          1576}),
/* NxS[  97] */ // Shortest string "^\t\tColor"
      new Table(70, 49, -1, new short[] {1996, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 
          53, -1, -1, -1, -1, -1, -1, -1, 54, 54, 54}),
/* NxS[  98] */ // Shortest string "^\t\tVertex"
      new Table(72, 47, -1, new short[] {2042, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, -1, 
          -1, -1, -1, -1, -1, -1, 54, 54, 54}),
/* NxS[  99] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[ 100] */ // Shortest string ".0"
      new Table(45, 60, -1, new short[] {102, -1, -1, -1, -1, -1, 
          -1, -1, 102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 100, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 
          100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, -1, -1, 100, 
          -1, -1, -1, -1, 102, 102}),
/* NxS[ 101] */ // Shortest string ".2"
      new Table(45, 60, -1, new short[] {102, -1, -1, -1, -1, -1, 
          -1, 1509, 102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 100, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 
          100, 100, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, -1, -1, 100, 
          -1, -1, -1, -1, 102, 102}),
/* NxS[ 102] */ new Table(0, 0, -1, null), // Shortest string ".0H"
/* NxS[ 103] */ // Shortest string "0x0"
      new Table(33, 72, -1, new short[] {103, -1, 103, -1, 103, -1, 
          -1, 103, 103, -1, -1, -1, 103, 103, -1, -1, -1, -1, -1, 103, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 103, 103, 103, 103, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 103, 103, 103, 103, 103, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 103, -1, 103, 103, 103, -1, -1, -1, 
          -1, 103}),
/* NxS[ 104] */ // Shortest string "//"
      new Table(0, 1, 104, new short[] {-1}),
/* NxS[ 105] */ // Shortest string "/*"
      new Table(0, 4, 105, new short[] {-1, 105, 105, 106}),
/* NxS[ 106] */ // Shortest string "/**"
      new Table(1, 3, -1, new short[] {107, -1, 106}),
/* NxS[ 107] */ new Table(0, 0, -1, null), // Shortest string "/**/"
/* NxS[ 108] */ // Shortest string "\t"
      new Table(6, 71, -1, new short[] {1435, -1, -1, -1, -1, -1, 
          -1, 1436, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1437, 1438, 1439, 1440, 1441, 1442, 1443, -1, 1444, 1445, -1, 
          1446, 1447, 1448, 1449, 1657, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, -1, 1458, 1459, 
          1460, -1, 1461, -1, -1, 1462, -1, 1463, -1, -1, -1, -1, 1464, 1465, -1, -1, 
          1466}),
/* NxS[ 109] */ // Shortest string "A"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 2258}),
/* NxS[ 110] */ // Shortest string "E"
      new Table(58, 66, 130, new short[] {2205, 130, 130, 130, 130, 130, 
          1416, 1416, 1416, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 1416, 1416, 1416, 1416, 1416, 130, 130, -1, 130, 130, -1, -1, -1, -1, 1416, 
          130, 130, 1416, 130, 1418, 1418, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 111] */ // Shortest string "c"
      new Table(33, 72, -1, new short[] {130, 1217, 1218, 130, 130, 130, 
          130, 130, 130, 1219, 130, 130, 130, 130, 130, 2257, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 112] */ // Shortest string "D"
      new Table(64, 63, 130, new short[] {129, 129, 1162, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 2256}),
/* NxS[ 113] */ // Shortest string "G"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1091, 130, 130, 130, 130, 130, 130, 2255}),
/* NxS[ 114] */ // Shortest string "P"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2253}),
/* NxS[ 115] */ // Shortest string "U"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 960}),
/* NxS[ 116] */ // Shortest string ""
      new Table(0, 4, 118, new short[] {117, 118, 118, 119}),
/* NxS[ 117] */ new Table(0, 0, -1, null), // Shortest string ""
/* NxS[ 118] */ // Shortest string "/"
      new Table(0, 4, 118, new short[] {-1, 118, 118, 119}),
/* NxS[ 119] */ // Shortest string "*"
      new Table(1, 3, -1, new short[] {120, -1, 119}),
/* NxS[ 120] */ new Table(0, 0, -1, null), // Shortest string "*/"
/* NxS[ 121] */ // Shortest string ""
      new Table(33, 83, 16, new short[] {5, 18, 19, 20, 21, 5, 
          23, 24, 5, 25, 5, 5, 26, 111, 28, 5, 29, 30, 31, 112, 5, 5, 
          5, 113, 5, 5, 114, 5, 5, 5, 5, 7, 7, 7, 5, 115, 5, 5, 
          41, 5, 5, 5, 5, 46, 5, 5, 5, 5, 7, 7, 7, 7, 7, 5, 
          5, 3, 5, 5, 108, 2, 3, 15, 4, 5, 109, 7, 110, 9, 9, 10, 
          5, 5, 12, 3, 108, 108, 15, 15, 13, 14, 15, 15, 15}),
/* NxS[ 122] */ // Shortest string "^"
      new Table(33, 83, 16, new short[] {17, 18, 19, 20, 21, 22, 
          23, 24, 5, 25, 5, 5, 26, 27, 28, 5, 29, 30, 31, 32, 5, 33, 
          5, 34, 5, 5, 35, 36, 5, 37, 5, 7, 7, 7, 38, 39, 5, 40, 
          41, 42, 43, 44, 45, 46, 5, 47, 5, 5, 7, 7, 7, 7, 7, 5, 
          5, 48, 5, 5, 1, 2, 3, 15, 4, 5, 6, 7, 8, 9, 9, 10, 
          5, 11, 12, 3, 1, 1, 15, 15, 13, 14, 15, 15, 15}),
/* NxS[ 123] */ // Shortest string "^#p"
      new Table(42, 1, -1, new short[] {124}),
/* NxS[ 124] */ // Shortest string "^#pr"
      new Table(40, 1, -1, new short[] {125}),
/* NxS[ 125] */ // Shortest string "^#pra"
      new Table(63, 1, -1, new short[] {126}),
/* NxS[ 126] */ // Shortest string "^#prag"
      new Table(49, 1, -1, new short[] {127}),
/* NxS[ 127] */ // Shortest string "^#pragm"
      new Table(40, 1, -1, new short[] {128}),
/* NxS[ 128] */ // Shortest string "^#pragma"
      new Table(0, 18, -1, new short[] {49, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49}),
/* NxS[ 129] */ // Shortest string "x0"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          149, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 158, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 129, 129, 129, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, 129, 129, 129, 129, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, 129}),
/* NxS[ 130] */ // Shortest string "xx"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 131] */ // Shortest string "^ZF"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 141}),
/* NxS[ 132] */ // Shortest string "^Ze"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 140}),
/* NxS[ 133] */ // Shortest string "^ZT"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 138}),
/* NxS[ 134] */ // Shortest string "^ZW"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 135}),
/* NxS[ 135] */ // Shortest string "^ZWr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 136] */ // Shortest string "^ZWri"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 137}),
/* NxS[ 137] */ // Shortest string "^Mod"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 51}),
/* NxS[ 138] */ // Shortest string "^ZTe"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 139, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 139] */ // Shortest string "^ZTes"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 51}),
/* NxS[ 140] */ // Shortest string "^Zer"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 51, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 141] */ // Shortest string "^ZFa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 142, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 142] */ // Shortest string "^Fai"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 51}),
/* NxS[ 143] */ // Shortest string "x0B"
      new Table(34, 11, -1, new short[] {381, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 285}),
/* NxS[ 144] */ // Shortest string "x0l"
      new Table(51, 1, -1, new short[] {378}),
/* NxS[ 145] */ // Shortest string "x0e"
      new Table(5, 30, -1, new short[] {376, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 259}),
/* NxS[ 146] */ // Shortest string "x0n"
      new Table(40, 9, -1, new short[] {351, -1, -1, -1, -1, -1, 
          -1, -1, 352}),
/* NxS[ 147] */ // Shortest string "x0d"
      new Table(48, 4, -1, new short[] {56, -1, -1, 347}),
/* NxS[ 148] */ // Shortest string "x0S"
      new Table(39, 2, -1, new short[] {323, 324}),
/* NxS[ 149] */ // Shortest string "x0t"
      new Table(35, 23, -1, new short[] {307, -1, -1, -1, -1, -1, 
          278, 284, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          308}),
/* NxS[ 150] */ // Shortest string "x0b"
      new Table(42, 1, -1, new short[] {304}),
/* NxS[ 151] */ // Shortest string "x0r"
      new Table(35, 1, -1, new short[] {297}),
/* NxS[ 152] */ // Shortest string "x0u"
      new Table(36, 1, -1, new short[] {292}),
/* NxS[ 153] */ // Shortest string "x0f"
      new Table(40, 9, -1, new short[] {291, -1, -1, -1, -1, -1, 
          -1, -1, 218}),
/* NxS[ 154] */ // Shortest string "x0c"
      new Table(34, 15, -1, new short[] {276, 277, -1, -1, -1, -1, 
          -1, 278, -1, -1, -1, -1, -1, -1, 279}),
/* NxS[ 155] */ // Shortest string "x0s"
      new Table(39, 17, -1, new short[] {261, 262, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 263, -1, 264}),
/* NxS[ 156] */ // Shortest string "x0p"
      new Table(40, 3, -1, new short[] {255, -1, 256}),
/* NxS[ 157] */ // Shortest string "x0i"
      new Table(36, 10, -1, new short[] {58, -1, -1, -1, -1, -1, 
          -1, -1, -1, 56}),
/* NxS[ 158] */ // Shortest string "x0D"
      new Table(35, 1, -1, new short[] {235}),
/* NxS[ 159] */ // Shortest string "x0V"
      new Table(35, 1, -1, new short[] {231}),
/* NxS[ 160] */ // Shortest string "x0w"
      new Table(53, 1, -1, new short[] {223}),
/* NxS[ 161] */ // Shortest string "x0G"
      new Table(35, 1, -1, new short[] {225}),
/* NxS[ 162] */ // Shortest string "x0v"
      new Table(48, 1, -1, new short[] {219}),
/* NxS[ 163] */ // Shortest string "x0P"
      new Table(51, 1, -1, new short[] {210}),
/* NxS[ 164] */ // Shortest string "x0R"
      new Table(35, 6, -1, new short[] {183, -1, -1, -1, -1, 184}),
/* NxS[ 165] */ // Shortest string "x0T"
      new Table(35, 1, -1, new short[] {166}),
/* NxS[ 166] */ // Shortest string "x0Te"
      new Table(5, 1, -1, new short[] {167}),
/* NxS[ 167] */ // Shortest string "x0Tex"
      new Table(39, 1, -1, new short[] {168}),
/* NxS[ 168] */ // Shortest string "x0Text"
      new Table(44, 1, -1, new short[] {169}),
/* NxS[ 169] */ // Shortest string "x0Textu"
      new Table(42, 1, -1, new short[] {170}),
/* NxS[ 170] */ // Shortest string "x0Textur"
      new Table(35, 1, -1, new short[] {171}),
/* NxS[ 171] */ // Shortest string "x0Texture"
      new Table(64, 4, -1, new short[] {172, 173, 174, 175}),
/* NxS[ 172] */ // Shortest string "x0Texture1"
      new Table(52, 1, -1, new short[] {55}),
/* NxS[ 173] */ // Shortest string "x0Texture2"
      new Table(52, 1, -1, new short[] {57}),
/* NxS[ 174] */ // Shortest string "x0Sampler1"
      new Table(52, 1, -1, new short[] {56}),
/* NxS[ 175] */ // Shortest string "x0TextureC"
      new Table(44, 1, -1, new short[] {176}),
/* NxS[ 176] */ // Shortest string "x0TextureCu"
      new Table(41, 1, -1, new short[] {177}),
/* NxS[ 177] */ // Shortest string "x0TextureCub"
      new Table(35, 1, -1, new short[] {55}),
/* NxS[ 178] */ // Shortest string "x0Texture1DA"
      new Table(42, 1, -1, new short[] {179}),
/* NxS[ 179] */ // Shortest string "x0Texture1DAr"
      new Table(42, 1, -1, new short[] {180}),
/* NxS[ 180] */ // Shortest string "x0Texture1DArr"
      new Table(40, 1, -1, new short[] {181}),
/* NxS[ 181] */ // Shortest string "x0Texture1DArra"
      new Table(57, 1, -1, new short[] {56}),
/* NxS[ 182] */ // Shortest string "x0Texture2DM"
      new Table(38, 1, -1, new short[] {55}),
/* NxS[ 183] */ // Shortest string "x0Re"
      new Table(36, 1, -1, new short[] {197}),
/* NxS[ 184] */ // Shortest string "x0Ra"
      new Table(47, 1, -1, new short[] {185}),
/* NxS[ 185] */ // Shortest string "x0Ras"
      new Table(39, 1, -1, new short[] {186}),
/* NxS[ 186] */ // Shortest string "x0Rast"
      new Table(35, 1, -1, new short[] {187}),
/* NxS[ 187] */ // Shortest string "x0Raste"
      new Table(42, 1, -1, new short[] {188}),
/* NxS[ 188] */ // Shortest string "x0Raster"
      new Table(51, 1, -1, new short[] {189}),
/* NxS[ 189] */ // Shortest string "x0Rasteri"
      new Table(61, 1, -1, new short[] {190}),
/* NxS[ 190] */ // Shortest string "x0Rasteriz"
      new Table(35, 1, -1, new short[] {191}),
/* NxS[ 191] */ // Shortest string "x0Rasterize"
      new Table(42, 1, -1, new short[] {192}),
/* NxS[ 192] */ // Shortest string "x0Blend"
      new Table(38, 1, -1, new short[] {193}),
/* NxS[ 193] */ // Shortest string "x0BlendS"
      new Table(39, 1, -1, new short[] {194}),
/* NxS[ 194] */ // Shortest string "x0BlendSt"
      new Table(40, 1, -1, new short[] {195}),
/* NxS[ 195] */ // Shortest string "x0BlendSta"
      new Table(39, 1, -1, new short[] {196}),
/* NxS[ 196] */ // Shortest string "x0els"
      new Table(35, 1, -1, new short[] {56}),
/* NxS[ 197] */ // Shortest string "x0Ren"
      new Table(37, 1, -1, new short[] {198}),
/* NxS[ 198] */ // Shortest string "x0Rend"
      new Table(35, 1, -1, new short[] {199}),
/* NxS[ 199] */ // Shortest string "x0Rende"
      new Table(42, 1, -1, new short[] {200}),
/* NxS[ 200] */ // Shortest string "x0Render"
      new Table(62, 1, -1, new short[] {201}),
/* NxS[ 201] */ // Shortest string "x0RenderT"
      new Table(40, 1, -1, new short[] {202}),
/* NxS[ 202] */ // Shortest string "x0RenderTa"
      new Table(42, 1, -1, new short[] {203}),
/* NxS[ 203] */ // Shortest string "x0RenderTar"
      new Table(63, 1, -1, new short[] {204}),
/* NxS[ 204] */ // Shortest string "x0RenderTarg"
      new Table(35, 1, -1, new short[] {205}),
/* NxS[ 205] */ // Shortest string "x0RenderTarge"
      new Table(39, 1, -1, new short[] {206}),
/* NxS[ 206] */ // Shortest string "x0RenderTarget"
      new Table(54, 1, -1, new short[] {207}),
/* NxS[ 207] */ // Shortest string "x0DepthStencilV"
      new Table(51, 1, -1, new short[] {208}),
/* NxS[ 208] */ // Shortest string "x0DepthStencilVi"
      new Table(35, 1, -1, new short[] {209}),
/* NxS[ 209] */ // Shortest string "x0DepthStencilVie"
      new Table(55, 1, -1, new short[] {56}),
/* NxS[ 210] */ // Shortest string "x0Pi"
      new Table(5, 1, -1, new short[] {211}),
/* NxS[ 211] */ // Shortest string "x0Pix"
      new Table(35, 1, -1, new short[] {212}),
/* NxS[ 212] */ // Shortest string "x0Pixe"
      new Table(34, 1, -1, new short[] {213}),
/* NxS[ 213] */ // Shortest string "x0Pixel"
      new Table(38, 1, -1, new short[] {214}),
/* NxS[ 214] */ // Shortest string "x0PixelS"
      new Table(53, 1, -1, new short[] {215}),
/* NxS[ 215] */ // Shortest string "x0PixelSh"
      new Table(40, 1, -1, new short[] {216}),
/* NxS[ 216] */ // Shortest string "x0PixelSha"
      new Table(37, 1, -1, new short[] {217}),
/* NxS[ 217] */ // Shortest string "x0Buff"
      new Table(35, 1, -1, new short[] {218}),
/* NxS[ 218] */ // Shortest string "x0fo"
      new Table(42, 1, -1, new short[] {56}),
/* NxS[ 219] */ // Shortest string "x0vo"
      new Table(34, 18, -1, new short[] {220, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 221}),
/* NxS[ 220] */ // Shortest string "x0vol"
      new Table(40, 1, -1, new short[] {222}),
/* NxS[ 221] */ // Shortest string "x0voi"
      new Table(37, 1, -1, new short[] {56}),
/* NxS[ 222] */ // Shortest string "x0vola"
      new Table(39, 1, -1, new short[] {223}),
/* NxS[ 223] */ // Shortest string "x0wh"
      new Table(51, 1, -1, new short[] {224}),
/* NxS[ 224] */ // Shortest string "x0whi"
      new Table(34, 1, -1, new short[] {196}),
/* NxS[ 225] */ // Shortest string "x0Ge"
      new Table(48, 1, -1, new short[] {226}),
/* NxS[ 226] */ // Shortest string "x0Geo"
      new Table(49, 1, -1, new short[] {227}),
/* NxS[ 227] */ // Shortest string "x0Geom"
      new Table(35, 1, -1, new short[] {228}),
/* NxS[ 228] */ // Shortest string "x0Geome"
      new Table(39, 1, -1, new short[] {229}),
/* NxS[ 229] */ // Shortest string "x0Geomet"
      new Table(42, 1, -1, new short[] {230}),
/* NxS[ 230] */ // Shortest string "x0Geometr"
      new Table(57, 1, -1, new short[] {213}),
/* NxS[ 231] */ // Shortest string "x0Ve"
      new Table(42, 1, -1, new short[] {232}),
/* NxS[ 232] */ // Shortest string "x0Ver"
      new Table(39, 1, -1, new short[] {233}),
/* NxS[ 233] */ // Shortest string "x0Vert"
      new Table(35, 1, -1, new short[] {234}),
/* NxS[ 234] */ // Shortest string "x0Verte"
      new Table(5, 1, -1, new short[] {213}),
/* NxS[ 235] */ // Shortest string "x0De"
      new Table(50, 1, -1, new short[] {236}),
/* NxS[ 236] */ // Shortest string "x0Dep"
      new Table(39, 1, -1, new short[] {237}),
/* NxS[ 237] */ // Shortest string "x0Dept"
      new Table(53, 1, -1, new short[] {238}),
/* NxS[ 238] */ // Shortest string "x0Depth"
      new Table(38, 1, -1, new short[] {239}),
/* NxS[ 239] */ // Shortest string "x0DepthS"
      new Table(39, 1, -1, new short[] {240}),
/* NxS[ 240] */ // Shortest string "x0DepthSt"
      new Table(35, 1, -1, new short[] {241}),
/* NxS[ 241] */ // Shortest string "x0DepthSte"
      new Table(36, 1, -1, new short[] {242}),
/* NxS[ 242] */ // Shortest string "x0DepthSten"
      new Table(46, 1, -1, new short[] {243}),
/* NxS[ 243] */ // Shortest string "x0DepthStenc"
      new Table(51, 1, -1, new short[] {244}),
/* NxS[ 244] */ // Shortest string "x0DepthStenci"
      new Table(34, 1, -1, new short[] {245}),
/* NxS[ 245] */ // Shortest string "x0DepthStencil"
      new Table(38, 17, -1, new short[] {193, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 207}),
/* NxS[ 246] */ // Shortest string "x0inl"
      new Table(51, 1, -1, new short[] {254}),
/* NxS[ 247] */ // Shortest string "x0int"
      new Table(35, 1, -1, new short[] {250}),
/* NxS[ 248] */ // Shortest string "x0o"
      new Table(44, 1, -1, new short[] {249}),
/* NxS[ 249] */ // Shortest string "x0ou"
      new Table(39, 1, -1, new short[] {56}),
/* NxS[ 250] */ // Shortest string "x0inte"
      new Table(42, 1, -1, new short[] {251}),
/* NxS[ 251] */ // Shortest string "x0inter"
      new Table(45, 1, -1, new short[] {252}),
/* NxS[ 252] */ // Shortest string "x0namesp"
      new Table(40, 1, -1, new short[] {253}),
/* NxS[ 253] */ // Shortest string "x0namespa"
      new Table(46, 1, -1, new short[] {196}),
/* NxS[ 254] */ // Shortest string "x0inli"
      new Table(36, 1, -1, new short[] {196}),
/* NxS[ 255] */ // Shortest string "x0pa"
      new Table(47, 1, -1, new short[] {260}),
/* NxS[ 256] */ // Shortest string "x0pr"
      new Table(35, 1, -1, new short[] {257}),
/* NxS[ 257] */ // Shortest string "x0pre"
      new Table(46, 1, -1, new short[] {258}),
/* NxS[ 258] */ // Shortest string "x0prec"
      new Table(51, 1, -1, new short[] {259}),
/* NxS[ 259] */ // Shortest string "x0el"
      new Table(47, 1, -1, new short[] {196}),
/* NxS[ 260] */ // Shortest string "x0pas"
      new Table(47, 1, -1, new short[] {56}),
/* NxS[ 261] */ // Shortest string "x0st"
      new Table(40, 3, -1, new short[] {271, -1, 272}),
/* NxS[ 262] */ // Shortest string "x0sa"
      new Table(49, 1, -1, new short[] {270}),
/* NxS[ 263] */ // Shortest string "x0sh"
      new Table(40, 1, -1, new short[] {268}),
/* NxS[ 264] */ // Shortest string "x0sw"
      new Table(51, 1, -1, new short[] {265}),
/* NxS[ 265] */ // Shortest string "x0swi"
      new Table(39, 1, -1, new short[] {266}),
/* NxS[ 266] */ // Shortest string "x0swit"
      new Table(46, 1, -1, new short[] {267}),
/* NxS[ 267] */ // Shortest string "x0switc"
      new Table(53, 1, -1, new short[] {56}),
/* NxS[ 268] */ // Shortest string "x0sha"
      new Table(42, 1, -1, new short[] {269}),
/* NxS[ 269] */ // Shortest string "x0shar"
      new Table(35, 1, -1, new short[] {221}),
/* NxS[ 270] */ // Shortest string "x0sam"
      new Table(50, 1, -1, new short[] {224}),
/* NxS[ 271] */ // Shortest string "x0sta"
      new Table(39, 1, -1, new short[] {274}),
/* NxS[ 272] */ // Shortest string "x0str"
      new Table(44, 1, -1, new short[] {273}),
/* NxS[ 273] */ // Shortest string "x0stru"
      new Table(46, 1, -1, new short[] {249}),
/* NxS[ 274] */ // Shortest string "x0stat"
      new Table(51, 1, -1, new short[] {275}),
/* NxS[ 275] */ // Shortest string "x0stati"
      new Table(46, 1, -1, new short[] {56}),
/* NxS[ 276] */ // Shortest string "x0cl"
      new Table(40, 1, -1, new short[] {255}),
/* NxS[ 277] */ // Shortest string "x0ce"
      new Table(36, 1, -1, new short[] {287}),
/* NxS[ 278] */ // Shortest string "x0tb"
      new Table(44, 1, -1, new short[] {285}),
/* NxS[ 279] */ // Shortest string "x0co"
      new Table(36, 14, -1, new short[] {280, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 281}),
/* NxS[ 280] */ // Shortest string "x0con"
      new Table(39, 9, -1, new short[] {282, -1, -1, -1, -1, -1, 
          -1, -1, 249}),
/* NxS[ 281] */ // Shortest string "x0com"
      new Table(50, 1, -1, new short[] {223}),
/* NxS[ 282] */ // Shortest string "x0cont"
      new Table(51, 1, -1, new short[] {283}),
/* NxS[ 283] */ // Shortest string "x0conti"
      new Table(36, 1, -1, new short[] {284}),
/* NxS[ 284] */ // Shortest string "x0tr"
      new Table(44, 1, -1, new short[] {196}),
/* NxS[ 285] */ // Shortest string "x0Bu"
      new Table(45, 1, -1, new short[] {286}),
/* NxS[ 286] */ // Shortest string "x0Buf"
      new Table(45, 1, -1, new short[] {217}),
/* NxS[ 287] */ // Shortest string "x0cen"
      new Table(39, 1, -1, new short[] {288}),
/* NxS[ 288] */ // Shortest string "x0cent"
      new Table(42, 1, -1, new short[] {289}),
/* NxS[ 289] */ // Shortest string "x0centr"
      new Table(48, 1, -1, new short[] {290}),
/* NxS[ 290] */ // Shortest string "x0centro"
      new Table(51, 1, -1, new short[] {221}),
/* NxS[ 291] */ // Shortest string "x0fa"
      new Table(34, 1, -1, new short[] {259}),
/* NxS[ 292] */ // Shortest string "x0un"
      new Table(51, 1, -1, new short[] {293}),
/* NxS[ 293] */ // Shortest string "x0uni"
      new Table(45, 1, -1, new short[] {294}),
/* NxS[ 294] */ // Shortest string "x0unif"
      new Table(48, 1, -1, new short[] {295}),
/* NxS[ 295] */ // Shortest string "x0unifo"
      new Table(42, 1, -1, new short[] {296}),
/* NxS[ 296] */ // Shortest string "x0unifor"
      new Table(49, 1, -1, new short[] {56}),
/* NxS[ 297] */ // Shortest string "x0re"
      new Table(39, 25, -1, new short[] {298, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 299}),
/* NxS[ 298] */ // Shortest string "x0ret"
      new Table(44, 1, -1, new short[] {302}),
/* NxS[ 299] */ // Shortest string "x0reg"
      new Table(51, 1, -1, new short[] {300}),
/* NxS[ 300] */ // Shortest string "x0regi"
      new Table(47, 1, -1, new short[] {301}),
/* NxS[ 301] */ // Shortest string "x0regis"
      new Table(39, 1, -1, new short[] {217}),
/* NxS[ 302] */ // Shortest string "x0exte"
      new Table(42, 1, -1, new short[] {303}),
/* NxS[ 303] */ // Shortest string "x0exter"
      new Table(36, 1, -1, new short[] {56}),
/* NxS[ 304] */ // Shortest string "x0br"
      new Table(35, 1, -1, new short[] {305}),
/* NxS[ 305] */ // Shortest string "x0bre"
      new Table(40, 1, -1, new short[] {306}),
/* NxS[ 306] */ // Shortest string "x0brea"
      new Table(43, 1, -1, new short[] {56}),
/* NxS[ 307] */ // Shortest string "x0te"
      new Table(5, 42, -1, new short[] {313, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 314}),
/* NxS[ 308] */ // Shortest string "x0ty"
      new Table(50, 1, -1, new short[] {309}),
/* NxS[ 309] */ // Shortest string "x0typ"
      new Table(35, 1, -1, new short[] {310}),
/* NxS[ 310] */ // Shortest string "x0type"
      new Table(37, 1, -1, new short[] {311}),
/* NxS[ 311] */ // Shortest string "x0typed"
      new Table(35, 1, -1, new short[] {312}),
/* NxS[ 312] */ // Shortest string "x0typede"
      new Table(45, 1, -1, new short[] {56}),
/* NxS[ 313] */ // Shortest string "x0tex"
      new Table(39, 1, -1, new short[] {321}),
/* NxS[ 314] */ // Shortest string "x0tec"
      new Table(53, 1, -1, new short[] {315}),
/* NxS[ 315] */ // Shortest string "x0tech"
      new Table(36, 1, -1, new short[] {316}),
/* NxS[ 316] */ // Shortest string "x0techn"
      new Table(51, 1, -1, new short[] {317}),
/* NxS[ 317] */ // Shortest string "x0techni"
      new Table(69, 1, -1, new short[] {318}),
/* NxS[ 318] */ // Shortest string "x0techniq"
      new Table(44, 1, -1, new short[] {319}),
/* NxS[ 319] */ // Shortest string "x0techniqu"
      new Table(35, 1, -1, new short[] {59}),
/* NxS[ 320] */ // Shortest string "x0technique1"
      new Table(64, 32, -1, new short[] {56, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 56}),
/* NxS[ 321] */ // Shortest string "x0text"
      new Table(44, 1, -1, new short[] {322}),
/* NxS[ 322] */ // Shortest string "x0textu"
      new Table(42, 1, -1, new short[] {196}),
/* NxS[ 323] */ // Shortest string "x0St"
      new Table(40, 1, -1, new short[] {340}),
/* NxS[ 324] */ // Shortest string "x0Sa"
      new Table(49, 1, -1, new short[] {325}),
/* NxS[ 325] */ // Shortest string "x0Sam"
      new Table(50, 1, -1, new short[] {326}),
/* NxS[ 326] */ // Shortest string "x0Samp"
      new Table(34, 1, -1, new short[] {327}),
/* NxS[ 327] */ // Shortest string "x0Sampl"
      new Table(35, 1, -1, new short[] {328}),
/* NxS[ 328] */ // Shortest string "x0Sample"
      new Table(42, 1, -1, new short[] {60}),
/* NxS[ 329] */ // Shortest string "x0SamplerC"
      new Table(48, 21, -1, new short[] {330, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 331}),
/* NxS[ 330] */ // Shortest string "x0SamplerCo"
      new Table(49, 1, -1, new short[] {333}),
/* NxS[ 331] */ // Shortest string "x0SamplerCU"
      new Table(33, 1, -1, new short[] {332}),
/* NxS[ 332] */ // Shortest string "x0SamplerCUB"
      new Table(8, 1, -1, new short[] {56}),
/* NxS[ 333] */ // Shortest string "x0SamplerCom"
      new Table(50, 1, -1, new short[] {334}),
/* NxS[ 334] */ // Shortest string "x0SamplerComp"
      new Table(40, 1, -1, new short[] {335}),
/* NxS[ 335] */ // Shortest string "x0SamplerCompa"
      new Table(42, 1, -1, new short[] {336}),
/* NxS[ 336] */ // Shortest string "x0SamplerCompar"
      new Table(51, 1, -1, new short[] {337}),
/* NxS[ 337] */ // Shortest string "x0SamplerCompari"
      new Table(47, 1, -1, new short[] {338}),
/* NxS[ 338] */ // Shortest string "x0SamplerComparis"
      new Table(48, 1, -1, new short[] {339}),
/* NxS[ 339] */ // Shortest string "x0SamplerCompariso"
      new Table(36, 1, -1, new short[] {192}),
/* NxS[ 340] */ // Shortest string "x0Sta"
      new Table(39, 1, -1, new short[] {341}),
/* NxS[ 341] */ // Shortest string "x0Stat"
      new Table(35, 1, -1, new short[] {342}),
/* NxS[ 342] */ // Shortest string "x0State"
      new Table(41, 1, -1, new short[] {343}),
/* NxS[ 343] */ // Shortest string "x0Stateb"
      new Table(34, 1, -1, new short[] {344}),
/* NxS[ 344] */ // Shortest string "x0Statebl"
      new Table(48, 1, -1, new short[] {345}),
/* NxS[ 345] */ // Shortest string "x0Stateblo"
      new Table(46, 1, -1, new short[] {346}),
/* NxS[ 346] */ // Shortest string "x0Statebloc"
      new Table(43, 1, -1, new short[] {61}),
/* NxS[ 347] */ // Shortest string "x0di"
      new Table(47, 1, -1, new short[] {348}),
/* NxS[ 348] */ // Shortest string "x0dis"
      new Table(46, 1, -1, new short[] {349}),
/* NxS[ 349] */ // Shortest string "x0disc"
      new Table(40, 1, -1, new short[] {350}),
/* NxS[ 350] */ // Shortest string "x0disca"
      new Table(42, 1, -1, new short[] {221}),
/* NxS[ 351] */ // Shortest string "x0na"
      new Table(49, 1, -1, new short[] {373}),
/* NxS[ 352] */ // Shortest string "x0no"
      new Table(50, 2, -1, new short[] {353, 354}),
/* NxS[ 353] */ // Shortest string "x0nop"
      new Table(35, 1, -1, new short[] {365}),
/* NxS[ 354] */ // Shortest string "x0noi"
      new Table(36, 1, -1, new short[] {355}),
/* NxS[ 355] */ // Shortest string "x0noin"
      new Table(39, 1, -1, new short[] {356}),
/* NxS[ 356] */ // Shortest string "x0noint"
      new Table(35, 1, -1, new short[] {357}),
/* NxS[ 357] */ // Shortest string "x0nointe"
      new Table(42, 1, -1, new short[] {358}),
/* NxS[ 358] */ // Shortest string "x0nointer"
      new Table(50, 1, -1, new short[] {359}),
/* NxS[ 359] */ // Shortest string "x0nointerp"
      new Table(48, 1, -1, new short[] {360}),
/* NxS[ 360] */ // Shortest string "x0nointerpo"
      new Table(34, 1, -1, new short[] {361}),
/* NxS[ 361] */ // Shortest string "x0nointerpol"
      new Table(40, 1, -1, new short[] {362}),
/* NxS[ 362] */ // Shortest string "x0nointerpola"
      new Table(39, 1, -1, new short[] {363}),
/* NxS[ 363] */ // Shortest string "x0nointerpolat"
      new Table(51, 1, -1, new short[] {364}),
/* NxS[ 364] */ // Shortest string "x0nointerpolati"
      new Table(48, 1, -1, new short[] {303}),
/* NxS[ 365] */ // Shortest string "x0nope"
      new Table(42, 1, -1, new short[] {366}),
/* NxS[ 366] */ // Shortest string "x0noper"
      new Table(47, 1, -1, new short[] {367}),
/* NxS[ 367] */ // Shortest string "x0nopers"
      new Table(50, 1, -1, new short[] {368}),
/* NxS[ 368] */ // Shortest string "x0nopersp"
      new Table(35, 1, -1, new short[] {369}),
/* NxS[ 369] */ // Shortest string "x0noperspe"
      new Table(46, 1, -1, new short[] {370}),
/* NxS[ 370] */ // Shortest string "x0noperspec"
      new Table(39, 1, -1, new short[] {371}),
/* NxS[ 371] */ // Shortest string "x0noperspect"
      new Table(51, 1, -1, new short[] {372}),
/* NxS[ 372] */ // Shortest string "x0noperspecti"
      new Table(58, 1, -1, new short[] {196}),
/* NxS[ 373] */ // Shortest string "x0nam"
      new Table(35, 1, -1, new short[] {374}),
/* NxS[ 374] */ // Shortest string "x0name"
      new Table(47, 1, -1, new short[] {375}),
/* NxS[ 375] */ // Shortest string "x0names"
      new Table(50, 1, -1, new short[] {252}),
/* NxS[ 376] */ // Shortest string "x0ex"
      new Table(39, 1, -1, new short[] {377}),
/* NxS[ 377] */ // Shortest string "x0ext"
      new Table(35, 1, -1, new short[] {302}),
/* NxS[ 378] */ // Shortest string "x0li"
      new Table(36, 1, -1, new short[] {379}),
/* NxS[ 379] */ // Shortest string "x0lin"
      new Table(35, 1, -1, new short[] {380}),
/* NxS[ 380] */ // Shortest string "x0line"
      new Table(40, 1, -1, new short[] {218}),
/* NxS[ 381] */ // Shortest string "x0Bl"
      new Table(35, 1, -1, new short[] {382}),
/* NxS[ 382] */ // Shortest string "x0Ble"
      new Table(36, 1, -1, new short[] {383}),
/* NxS[ 383] */ // Shortest string "x0Blen"
      new Table(37, 1, -1, new short[] {192}),
/* NxS[ 384] */ // Shortest string "In"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 385}),
/* NxS[ 385] */ // Shortest string "Int"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 386}),
/* NxS[ 386] */ // Shortest string "Inte"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 387}),
/* NxS[ 387] */ // Shortest string "Inter"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 388}),
/* NxS[ 388] */ // Shortest string "Interl"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 389, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 389] */ // Shortest string "Interlo"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 390, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 390] */ // Shortest string "Interloc"
      new Table(64, 71, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          391}),
/* NxS[ 391] */ // Shortest string "Interlock"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 392}),
/* NxS[ 392] */ // Shortest string "Interlocke"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 393}),
/* NxS[ 393] */ // Shortest string "Interlocked"
      new Table(64, 60, 130, new short[] {129, 129, 129, 395, 130, 130, 
          396, -1, 130, 398, 130, 130, 130, 130, 130, 397, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 394, 129, 409, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 394] */ // Shortest string "InterlockedA"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 419, 419}),
/* NxS[ 395] */ // Shortest string "InterlockedC"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 403, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 396] */ // Shortest string "InterlockedM"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 401, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 402, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 397] */ // Shortest string "flo"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 398, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 398] */ // Shortest string "floo"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 399}),
/* NxS[ 399] */ // Shortest string "lit"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, 400, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 62, -1, -1, -1}),
/* NxS[ 400] */ // Shortest string "log\x20"
      new Table(17, 13, -1, new short[] {400, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 62}),
/* NxS[ 401] */ // Shortest string "InterlockedMa"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 399, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 402] */ // Shortest string "mi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 399}),
/* NxS[ 403] */ // Shortest string "InterlockedCo"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 404, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 404] */ // Shortest string "InterlockedCom"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 405, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 405] */ // Shortest string "InterlockedComp"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 406}),
/* NxS[ 406] */ // Shortest string "InterlockedCompa"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 407}),
/* NxS[ 407] */ // Shortest string "InterlockedCompar"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 408}),
/* NxS[ 408] */ // Shortest string "InterlockedCompare"
      new Table(64, 66, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 409, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 410}),
/* NxS[ 409] */ // Shortest string "InterlockedE"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 414, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 410] */ // Shortest string "InterlockedCompareS"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 411}),
/* NxS[ 411] */ // Shortest string "InterlockedCompareSt"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 412, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 412] */ // Shortest string "InterlockedCompareSto"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 413}),
/* NxS[ 413] */ // Shortest string "nois"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 399}),
/* NxS[ 414] */ // Shortest string "InterlockedEx"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 415, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 415] */ // Shortest string "InterlockedExc"
      new Table(53, 71, 130, new short[] {416, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, 
          -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1}),
/* NxS[ 416] */ // Shortest string "InterlockedExch"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 417}),
/* NxS[ 417] */ // Shortest string "InterlockedExcha"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 418}),
/* NxS[ 418] */ // Shortest string "InterlockedExchan"
      new Table(63, 61, 130, new short[] {413, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 419] */ // Shortest string "fmo"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 399}),
/* NxS[ 420] */ // Shortest string "^Wr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 421, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 421] */ // Shortest string "^Wri"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 422}),
/* NxS[ 422] */ // Shortest string "^Writ"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 423}),
/* NxS[ 423] */ // Shortest string "^Read"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          424, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 424] */ // Shortest string "^ReadM"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 425}),
/* NxS[ 425] */ // Shortest string "^ReadMa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 426, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 426] */ // Shortest string "^ReadMas"
      new Table(64, 71, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          51}),
/* NxS[ 427] */ // Shortest string "^Ne"
      new Table(58, 66, 130, new short[] {434, 130, 130, 130, 130, 130, 
          129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 
          130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 428] */ // Shortest string "^Na"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 137, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 429] */ // Shortest string "^No"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 430}),
/* NxS[ 430] */ // Shortest string "^Not"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 431, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 431] */ // Shortest string "^GE"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 432, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 432] */ // Shortest string "^Eq"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 433, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 433] */ // Shortest string "^Equ"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 142}),
/* NxS[ 434] */ // Shortest string "^Nev"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 435}),
/* NxS[ 435] */ // Shortest string "^Neve"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 51}),
/* NxS[ 436] */ // Shortest string "^On"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 63}),
/* NxS[ 437] */ // Shortest string "^Of"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 438, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 438] */ // Shortest string "^Off"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 439, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 439] */ // Shortest string "^Offs"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 139}),
/* NxS[ 440] */ // Shortest string "^OneM"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 441, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 441] */ // Shortest string "^OneMi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 442}),
/* NxS[ 442] */ // Shortest string "^OneMin"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 443, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 443] */ // Shortest string "^OneMinu"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 444, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 444] */ // Shortest string "^OneMinus"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 445, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 446, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 445] */ // Shortest string "^OneMinusS"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 456}),
/* NxS[ 446] */ // Shortest string "^OneMinusD"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 447, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 447] */ // Shortest string "^Ds"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 448}),
/* NxS[ 448] */ // Shortest string "^Src"
      new Table(64, 60, 130, new short[] {129, 129, 129, 450, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 449, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 449] */ // Shortest string "^SrcA"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 453}),
/* NxS[ 450] */ // Shortest string "^SrcC"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 451, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 451] */ // Shortest string "^SrcCo"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 452}),
/* NxS[ 452] */ // Shortest string "^SrcCol"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 435, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 453] */ // Shortest string "^SrcAl"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 454, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 454] */ // Shortest string "^SrcAlp"
      new Table(53, 71, 130, new short[] {455, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, 
          -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1}),
/* NxS[ 455] */ // Shortest string "^SrcAlph"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 51}),
/* NxS[ 456] */ // Shortest string "^Sr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 448, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 457] */ // Shortest string "^Le"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 505, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 458] */ // Shortest string "^Lo"
      new Table(63, 61, 130, new short[] {468, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 459] */ // Shortest string "^Li"
      new Table(63, 61, 130, new short[] {461, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 460] */ // Shortest string "^LO"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 51, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 461] */ // Shortest string "^Lig"
      new Table(53, 71, 130, new short[] {462, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, 
          -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1}),
/* NxS[ 462] */ // Shortest string "^Ligh"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 463}),
/* NxS[ 463] */ // Shortest string "^Light"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 464, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 465, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 464] */ // Shortest string "^Lighti"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 467}),
/* NxS[ 465] */ // Shortest string "^LightM"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 466, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 466] */ // Shortest string "^Mo"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 137}),
/* NxS[ 467] */ // Shortest string "^Lightin"
      new Table(63, 61, 130, new short[] {51, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 468] */ // Shortest string "^Log"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 469, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 469] */ // Shortest string "^Logi"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 470, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 470] */ // Shortest string "^Logic"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 471}),
/* NxS[ 471] */ // Shortest string "^Logica"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 472}),
/* NxS[ 472] */ // Shortest string "^Logical"
      new Table(64, 66, 130, new short[] {129, 129, 129, 475, 130, 130, 
          130, -1, 130, 476, 477, 130, 478, 130, 130, 452, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 473, 129, 474, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 439}),
/* NxS[ 473] */ // Shortest string "^LogicalA"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 504}),
/* NxS[ 474] */ // Shortest string "^LogicalE"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 501, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 475] */ // Shortest string "^LogicalC"
      new Table(33, 72, -1, new short[] {130, 497, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 498, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 476] */ // Shortest string "^LogicalO"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 64}),
/* NxS[ 477] */ // Shortest string "^LogicalN"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 482, 130, 130, 130, 130, 130, 130, 130, 483, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 478] */ // Shortest string "^LogicalI"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 479}),
/* NxS[ 479] */ // Shortest string "^LogicalIn"
      new Table(58, 66, 130, new short[] {480, 130, 130, 130, 130, 130, 
          129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 
          130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 480] */ // Shortest string "^LogicalInv"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 481}),
/* NxS[ 481] */ // Shortest string "^LogicalInve"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 139}),
/* NxS[ 482] */ // Shortest string "^Ble"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 485}),
/* NxS[ 483] */ // Shortest string "^LogicalNo"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 51, 130, 130, 130, 130, 130, 484, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 484] */ // Shortest string "^LogicalNoo"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 51, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 485] */ // Shortest string "^Ad"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 51}),
/* NxS[ 486] */ // Shortest string "^LogicalOrR"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 493}),
/* NxS[ 487] */ // Shortest string "^LogicalOrI"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 488}),
/* NxS[ 488] */ // Shortest string "^LogicalOrIn"
      new Table(58, 66, 130, new short[] {489, 130, 130, 130, 130, 130, 
          129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 
          130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 489] */ // Shortest string "^LogicalOrInv"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 490}),
/* NxS[ 490] */ // Shortest string "^LogicalOrInve"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 491}),
/* NxS[ 491] */ // Shortest string "^LogicalOrInver"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 492}),
/* NxS[ 492] */ // Shortest string "^LogicalOrInvert"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 485}),
/* NxS[ 493] */ // Shortest string "^LogicalOrRe"
      new Table(58, 66, 130, new short[] {494, 130, 130, 130, 130, 130, 
          129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 
          130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 494] */ // Shortest string "^LogicalOrRev"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 495}),
/* NxS[ 495] */ // Shortest string "^LogicalOrReve"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 496}),
/* NxS[ 496] */ // Shortest string "^Diffu"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 137, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 497] */ // Shortest string "^LogicalCl"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 500}),
/* NxS[ 498] */ // Shortest string "^LogicalCo"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 499, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 499] */ // Shortest string "^LogicalCop"
      new Table(57, 67, 130, new short[] {65, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 
          129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 500] */ // Shortest string "^Specul"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 435}),
/* NxS[ 501] */ // Shortest string "^LogicalEq"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 502, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 502] */ // Shortest string "^LogicalEqu"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 503, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 503] */ // Shortest string "^LogicalEqui"
      new Table(58, 66, 130, new short[] {51, 130, 130, 130, 130, 130, 
          129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 
          130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 504] */ // Shortest string "^LogicalAn"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 64}),
/* NxS[ 505] */ // Shortest string "^Les"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 51, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 506] */ // Shortest string ":A"
      new Table(52, 23, -1, new short[] {922, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 923, -1, 
          924}),
/* NxS[ 507] */ // Shortest string ":F"
      new Table(60, 17, -1, new short[] {901, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 902, -1, -1, 903}),
/* NxS[ 508] */ // Shortest string ":\x20"
      new Table(6, 73, -1, new short[] {506, -1, -1, -1, -1, -1, 
          -1, 507, -1, -1, -1, 508, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 509, -1, -1, -1, -1, 510, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 511, -1, 512, -1, -1, -1, -1, 513, 
          514, -1, 515, -1, -1, -1, -1, 516, -1, -1, 517, -1, -1, -1, 518, -1, 
          -1, -1, 519}),
/* NxS[ 509] */ // Shortest string ":B"
      new Table(72, 26, -1, new short[] {857, 858, -1, -1, 859, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 856}),
/* NxS[ 510] */ // Shortest string ":S"
      new Table(54, 19, -1, new short[] {671, -1, -1, -1, -1, 672, 
          673, -1, 674, -1, -1, -1, -1, 675, -1, -1, -1, -1, 676}),
/* NxS[ 511] */ // Shortest string ":D"
      new Table(76, 24, -1, new short[] {645, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 644}),
/* NxS[ 512] */ // Shortest string ":V"
      new Table(59, 46, -1, new short[] {642, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 641}),
/* NxS[ 513] */ // Shortest string ":P"
      new Table(38, 36, -1, new short[] {632, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 633}),
/* NxS[ 514] */ // Shortest string ":R"
      new Table(8, 1, -1, new short[] {608}),
/* NxS[ 515] */ // Shortest string ":T"
      new Table(6, 3, -1, new short[] {588, -1, 589}),
/* NxS[ 516] */ // Shortest string ":C"
      new Table(68, 6, -1, new short[] {567, -1, -1, -1, -1, 568}),
/* NxS[ 517] */ // Shortest string ":M"
      new Table(68, 30, -1, new short[] {537, -1, -1, -1, -1, -1, 
          -1, -1, 538, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 536}),
/* NxS[ 518] */ // Shortest string ":N"
      new Table(73, 1, -1, new short[] {530}),
/* NxS[ 519] */ // Shortest string ":Z"
      new Table(67, 1, -1, new short[] {520}),
/* NxS[ 520] */ // Shortest string ":ZC"
      new Table(72, 1, -1, new short[] {521}),
/* NxS[ 521] */ // Shortest string ":ZCL"
      new Table(76, 1, -1, new short[] {522}),
/* NxS[ 522] */ // Shortest string ":ZCLI"
      new Table(59, 1, -1, new short[] {523}),
/* NxS[ 523] */ // Shortest string ":ZCLIP"
      new Table(8, 1, -1, new short[] {524}),
/* NxS[ 524] */ // Shortest string ":BLENDE"
      new Table(74, 1, -1, new short[] {525}),
/* NxS[ 525] */ // Shortest string ":BLENDEN"
      new Table(6, 1, -1, new short[] {526}),
/* NxS[ 526] */ // Shortest string ":BLENDENA"
      new Table(33, 1, -1, new short[] {527}),
/* NxS[ 527] */ // Shortest string ":BLENDENAB"
      new Table(72, 1, -1, new short[] {528}),
/* NxS[ 528] */ // Shortest string ":VFAC"
      new Table(8, 1, -1, new short[] {529}),
/* NxS[ 529] */ // Shortest string ":FOG"
      new Table(0, 26, -1, new short[] {66, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, 
          -1, -1, -1, 66}),
/* NxS[ 530] */ // Shortest string ":NO"
      new Table(60, 1, -1, new short[] {531}),
/* NxS[ 531] */ // Shortest string ":NOR"
      new Table(70, 1, -1, new short[] {532}),
/* NxS[ 532] */ // Shortest string ":NORM"
      new Table(6, 1, -1, new short[] {533}),
/* NxS[ 533] */ // Shortest string ":NORMA"
      new Table(72, 1, -1, new short[] {534}),
/* NxS[ 534] */ // Shortest string ":PSIZE"
      new Table(64, 53, -1, new short[] {535, 529, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 529, 529, 529, 529, 529, 
          -1, -1, -1, -1, -1, 66, -1, -1, -1, 529, -1, -1, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1, 66}),
/* NxS[ 535] */ // Shortest string ":PSIZE1"
      new Table(64, 53, -1, new short[] {529, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 66, -1, -1, -1, 529, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1, 66}),
/* NxS[ 536] */ // Shortest string ":MA"
      new Table(79, 1, -1, new short[] {557}),
/* NxS[ 537] */ // Shortest string ":MU"
      new Table(72, 1, -1, new short[] {549}),
/* NxS[ 538] */ // Shortest string ":MI"
      new Table(59, 16, -1, new short[] {539, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 540}),
/* NxS[ 539] */ // Shortest string ":MIP"
      new Table(72, 1, -1, new short[] {543}),
/* NxS[ 540] */ // Shortest string ":MIN"
      new Table(72, 1, -1, new short[] {541}),
/* NxS[ 541] */ // Shortest string ":MAXL"
      new Table(73, 1, -1, new short[] {542}),
/* NxS[ 542] */ // Shortest string ":MAXLO"
      new Table(52, 1, -1, new short[] {529}),
/* NxS[ 543] */ // Shortest string ":MIPL"
      new Table(73, 1, -1, new short[] {544}),
/* NxS[ 544] */ // Shortest string ":MIPLO"
      new Table(52, 1, -1, new short[] {545}),
/* NxS[ 545] */ // Shortest string ":MIPLOD"
      new Table(33, 1, -1, new short[] {546}),
/* NxS[ 546] */ // Shortest string ":MIPLODB"
      new Table(76, 1, -1, new short[] {547}),
/* NxS[ 547] */ // Shortest string ":MIPLODBI"
      new Table(6, 1, -1, new short[] {548}),
/* NxS[ 548] */ // Shortest string ":VPO"
      new Table(38, 1, -1, new short[] {529}),
/* NxS[ 549] */ // Shortest string ":MUL"
      new Table(62, 1, -1, new short[] {550}),
/* NxS[ 550] */ // Shortest string ":MULT"
      new Table(76, 1, -1, new short[] {551}),
/* NxS[ 551] */ // Shortest string ":MULTI"
      new Table(38, 1, -1, new short[] {552}),
/* NxS[ 552] */ // Shortest string ":MULTIS"
      new Table(6, 1, -1, new short[] {553}),
/* NxS[ 553] */ // Shortest string ":MULTISA"
      new Table(70, 1, -1, new short[] {554}),
/* NxS[ 554] */ // Shortest string ":MULTISAM"
      new Table(59, 1, -1, new short[] {555}),
/* NxS[ 555] */ // Shortest string ":MULTISAMP"
      new Table(72, 1, -1, new short[] {556}),
/* NxS[ 556] */ // Shortest string ":MULTISAMPL"
      new Table(8, 1, -1, new short[] {523}),
/* NxS[ 557] */ // Shortest string ":MAX"
      new Table(72, 26, -1, new short[] {541, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 558}),
/* NxS[ 558] */ // Shortest string ":MAXA"
      new Table(74, 1, -1, new short[] {559}),
/* NxS[ 559] */ // Shortest string ":MAXAN"
      new Table(76, 1, -1, new short[] {560}),
/* NxS[ 560] */ // Shortest string ":MAXANI"
      new Table(38, 1, -1, new short[] {561}),
/* NxS[ 561] */ // Shortest string ":MAXANIS"
      new Table(73, 1, -1, new short[] {562}),
/* NxS[ 562] */ // Shortest string ":MAXANISO"
      new Table(62, 1, -1, new short[] {563}),
/* NxS[ 563] */ // Shortest string ":MAXANISOT"
      new Table(60, 1, -1, new short[] {564}),
/* NxS[ 564] */ // Shortest string ":MAXANISOTR"
      new Table(73, 1, -1, new short[] {565}),
/* NxS[ 565] */ // Shortest string ":MAXANISOTRO"
      new Table(59, 1, -1, new short[] {566}),
/* NxS[ 566] */ // Shortest string ":MAXANISOTROP"
      new Table(80, 1, -1, new short[] {529}),
/* NxS[ 567] */ // Shortest string ":CU"
      new Table(72, 1, -1, new short[] {584}),
/* NxS[ 568] */ // Shortest string ":CO"
      new Table(70, 3, -1, new short[] {569, -1, 570}),
/* NxS[ 569] */ // Shortest string ":COM"
      new Table(59, 1, -1, new short[] {574}),
/* NxS[ 570] */ // Shortest string ":COL"
      new Table(73, 1, -1, new short[] {571}),
/* NxS[ 571] */ // Shortest string ":COLO"
      new Table(60, 1, -1, new short[] {572}),
/* NxS[ 572] */ // Shortest string ":COLOR"
      new Table(64, 53, -1, new short[] {573, 529, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 529, 529, 529, 529, 529, 
          -1, -1, -1, -1, -1, 66, -1, -1, -1, 529, -1, -1, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1, 66}),
/* NxS[ 573] */ // Shortest string ":COLOR1"
      new Table(64, 53, -1, new short[] {529, 529, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 529, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, 66, -1, -1, -1, 529, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1, 66}),
/* NxS[ 574] */ // Shortest string ":COMP"
      new Table(6, 1, -1, new short[] {575}),
/* NxS[ 575] */ // Shortest string ":COMPA"
      new Table(60, 1, -1, new short[] {576}),
/* NxS[ 576] */ // Shortest string ":COMPAR"
      new Table(76, 1, -1, new short[] {577}),
/* NxS[ 577] */ // Shortest string ":COMPARI"
      new Table(38, 1, -1, new short[] {578}),
/* NxS[ 578] */ // Shortest string ":COMPARIS"
      new Table(73, 1, -1, new short[] {579}),
/* NxS[ 579] */ // Shortest string ":COMPARISO"
      new Table(74, 1, -1, new short[] {580}),
/* NxS[ 580] */ // Shortest string ":COMPARISON"
      new Table(13, 1, -1, new short[] {581}),
/* NxS[ 581] */ // Shortest string ":DEPTHF"
      new Table(68, 1, -1, new short[] {582}),
/* NxS[ 582] */ // Shortest string ":DEPTHFU"
      new Table(74, 1, -1, new short[] {583}),
/* NxS[ 583] */ // Shortest string ":DEPTHFUN"
      new Table(67, 1, -1, new short[] {529}),
/* NxS[ 584] */ // Shortest string ":CUL"
      new Table(72, 1, -1, new short[] {585}),
/* NxS[ 585] */ // Shortest string ":FILL"
      new Table(70, 1, -1, new short[] {586}),
/* NxS[ 586] */ // Shortest string ":FILLM"
      new Table(73, 1, -1, new short[] {587}),
/* NxS[ 587] */ // Shortest string ":FILLMO"
      new Table(52, 1, -1, new short[] {528}),
/* NxS[ 588] */ // Shortest string ":TA"
      new Table(74, 1, -1, new short[] {604}),
/* NxS[ 589] */ // Shortest string ":TE"
      new Table(38, 42, -1, new short[] {590, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 591}),
/* NxS[ 590] */ // Shortest string ":TES"
      new Table(38, 1, -1, new short[] {598}),
/* NxS[ 591] */ // Shortest string ":TEX"
      new Table(67, 1, -1, new short[] {592}),
/* NxS[ 592] */ // Shortest string ":TEXC"
      new Table(73, 1, -1, new short[] {593}),
/* NxS[ 593] */ // Shortest string ":TEXCO"
      new Table(73, 1, -1, new short[] {594}),
/* NxS[ 594] */ // Shortest string ":TEXCOO"
      new Table(60, 1, -1, new short[] {595}),
/* NxS[ 595] */ // Shortest string ":TEXCOOR"
      new Table(52, 1, -1, new short[] {596}),
/* NxS[ 596] */ // Shortest string ":TEXCOORD"
      new Table(64, 53, -1, new short[] {597, 529, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 529, 529, 529, 529, 529, 
          -1, -1, -1, -1, -1, 66, -1, -1, -1, 529, -1, -1, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1, 66}),
/* NxS[ 597] */ // Shortest string ":TEXCOORD1"
      new Table(64, 53, -1, new short[] {529, 529, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 529, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, 66, -1, -1, -1, 529, -1, -1, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1, 66}),
/* NxS[ 598] */ // Shortest string ":TESS"
      new Table(13, 1, -1, new short[] {599}),
/* NxS[ 599] */ // Shortest string ":TESSF"
      new Table(6, 1, -1, new short[] {600}),
/* NxS[ 600] */ // Shortest string ":TESSFA"
      new Table(67, 1, -1, new short[] {601}),
/* NxS[ 601] */ // Shortest string ":TESSFAC"
      new Table(62, 1, -1, new short[] {602}),
/* NxS[ 602] */ // Shortest string ":TESSFACT"
      new Table(73, 1, -1, new short[] {603}),
/* NxS[ 603] */ // Shortest string ":SPECULA"
      new Table(60, 1, -1, new short[] {534}),
/* NxS[ 604] */ // Shortest string ":TAN"
      new Table(56, 1, -1, new short[] {605}),
/* NxS[ 605] */ // Shortest string ":TANG"
      new Table(8, 1, -1, new short[] {606}),
/* NxS[ 606] */ // Shortest string ":TANGE"
      new Table(74, 1, -1, new short[] {607}),
/* NxS[ 607] */ // Shortest string ":TANGEN"
      new Table(62, 1, -1, new short[] {534}),
/* NxS[ 608] */ // Shortest string ":RE"
      new Table(56, 19, -1, new short[] {609, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 610}),
/* NxS[ 609] */ // Shortest string ":REG"
      new Table(76, 1, -1, new short[] {628}),
/* NxS[ 610] */ // Shortest string ":REN"
      new Table(52, 1, -1, new short[] {611}),
/* NxS[ 611] */ // Shortest string ":REND"
      new Table(8, 1, -1, new short[] {612}),
/* NxS[ 612] */ // Shortest string ":RENDE"
      new Table(60, 1, -1, new short[] {613}),
/* NxS[ 613] */ // Shortest string ":RENDER"
      new Table(62, 1, -1, new short[] {614}),
/* NxS[ 614] */ // Shortest string ":RENDERT"
      new Table(6, 1, -1, new short[] {615}),
/* NxS[ 615] */ // Shortest string ":RENDERTA"
      new Table(60, 1, -1, new short[] {616}),
/* NxS[ 616] */ // Shortest string ":RENDERTAR"
      new Table(56, 1, -1, new short[] {617}),
/* NxS[ 617] */ // Shortest string ":RENDERTARG"
      new Table(8, 1, -1, new short[] {618}),
/* NxS[ 618] */ // Shortest string ":RENDERTARGE"
      new Table(62, 1, -1, new short[] {619}),
/* NxS[ 619] */ // Shortest string ":RENDERTARGET"
      new Table(75, 1, -1, new short[] {620}),
/* NxS[ 620] */ // Shortest string ":DEPTHW"
      new Table(60, 1, -1, new short[] {621}),
/* NxS[ 621] */ // Shortest string ":DEPTHWR"
      new Table(76, 1, -1, new short[] {622}),
/* NxS[ 622] */ // Shortest string ":DEPTHWRI"
      new Table(62, 1, -1, new short[] {623}),
/* NxS[ 623] */ // Shortest string ":DEPTHWRIT"
      new Table(8, 1, -1, new short[] {624}),
/* NxS[ 624] */ // Shortest string ":DEPTHWRITE"
      new Table(70, 1, -1, new short[] {625}),
/* NxS[ 625] */ // Shortest string ":DEPTHWRITEM"
      new Table(6, 1, -1, new short[] {626}),
/* NxS[ 626] */ // Shortest string ":DEPTHWRITEMA"
      new Table(38, 1, -1, new short[] {627}),
/* NxS[ 627] */ // Shortest string ":DEPTHWRITEMAS"
      new Table(77, 1, -1, new short[] {529}),
/* NxS[ 628] */ // Shortest string ":REGI"
      new Table(38, 1, -1, new short[] {629}),
/* NxS[ 629] */ // Shortest string ":REGIS"
      new Table(62, 1, -1, new short[] {630}),
/* NxS[ 630] */ // Shortest string ":FILT"
      new Table(8, 1, -1, new short[] {631}),
/* NxS[ 631] */ // Shortest string ":FILTE"
      new Table(60, 1, -1, new short[] {529}),
/* NxS[ 632] */ // Shortest string ":PS"
      new Table(76, 1, -1, new short[] {639}),
/* NxS[ 633] */ // Shortest string ":PO"
      new Table(38, 1, -1, new short[] {634}),
/* NxS[ 634] */ // Shortest string ":POS"
      new Table(76, 1, -1, new short[] {635}),
/* NxS[ 635] */ // Shortest string ":POSI"
      new Table(62, 1, -1, new short[] {636}),
/* NxS[ 636] */ // Shortest string ":POSIT"
      new Table(76, 1, -1, new short[] {637}),
/* NxS[ 637] */ // Shortest string ":POSITI"
      new Table(73, 1, -1, new short[] {638}),
/* NxS[ 638] */ // Shortest string ":POSITIO"
      new Table(74, 1, -1, new short[] {534}),
/* NxS[ 639] */ // Shortest string ":PSI"
      new Table(78, 1, -1, new short[] {640}),
/* NxS[ 640] */ // Shortest string ":PSIZ"
      new Table(8, 1, -1, new short[] {534}),
/* NxS[ 641] */ // Shortest string ":VF"
      new Table(6, 1, -1, new short[] {643}),
/* NxS[ 642] */ // Shortest string ":VP"
      new Table(73, 1, -1, new short[] {548}),
/* NxS[ 643] */ // Shortest string ":VFA"
      new Table(67, 1, -1, new short[] {528}),
/* NxS[ 644] */ // Shortest string ":DE"
      new Table(38, 22, -1, new short[] {649, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 650}),
/* NxS[ 645] */ // Shortest string ":DI"
      new Table(13, 1, -1, new short[] {646}),
/* NxS[ 646] */ // Shortest string ":DIF"
      new Table(13, 1, -1, new short[] {647}),
/* NxS[ 647] */ // Shortest string ":DIFF"
      new Table(68, 1, -1, new short[] {648}),
/* NxS[ 648] */ // Shortest string ":DIFFU"
      new Table(38, 1, -1, new short[] {640}),
/* NxS[ 649] */ // Shortest string ":DES"
      new Table(62, 1, -1, new short[] {661}),
/* NxS[ 650] */ // Shortest string ":DEP"
      new Table(62, 1, -1, new short[] {651}),
/* NxS[ 651] */ // Shortest string ":DEPT"
      new Table(12, 1, -1, new short[] {652}),
/* NxS[ 652] */ // Shortest string ":DEPTH"
      new Table(75, 50, -1, new short[] {620, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 524, -1, -1, -1, -1, 581, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 653}),
/* NxS[ 653] */ // Shortest string ":DEPTHB"
      new Table(76, 1, -1, new short[] {654}),
/* NxS[ 654] */ // Shortest string ":DEPTHBI"
      new Table(6, 1, -1, new short[] {655}),
/* NxS[ 655] */ // Shortest string ":DEPTHBIA"
      new Table(38, 1, -1, new short[] {656}),
/* NxS[ 656] */ // Shortest string ":DEPTHBIAS"
      new Table(67, 50, -1, new short[] {657, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1, 66}),
/* NxS[ 657] */ // Shortest string ":DEPTHBIASC"
      new Table(72, 1, -1, new short[] {658}),
/* NxS[ 658] */ // Shortest string ":DEPTHBIASCL"
      new Table(6, 1, -1, new short[] {659}),
/* NxS[ 659] */ // Shortest string ":DEPTHBIASCLA"
      new Table(70, 1, -1, new short[] {660}),
/* NxS[ 660] */ // Shortest string ":DEPTHBIASCLAM"
      new Table(59, 1, -1, new short[] {529}),
/* NxS[ 661] */ // Shortest string ":SRC"
      new Table(33, 1, -1, new short[] {662}),
/* NxS[ 662] */ // Shortest string ":SRCB"
      new Table(72, 1, -1, new short[] {663}),
/* NxS[ 663] */ // Shortest string ":SRCBL"
      new Table(8, 1, -1, new short[] {664}),
/* NxS[ 664] */ // Shortest string ":SRCBLE"
      new Table(74, 1, -1, new short[] {665}),
/* NxS[ 665] */ // Shortest string ":SRCBLEN"
      new Table(52, 1, -1, new short[] {666}),
/* NxS[ 666] */ // Shortest string ":BLENDOP"
      new Table(0, 26, -1, new short[] {66, -1, -1, -1, -1, -1, 
          667, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, 
          -1, -1, -1, 66}),
/* NxS[ 667] */ // Shortest string ":BLENDOPA"
      new Table(72, 1, -1, new short[] {668}),
/* NxS[ 668] */ // Shortest string ":BLENDOPAL"
      new Table(59, 1, -1, new short[] {669}),
/* NxS[ 669] */ // Shortest string ":BLENDOPALP"
      new Table(12, 1, -1, new short[] {670}),
/* NxS[ 670] */ // Shortest string ":BLENDOPALPH"
      new Table(6, 1, -1, new short[] {529}),
/* NxS[ 671] */ // Shortest string ":SV"
      new Table(86, 1, -1, new short[] {706}),
/* NxS[ 672] */ // Shortest string ":SP"
      new Table(8, 1, -1, new short[] {702}),
/* NxS[ 673] */ // Shortest string ":SR"
      new Table(67, 1, -1, new short[] {661}),
/* NxS[ 674] */ // Shortest string ":ST"
      new Table(8, 1, -1, new short[] {694}),
/* NxS[ 675] */ // Shortest string ":SC"
      new Table(76, 1, -1, new short[] {690}),
/* NxS[ 676] */ // Shortest string ":SL"
      new Table(73, 1, -1, new short[] {677}),
/* NxS[ 677] */ // Shortest string ":SLO"
      new Table(59, 1, -1, new short[] {678}),
/* NxS[ 678] */ // Shortest string ":SLOP"
      new Table(8, 1, -1, new short[] {679}),
/* NxS[ 679] */ // Shortest string ":SLOPE"
      new Table(38, 1, -1, new short[] {680}),
/* NxS[ 680] */ // Shortest string ":SLOPES"
      new Table(67, 1, -1, new short[] {681}),
/* NxS[ 681] */ // Shortest string ":SLOPESC"
      new Table(6, 1, -1, new short[] {682}),
/* NxS[ 682] */ // Shortest string ":SLOPESCA"
      new Table(72, 1, -1, new short[] {683}),
/* NxS[ 683] */ // Shortest string ":SLOPESCAL"
      new Table(8, 1, -1, new short[] {684}),
/* NxS[ 684] */ // Shortest string ":SLOPESCALE"
      new Table(52, 1, -1, new short[] {685}),
/* NxS[ 685] */ // Shortest string ":SLOPESCALED"
      new Table(52, 1, -1, new short[] {686}),
/* NxS[ 686] */ // Shortest string ":SLOPESCALEDD"
      new Table(8, 1, -1, new short[] {687}),
/* NxS[ 687] */ // Shortest string ":SLOPESCALEDDE"
      new Table(59, 1, -1, new short[] {688}),
/* NxS[ 688] */ // Shortest string ":SLOPESCALEDDEP"
      new Table(62, 1, -1, new short[] {689}),
/* NxS[ 689] */ // Shortest string ":SLOPESCALEDDEPT"
      new Table(12, 1, -1, new short[] {545}),
/* NxS[ 690] */ // Shortest string ":SCI"
      new Table(38, 1, -1, new short[] {691}),
/* NxS[ 691] */ // Shortest string ":SCIS"
      new Table(38, 1, -1, new short[] {692}),
/* NxS[ 692] */ // Shortest string ":SCISS"
      new Table(73, 1, -1, new short[] {693}),
/* NxS[ 693] */ // Shortest string ":SCISSO"
      new Table(60, 1, -1, new short[] {523}),
/* NxS[ 694] */ // Shortest string ":STE"
      new Table(74, 1, -1, new short[] {695}),
/* NxS[ 695] */ // Shortest string ":STEN"
      new Table(67, 1, -1, new short[] {696}),
/* NxS[ 696] */ // Shortest string ":STENC"
      new Table(76, 1, -1, new short[] {697}),
/* NxS[ 697] */ // Shortest string ":STENCI"
      new Table(72, 1, -1, new short[] {698}),
/* NxS[ 698] */ // Shortest string ":STENCIL"
      new Table(60, 40, -1, new short[] {699, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 620, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 524}),
/* NxS[ 699] */ // Shortest string ":STENCILR"
      new Table(8, 1, -1, new short[] {700}),
/* NxS[ 700] */ // Shortest string ":STENCILRE"
      new Table(6, 1, -1, new short[] {701}),
/* NxS[ 701] */ // Shortest string ":STENCILREA"
      new Table(52, 1, -1, new short[] {624}),
/* NxS[ 702] */ // Shortest string ":SPE"
      new Table(67, 1, -1, new short[] {703}),
/* NxS[ 703] */ // Shortest string ":SPEC"
      new Table(68, 1, -1, new short[] {704}),
/* NxS[ 704] */ // Shortest string ":SPECU"
      new Table(72, 1, -1, new short[] {705}),
/* NxS[ 705] */ // Shortest string ":SPECUL"
      new Table(6, 1, -1, new short[] {603}),
/* NxS[ 706] */ // Shortest string ":SV_"
      new Table(38, 39, -1, new short[] {707, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 708, -1, 709, -1, 710, -1, -1, 711, 
          712, -1, 713, -1, -1, -1, -1, 714, -1, -1, -1, -1, -1, 715, -1, -1, 
          716}),
/* NxS[ 707] */ // Shortest string ":SV_S"
      new Table(6, 1, -1, new short[] {852}),
/* NxS[ 708] */ // Shortest string ":SV_D"
      new Table(73, 27, -1, new short[] {835, -1, -1, 836, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 834}),
/* NxS[ 709] */ // Shortest string ":SV_V"
      new Table(76, 24, -1, new short[] {826, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 825}),
/* NxS[ 710] */ // Shortest string ":SV_G"
      new Table(38, 23, -1, new short[] {811, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          812}),
/* NxS[ 711] */ // Shortest string ":SV_P"
      new Table(60, 14, -1, new short[] {799, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 800}),
/* NxS[ 712] */ // Shortest string ":SV_R"
      new Table(8, 1, -1, new short[] {779}),
/* NxS[ 713] */ // Shortest string ":SV_T"
      new Table(6, 3, -1, new short[] {774, -1, 725}),
/* NxS[ 714] */ // Shortest string ":SV_C"
      new Table(68, 6, -1, new short[] {757, -1, -1, -1, 758, 759}),
/* NxS[ 715] */ // Shortest string ":SV_O"
      new Table(68, 1, -1, new short[] {741}),
/* NxS[ 716] */ // Shortest string ":SV_I"
      new Table(38, 37, -1, new short[] {717, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 718}),
/* NxS[ 717] */ // Shortest string ":SV_IS"
      new Table(13, 1, -1, new short[] {736}),
/* NxS[ 718] */ // Shortest string ":SV_IN"
      new Table(38, 1, -1, new short[] {719}),
/* NxS[ 719] */ // Shortest string ":SV_INS"
      new Table(62, 15, -1, new short[] {720, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 721}),
/* NxS[ 720] */ // Shortest string ":SV_INST"
      new Table(6, 1, -1, new short[] {732}),
/* NxS[ 721] */ // Shortest string ":SV_INSI"
      new Table(52, 1, -1, new short[] {722}),
/* NxS[ 722] */ // Shortest string ":SV_INSID"
      new Table(8, 1, -1, new short[] {723}),
/* NxS[ 723] */ // Shortest string ":SV_INSIDE"
      new Table(62, 1, -1, new short[] {724}),
/* NxS[ 724] */ // Shortest string ":SV_INSIDET"
      new Table(8, 1, -1, new short[] {725}),
/* NxS[ 725] */ // Shortest string ":SV_TE"
      new Table(38, 1, -1, new short[] {726}),
/* NxS[ 726] */ // Shortest string ":SV_TES"
      new Table(38, 1, -1, new short[] {727}),
/* NxS[ 727] */ // Shortest string ":SV_TESS"
      new Table(13, 1, -1, new short[] {728}),
/* NxS[ 728] */ // Shortest string ":SV_TESSF"
      new Table(6, 1, -1, new short[] {729}),
/* NxS[ 729] */ // Shortest string ":SV_TESSFA"
      new Table(67, 1, -1, new short[] {730}),
/* NxS[ 730] */ // Shortest string ":SV_TESSFAC"
      new Table(62, 1, -1, new short[] {731}),
/* NxS[ 731] */ // Shortest string ":BORDERCOL"
      new Table(73, 1, -1, new short[] {631}),
/* NxS[ 732] */ // Shortest string ":SV_INSTA"
      new Table(74, 1, -1, new short[] {733}),
/* NxS[ 733] */ // Shortest string ":SV_INSTAN"
      new Table(67, 1, -1, new short[] {734}),
/* NxS[ 734] */ // Shortest string ":SV_INSTANC"
      new Table(8, 1, -1, new short[] {735}),
/* NxS[ 735] */ // Shortest string ":SV_VERTEX"
      new Table(76, 1, -1, new short[] {542}),
/* NxS[ 736] */ // Shortest string ":SV_ISF"
      new Table(60, 1, -1, new short[] {737}),
/* NxS[ 737] */ // Shortest string ":SV_ISFR"
      new Table(73, 1, -1, new short[] {738}),
/* NxS[ 738] */ // Shortest string ":SV_ISFRO"
      new Table(74, 1, -1, new short[] {739}),
/* NxS[ 739] */ // Shortest string ":SV_ISFRON"
      new Table(62, 1, -1, new short[] {740}),
/* NxS[ 740] */ // Shortest string ":SV_ISFRONT"
      new Table(13, 1, -1, new short[] {641}),
/* NxS[ 741] */ // Shortest string ":SV_OU"
      new Table(62, 1, -1, new short[] {742}),
/* NxS[ 742] */ // Shortest string ":SV_OUT"
      new Table(59, 1, -1, new short[] {743}),
/* NxS[ 743] */ // Shortest string ":SV_OUTP"
      new Table(68, 1, -1, new short[] {744}),
/* NxS[ 744] */ // Shortest string ":SV_OUTPU"
      new Table(62, 1, -1, new short[] {745}),
/* NxS[ 745] */ // Shortest string ":SV_OUTPUT"
      new Table(67, 1, -1, new short[] {746}),
/* NxS[ 746] */ // Shortest string ":SV_OUTPUTC"
      new Table(73, 1, -1, new short[] {747}),
/* NxS[ 747] */ // Shortest string ":SV_OUTPUTCO"
      new Table(74, 1, -1, new short[] {748}),
/* NxS[ 748] */ // Shortest string ":SV_OUTPUTCON"
      new Table(62, 1, -1, new short[] {749}),
/* NxS[ 749] */ // Shortest string ":SV_OUTPUTCONT"
      new Table(60, 1, -1, new short[] {750}),
/* NxS[ 750] */ // Shortest string ":SV_OUTPUTCONTR"
      new Table(73, 1, -1, new short[] {751}),
/* NxS[ 751] */ // Shortest string ":SV_OUTPUTCONTRO"
      new Table(72, 1, -1, new short[] {752}),
/* NxS[ 752] */ // Shortest string ":SV_OUTPUTCONTROL"
      new Table(59, 1, -1, new short[] {753}),
/* NxS[ 753] */ // Shortest string ":SV_OUTPUTCONTROLP"
      new Table(73, 1, -1, new short[] {754}),
/* NxS[ 754] */ // Shortest string ":SV_OUTPUTCONTROLPO"
      new Table(76, 1, -1, new short[] {755}),
/* NxS[ 755] */ // Shortest string ":SV_OUTPUTCONTROLPOI"
      new Table(74, 1, -1, new short[] {756}),
/* NxS[ 756] */ // Shortest string ":SV_OUTPUTCONTROLPOIN"
      new Table(62, 1, -1, new short[] {735}),
/* NxS[ 757] */ // Shortest string ":SV_CU"
      new Table(72, 1, -1, new short[] {773}),
/* NxS[ 758] */ // Shortest string ":SV_CL"
      new Table(76, 1, -1, new short[] {764}),
/* NxS[ 759] */ // Shortest string ":SV_CO"
      new Table(54, 1, -1, new short[] {760}),
/* NxS[ 760] */ // Shortest string ":SV_COV"
      new Table(8, 1, -1, new short[] {761}),
/* NxS[ 761] */ // Shortest string ":SV_COVE"
      new Table(60, 1, -1, new short[] {762}),
/* NxS[ 762] */ // Shortest string ":SV_COVER"
      new Table(6, 1, -1, new short[] {763}),
/* NxS[ 763] */ // Shortest string ":SV_COVERA"
      new Table(56, 1, -1, new short[] {528}),
/* NxS[ 764] */ // Shortest string ":SV_CLI"
      new Table(59, 1, -1, new short[] {765}),
/* NxS[ 765] */ // Shortest string ":SV_CULL"
      new Table(52, 1, -1, new short[] {766}),
/* NxS[ 766] */ // Shortest string ":SV_CULLD"
      new Table(76, 1, -1, new short[] {767}),
/* NxS[ 767] */ // Shortest string ":SV_CULLDI"
      new Table(38, 1, -1, new short[] {768}),
/* NxS[ 768] */ // Shortest string ":SV_CULLDIS"
      new Table(62, 1, -1, new short[] {769}),
/* NxS[ 769] */ // Shortest string ":SV_CULLDIST"
      new Table(6, 1, -1, new short[] {770}),
/* NxS[ 770] */ // Shortest string ":SV_CULLDISTA"
      new Table(74, 1, -1, new short[] {771}),
/* NxS[ 771] */ // Shortest string ":SV_CULLDISTAN"
      new Table(67, 1, -1, new short[] {640}),
/* NxS[ 772] */ // Shortest string ""
      new Table(64, 53, -1, new short[] {535, 529, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 529, 529, 529, 529, 529, 
          -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, 66, 66, -1, -1, -1, -1, -1, -1, -1, 66}),
/* NxS[ 773] */ // Shortest string ":SV_CUL"
      new Table(72, 1, -1, new short[] {765}),
/* NxS[ 774] */ // Shortest string ":SV_TA"
      new Table(60, 1, -1, new short[] {775}),
/* NxS[ 775] */ // Shortest string ":SV_TAR"
      new Table(56, 1, -1, new short[] {776}),
/* NxS[ 776] */ // Shortest string ":SV_TARG"
      new Table(8, 1, -1, new short[] {777}),
/* NxS[ 777] */ // Shortest string ":SV_TARGE"
      new Table(62, 1, -1, new short[] {778}),
/* NxS[ 778] */ // Shortest string ":SV_TARGET"
      new Table(64, 32, -1, new short[] {529, 529, 529, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 529, 529, 529, 529, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 529}),
/* NxS[ 779] */ // Shortest string ":SV_RE"
      new Table(74, 1, -1, new short[] {780}),
/* NxS[ 780] */ // Shortest string ":SV_REN"
      new Table(52, 1, -1, new short[] {781}),
/* NxS[ 781] */ // Shortest string ":SV_REND"
      new Table(8, 1, -1, new short[] {782}),
/* NxS[ 782] */ // Shortest string ":SV_RENDE"
      new Table(60, 1, -1, new short[] {783}),
/* NxS[ 783] */ // Shortest string ":SV_RENDER"
      new Table(62, 1, -1, new short[] {784}),
/* NxS[ 784] */ // Shortest string ":SV_RENDERT"
      new Table(6, 1, -1, new short[] {785}),
/* NxS[ 785] */ // Shortest string ":SV_RENDERTA"
      new Table(60, 1, -1, new short[] {786}),
/* NxS[ 786] */ // Shortest string ":SV_RENDERTAR"
      new Table(56, 1, -1, new short[] {787}),
/* NxS[ 787] */ // Shortest string ":SV_RENDERTARG"
      new Table(8, 1, -1, new short[] {788}),
/* NxS[ 788] */ // Shortest string ":SV_VIEWPOR"
      new Table(62, 1, -1, new short[] {789}),
/* NxS[ 789] */ // Shortest string ":SV_VIEWPORT"
      new Table(6, 1, -1, new short[] {790}),
/* NxS[ 790] */ // Shortest string ":SV_VIEWPORTA"
      new Table(60, 1, -1, new short[] {791}),
/* NxS[ 791] */ // Shortest string ":SV_VIEWPORTAR"
      new Table(60, 1, -1, new short[] {792}),
/* NxS[ 792] */ // Shortest string ":SV_VIEWPORTARR"
      new Table(6, 1, -1, new short[] {793}),
/* NxS[ 793] */ // Shortest string ":SV_VIEWPORTARRA"
      new Table(80, 1, -1, new short[] {794}),
/* NxS[ 794] */ // Shortest string ":SV_SAMPLE"
      new Table(76, 1, -1, new short[] {795}),
/* NxS[ 795] */ // Shortest string ":SV_SAMPLEI"
      new Table(74, 1, -1, new short[] {796}),
/* NxS[ 796] */ // Shortest string ":SV_GROUPIN"
      new Table(52, 1, -1, new short[] {797}),
/* NxS[ 797] */ // Shortest string ":SV_GROUPIND"
      new Table(8, 1, -1, new short[] {798}),
/* NxS[ 798] */ // Shortest string ":SV_GROUPINDE"
      new Table(79, 1, -1, new short[] {529}),
/* NxS[ 799] */ // Shortest string ":SV_PR"
      new Table(76, 1, -1, new short[] {806}),
/* NxS[ 800] */ // Shortest string ":SV_PO"
      new Table(38, 1, -1, new short[] {801}),
/* NxS[ 801] */ // Shortest string ":SV_POS"
      new Table(76, 1, -1, new short[] {802}),
/* NxS[ 802] */ // Shortest string ":SV_POSI"
      new Table(62, 1, -1, new short[] {803}),
/* NxS[ 803] */ // Shortest string ":SV_POSIT"
      new Table(76, 1, -1, new short[] {804}),
/* NxS[ 804] */ // Shortest string ":SV_POSITI"
      new Table(73, 1, -1, new short[] {805}),
/* NxS[ 805] */ // Shortest string ":SV_POSITIO"
      new Table(74, 1, -1, new short[] {529}),
/* NxS[ 806] */ // Shortest string ":SV_PRI"
      new Table(70, 1, -1, new short[] {807}),
/* NxS[ 807] */ // Shortest string ":SV_PRIM"
      new Table(76, 1, -1, new short[] {808}),
/* NxS[ 808] */ // Shortest string ":SV_PRIMI"
      new Table(62, 1, -1, new short[] {809}),
/* NxS[ 809] */ // Shortest string ":SV_PRIMIT"
      new Table(76, 1, -1, new short[] {810}),
/* NxS[ 810] */ // Shortest string ":SV_PRIMITI"
      new Table(54, 1, -1, new short[] {734}),
/* NxS[ 811] */ // Shortest string ":SV_GS"
      new Table(76, 1, -1, new short[] {822}),
/* NxS[ 812] */ // Shortest string ":SV_GR"
      new Table(73, 1, -1, new short[] {813}),
/* NxS[ 813] */ // Shortest string ":SV_GRO"
      new Table(68, 1, -1, new short[] {814}),
/* NxS[ 814] */ // Shortest string ":SV_GROU"
      new Table(59, 1, -1, new short[] {815}),
/* NxS[ 815] */ // Shortest string ":SV_GROUP"
      new Table(62, 15, -1, new short[] {816, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 817}),
/* NxS[ 816] */ // Shortest string ":SV_GROUPT"
      new Table(12, 1, -1, new short[] {818}),
/* NxS[ 817] */ // Shortest string ":SV_GROUPI"
      new Table(52, 23, -1, new short[] {529, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          796}),
/* NxS[ 818] */ // Shortest string ":SV_GROUPTH"
      new Table(60, 1, -1, new short[] {819}),
/* NxS[ 819] */ // Shortest string ":SV_GROUPTHR"
      new Table(8, 1, -1, new short[] {820}),
/* NxS[ 820] */ // Shortest string ":SV_GROUPTHRE"
      new Table(6, 1, -1, new short[] {821}),
/* NxS[ 821] */ // Shortest string ":SV_GROUPTHREA"
      new Table(52, 1, -1, new short[] {735}),
/* NxS[ 822] */ // Shortest string ":SV_GSI"
      new Table(74, 1, -1, new short[] {823}),
/* NxS[ 823] */ // Shortest string ":SV_GSIN"
      new Table(38, 1, -1, new short[] {824}),
/* NxS[ 824] */ // Shortest string ":SV_GSINS"
      new Table(62, 1, -1, new short[] {720}),
/* NxS[ 825] */ // Shortest string ":SV_VE"
      new Table(60, 1, -1, new short[] {831}),
/* NxS[ 826] */ // Shortest string ":SV_VI"
      new Table(8, 1, -1, new short[] {827}),
/* NxS[ 827] */ // Shortest string ":SV_VIE"
      new Table(75, 1, -1, new short[] {828}),
/* NxS[ 828] */ // Shortest string ":SV_VIEW"
      new Table(59, 1, -1, new short[] {829}),
/* NxS[ 829] */ // Shortest string ":SV_VIEWP"
      new Table(73, 1, -1, new short[] {830}),
/* NxS[ 830] */ // Shortest string ":SV_VIEWPO"
      new Table(60, 1, -1, new short[] {788}),
/* NxS[ 831] */ // Shortest string ":SV_VER"
      new Table(62, 1, -1, new short[] {832}),
/* NxS[ 832] */ // Shortest string ":SV_VERT"
      new Table(8, 1, -1, new short[] {833}),
/* NxS[ 833] */ // Shortest string ":SV_VERTE"
      new Table(79, 1, -1, new short[] {735}),
/* NxS[ 834] */ // Shortest string ":SV_DE"
      new Table(59, 1, -1, new short[] {850}),
/* NxS[ 835] */ // Shortest string ":SV_DO"
      new Table(70, 1, -1, new short[] {843}),
/* NxS[ 836] */ // Shortest string ":SV_DI"
      new Table(38, 1, -1, new short[] {837}),
/* NxS[ 837] */ // Shortest string ":SV_DIS"
      new Table(59, 1, -1, new short[] {838}),
/* NxS[ 838] */ // Shortest string ":SV_DISP"
      new Table(6, 1, -1, new short[] {839}),
/* NxS[ 839] */ // Shortest string ":SV_DISPA"
      new Table(62, 1, -1, new short[] {840}),
/* NxS[ 840] */ // Shortest string ":SV_DISPAT"
      new Table(67, 1, -1, new short[] {841}),
/* NxS[ 841] */ // Shortest string ":SV_DISPATC"
      new Table(12, 1, -1, new short[] {842}),
/* NxS[ 842] */ // Shortest string ":SV_DISPATCH"
      new Table(62, 1, -1, new short[] {816}),
/* NxS[ 843] */ // Shortest string ":SV_DOM"
      new Table(6, 1, -1, new short[] {844}),
/* NxS[ 844] */ // Shortest string ":SV_DOMA"
      new Table(76, 1, -1, new short[] {845}),
/* NxS[ 845] */ // Shortest string ":SV_DOMAI"
      new Table(74, 1, -1, new short[] {846}),
/* NxS[ 846] */ // Shortest string ":SV_DOMAIN"
      new Table(72, 1, -1, new short[] {847}),
/* NxS[ 847] */ // Shortest string ":SV_DOMAINL"
      new Table(73, 1, -1, new short[] {848}),
/* NxS[ 848] */ // Shortest string ":SV_DOMAINLO"
      new Table(67, 1, -1, new short[] {849}),
/* NxS[ 849] */ // Shortest string ":SV_DOMAINLOC"
      new Table(6, 1, -1, new short[] {802}),
/* NxS[ 850] */ // Shortest string ":SV_DEP"
      new Table(62, 1, -1, new short[] {851}),
/* NxS[ 851] */ // Shortest string ":SV_DEPT"
      new Table(12, 1, -1, new short[] {529}),
/* NxS[ 852] */ // Shortest string ":SV_SA"
      new Table(70, 1, -1, new short[] {853}),
/* NxS[ 853] */ // Shortest string ":SV_SAM"
      new Table(59, 1, -1, new short[] {854}),
/* NxS[ 854] */ // Shortest string ":SV_SAMP"
      new Table(72, 1, -1, new short[] {855}),
/* NxS[ 855] */ // Shortest string ":SV_SAMPL"
      new Table(8, 1, -1, new short[] {794}),
/* NxS[ 856] */ // Shortest string ":BA"
      new Table(67, 1, -1, new short[] {881}),
/* NxS[ 857] */ // Shortest string ":BL"
      new Table(8, 1, -1, new short[] {866}),
/* NxS[ 858] */ // Shortest string ":BO"
      new Table(60, 1, -1, new short[] {860}),
/* NxS[ 859] */ // Shortest string ":BI"
      new Table(74, 1, -1, new short[] {518}),
/* NxS[ 860] */ // Shortest string ":BOR"
      new Table(52, 1, -1, new short[] {861}),
/* NxS[ 861] */ // Shortest string ":BORD"
      new Table(8, 1, -1, new short[] {862}),
/* NxS[ 862] */ // Shortest string ":BORDE"
      new Table(60, 1, -1, new short[] {863}),
/* NxS[ 863] */ // Shortest string ":BORDER"
      new Table(67, 1, -1, new short[] {864}),
/* NxS[ 864] */ // Shortest string ":BORDERC"
      new Table(73, 1, -1, new short[] {865}),
/* NxS[ 865] */ // Shortest string ":BORDERCO"
      new Table(72, 1, -1, new short[] {731}),
/* NxS[ 866] */ // Shortest string ":BLE"
      new Table(74, 1, -1, new short[] {867}),
/* NxS[ 867] */ // Shortest string ":BLEN"
      new Table(52, 1, -1, new short[] {868}),
/* NxS[ 868] */ // Shortest string ":BLEND"
      new Table(73, 27, -1, new short[] {869, -1, 870, 871, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 524}),
/* NxS[ 869] */ // Shortest string ":BLENDO"
      new Table(59, 1, -1, new short[] {666}),
/* NxS[ 870] */ // Shortest string ":BLENDW"
      new Table(8, 1, -1, new short[] {877}),
/* NxS[ 871] */ // Shortest string ":BLENDI"
      new Table(74, 1, -1, new short[] {872}),
/* NxS[ 872] */ // Shortest string ":BLENDIN"
      new Table(52, 1, -1, new short[] {873}),
/* NxS[ 873] */ // Shortest string ":BLENDIND"
      new Table(76, 1, -1, new short[] {874}),
/* NxS[ 874] */ // Shortest string ":BLENDINDI"
      new Table(67, 1, -1, new short[] {875}),
/* NxS[ 875] */ // Shortest string ":BLENDINDIC"
      new Table(8, 1, -1, new short[] {876}),
/* NxS[ 876] */ // Shortest string ":BLENDWEIGHT"
      new Table(38, 1, -1, new short[] {534}),
/* NxS[ 877] */ // Shortest string ":BLENDWE"
      new Table(76, 1, -1, new short[] {878}),
/* NxS[ 878] */ // Shortest string ":BLENDWEI"
      new Table(56, 1, -1, new short[] {879}),
/* NxS[ 879] */ // Shortest string ":BLENDWEIG"
      new Table(12, 1, -1, new short[] {880}),
/* NxS[ 880] */ // Shortest string ":BLENDWEIGH"
      new Table(62, 1, -1, new short[] {876}),
/* NxS[ 881] */ // Shortest string ":BAC"
      new Table(77, 1, -1, new short[] {882}),
/* NxS[ 882] */ // Shortest string ":BACK"
      new Table(13, 1, -1, new short[] {883}),
/* NxS[ 883] */ // Shortest string ":BACKF"
      new Table(6, 1, -1, new short[] {884}),
/* NxS[ 884] */ // Shortest string ":BACKFA"
      new Table(67, 1, -1, new short[] {885}),
/* NxS[ 885] */ // Shortest string ":BACKFAC"
      new Table(8, 1, -1, new short[] {886}),
/* NxS[ 886] */ // Shortest string ":BACKFACE"
      new Table(38, 1, -1, new short[] {887}),
/* NxS[ 887] */ // Shortest string ":BACKFACES"
      new Table(62, 1, -1, new short[] {888}),
/* NxS[ 888] */ // Shortest string ":BACKFACEST"
      new Table(8, 1, -1, new short[] {889}),
/* NxS[ 889] */ // Shortest string ":BACKFACESTE"
      new Table(74, 1, -1, new short[] {890}),
/* NxS[ 890] */ // Shortest string ":BACKFACESTEN"
      new Table(67, 1, -1, new short[] {891}),
/* NxS[ 891] */ // Shortest string ":BACKFACESTENC"
      new Table(76, 1, -1, new short[] {892}),
/* NxS[ 892] */ // Shortest string ":BACKFACESTENCI"
      new Table(72, 1, -1, new short[] {893}),
/* NxS[ 893] */ // Shortest string ":BACKFACESTENCIL"
      new Table(59, 46, -1, new short[] {895, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 896, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 894}),
/* NxS[ 894] */ // Shortest string ":BACKFACESTENCILF"
      new Table(68, 30, -1, new short[] {582, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 898}),
/* NxS[ 895] */ // Shortest string ":BACKFACESTENCILP"
      new Table(6, 1, -1, new short[] {900}),
/* NxS[ 896] */ // Shortest string ":BACKFACESTENCILZ"
      new Table(13, 1, -1, new short[] {897}),
/* NxS[ 897] */ // Shortest string ":BACKFACESTENCILZF"
      new Table(6, 1, -1, new short[] {898}),
/* NxS[ 898] */ // Shortest string ":BACKFACESTENCILFA"
      new Table(76, 1, -1, new short[] {899}),
/* NxS[ 899] */ // Shortest string ":BACKFACESTENCILFAI"
      new Table(72, 1, -1, new short[] {529}),
/* NxS[ 900] */ // Shortest string ":BACKFACESTENCILPA"
      new Table(38, 1, -1, new short[] {548}),
/* NxS[ 901] */ // Shortest string ":FR"
      new Table(73, 1, -1, new short[] {905}),
/* NxS[ 902] */ // Shortest string ":FO"
      new Table(56, 1, -1, new short[] {529}),
/* NxS[ 903] */ // Shortest string ":FI"
      new Table(72, 1, -1, new short[] {904}),
/* NxS[ 904] */ // Shortest string ":FIL"
      new Table(62, 11, -1, new short[] {630, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 585}),
/* NxS[ 905] */ // Shortest string ":FRO"
      new Table(74, 1, -1, new short[] {906}),
/* NxS[ 906] */ // Shortest string ":FRON"
      new Table(62, 1, -1, new short[] {907}),
/* NxS[ 907] */ // Shortest string ":FRONT"
      new Table(67, 38, -1, new short[] {908, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 883}),
/* NxS[ 908] */ // Shortest string ":FRONTC"
      new Table(73, 1, -1, new short[] {909}),
/* NxS[ 909] */ // Shortest string ":FRONTCO"
      new Table(68, 1, -1, new short[] {910}),
/* NxS[ 910] */ // Shortest string ":FRONTCOU"
      new Table(74, 1, -1, new short[] {911}),
/* NxS[ 911] */ // Shortest string ":FRONTCOUN"
      new Table(62, 1, -1, new short[] {912}),
/* NxS[ 912] */ // Shortest string ":FRONTCOUNT"
      new Table(8, 1, -1, new short[] {913}),
/* NxS[ 913] */ // Shortest string ":FRONTCOUNTE"
      new Table(60, 1, -1, new short[] {914}),
/* NxS[ 914] */ // Shortest string ":FRONTCOUNTER"
      new Table(67, 1, -1, new short[] {915}),
/* NxS[ 915] */ // Shortest string ":FRONTCOUNTERC"
      new Table(72, 1, -1, new short[] {916}),
/* NxS[ 916] */ // Shortest string ":FRONTCOUNTERCL"
      new Table(73, 1, -1, new short[] {917}),
/* NxS[ 917] */ // Shortest string ":FRONTCOUNTERCLO"
      new Table(67, 1, -1, new short[] {918}),
/* NxS[ 918] */ // Shortest string ":FRONTCOUNTERCLOC"
      new Table(77, 1, -1, new short[] {919}),
/* NxS[ 919] */ // Shortest string ":FRONTCOUNTERCLOCK"
      new Table(75, 1, -1, new short[] {920}),
/* NxS[ 920] */ // Shortest string ":FRONTCOUNTERCLOCKW"
      new Table(76, 1, -1, new short[] {921}),
/* NxS[ 921] */ // Shortest string ":FRONTCOUNTERCLOCKWI"
      new Table(38, 1, -1, new short[] {528}),
/* NxS[ 922] */ // Shortest string ":AD"
      new Table(52, 1, -1, new short[] {947}),
/* NxS[ 923] */ // Shortest string ":AL"
      new Table(59, 1, -1, new short[] {936}),
/* NxS[ 924] */ // Shortest string ":AN"
      new Table(62, 1, -1, new short[] {925}),
/* NxS[ 925] */ // Shortest string ":ANT"
      new Table(76, 1, -1, new short[] {926}),
/* NxS[ 926] */ // Shortest string ":ANTI"
      new Table(6, 1, -1, new short[] {927}),
/* NxS[ 927] */ // Shortest string ":ANTIA"
      new Table(72, 1, -1, new short[] {928}),
/* NxS[ 928] */ // Shortest string ":ANTIAL"
      new Table(76, 1, -1, new short[] {929}),
/* NxS[ 929] */ // Shortest string ":ANTIALI"
      new Table(6, 1, -1, new short[] {930}),
/* NxS[ 930] */ // Shortest string ":ANTIALIA"
      new Table(38, 1, -1, new short[] {931}),
/* NxS[ 931] */ // Shortest string ":ANTIALIAS"
      new Table(8, 1, -1, new short[] {932}),
/* NxS[ 932] */ // Shortest string ":ANTIALIASE"
      new Table(52, 1, -1, new short[] {933}),
/* NxS[ 933] */ // Shortest string ":ANTIALIASED"
      new Table(72, 1, -1, new short[] {934}),
/* NxS[ 934] */ // Shortest string ":ANTIALIASEDL"
      new Table(76, 1, -1, new short[] {935}),
/* NxS[ 935] */ // Shortest string ":ANTIALIASEDLI"
      new Table(74, 1, -1, new short[] {556}),
/* NxS[ 936] */ // Shortest string ":ALP"
      new Table(12, 1, -1, new short[] {937}),
/* NxS[ 937] */ // Shortest string ":ALPH"
      new Table(6, 1, -1, new short[] {938}),
/* NxS[ 938] */ // Shortest string ":ALPHA"
      new Table(62, 1, -1, new short[] {939}),
/* NxS[ 939] */ // Shortest string ":ALPHAT"
      new Table(73, 1, -1, new short[] {940}),
/* NxS[ 940] */ // Shortest string ":ALPHATO"
      new Table(67, 1, -1, new short[] {941}),
/* NxS[ 941] */ // Shortest string ":ALPHATOC"
      new Table(73, 1, -1, new short[] {942}),
/* NxS[ 942] */ // Shortest string ":ALPHATOCO"
      new Table(54, 1, -1, new short[] {943}),
/* NxS[ 943] */ // Shortest string ":ALPHATOCOV"
      new Table(8, 1, -1, new short[] {944}),
/* NxS[ 944] */ // Shortest string ":ALPHATOCOVE"
      new Table(60, 1, -1, new short[] {945}),
/* NxS[ 945] */ // Shortest string ":ALPHATOCOVER"
      new Table(6, 1, -1, new short[] {946}),
/* NxS[ 946] */ // Shortest string ":ALPHATOCOVERA"
      new Table(56, 1, -1, new short[] {556}),
/* NxS[ 947] */ // Shortest string ":ADD"
      new Table(60, 1, -1, new short[] {948}),
/* NxS[ 948] */ // Shortest string ":ADDR"
      new Table(8, 1, -1, new short[] {949}),
/* NxS[ 949] */ // Shortest string ":ADDRE"
      new Table(38, 1, -1, new short[] {950}),
/* NxS[ 950] */ // Shortest string ":ADDRES"
      new Table(38, 1, -1, new short[] {951}),
/* NxS[ 951] */ // Shortest string ":ADDRESS"
      new Table(54, 22, -1, new short[] {529, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 529, -1, -1, -1, -1, -1, -1, 529}),
/* NxS[ 952] */ // Shortest string "^Ma"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 51, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 954}),
/* NxS[ 953] */ // Shortest string "^Mi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 51}),
/* NxS[ 954] */ // Shortest string "^Mat"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 955}),
/* NxS[ 955] */ // Shortest string "^Mate"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 956}),
/* NxS[ 956] */ // Shortest string "^Mater"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 957, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 957] */ // Shortest string "^Materi"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 958}),
/* NxS[ 958] */ // Shortest string "^Stenci"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 959}),
/* NxS[ 959] */ // Shortest string "^Pass"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, 67, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, 67, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          67, -1, -1, -1, -1, -1}),
/* NxS[ 960] */ // Shortest string "Un"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 966, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 961] */ // Shortest string "^Us"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 962}),
/* NxS[ 962] */ // Shortest string "^Use"
      new Table(59, 65, 130, new short[] {963, 130, 130, 130, 130, 129, 
          129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 
          130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 963] */ // Shortest string "^UseP"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 964}),
/* NxS[ 964] */ // Shortest string "^Pa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 965, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 965] */ // Shortest string "^Pas"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 959, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 966] */ // Shortest string "Unp"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 967}),
/* NxS[ 967] */ // Shortest string "Unpa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 968, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 968] */ // Shortest string "Unpac"
      new Table(64, 71, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          969}),
/* NxS[ 969] */ // Shortest string "Unpack"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 970, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 970] */ // Shortest string "UnpackN"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 971, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 971] */ // Shortest string "UnpackNo"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 972}),
/* NxS[ 972] */ // Shortest string "UnpackNor"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 973, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 973] */ // Shortest string "UnpackNorm"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 974}),
/* NxS[ 974] */ // Shortest string "UnpackNorma"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 975}),
/* NxS[ 975] */ // Shortest string "UnpackNormal"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, 976, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 69, -1, -1, -1}),
/* NxS[ 976] */ // Shortest string "UnpackNormal\x20"
      new Table(17, 13, -1, new short[] {976, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 69}),
/* NxS[ 977] */ // Shortest string "^Cu"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 142}),
/* NxS[ 978] */ // Shortest string "^Co"
      new Table(33, 72, -1, new short[] {130, 986, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 987, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 979] */ // Shortest string "^CG"
      new Table(59, 65, 130, new short[] {980, 130, 130, 130, 130, 129, 
          129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 
          130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 980] */ // Shortest string "^CGP"
      new Table(60, 64, 130, new short[] {981, 130, 130, 130, 129, 129, 
          129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 
          129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 
          129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 981] */ // Shortest string "^CGPR"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 982, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 982] */ // Shortest string "^CGPRO"
      new Table(56, 68, 130, new short[] {983, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, 
          -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 983] */ // Shortest string "^CGPROG"
      new Table(60, 64, 130, new short[] {984, 130, 130, 130, 129, 129, 
          129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 
          129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 
          129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 984] */ // Shortest string "^CGPROGR"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 985, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 985] */ // Shortest string "^CGPROGRA"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          959, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[ 986] */ // Shortest string "^Col"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 990, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 987] */ // Shortest string "^Com"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 988, 130, 130, 130, 130, 130, 130, 130, 130, 51, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 988] */ // Shortest string "^comb"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 989, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 989] */ // Shortest string "^combi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 137}),
/* NxS[ 990] */ // Shortest string "^Colo"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 70}),
/* NxS[ 991] */ // Shortest string "^ColorM"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 992}),
/* NxS[ 992] */ // Shortest string "^ColorMa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          993, 130, 130, 130, 130, 130, 130, 130, 426, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 993] */ // Shortest string "^ColorMat"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 994}),
/* NxS[ 994] */ // Shortest string "^ColorMate"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 995}),
/* NxS[ 995] */ // Shortest string "^ColorMater"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 433, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 996] */ // Shortest string "^Ta"
      new Table(63, 61, 130, new short[] {965, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[ 997] */ // Shortest string "^Re"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 1000, 130, 130, 130, 130, 51, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 1001, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 1002, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[ 998] */ // Shortest string "^Ra"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 999}),
/* NxS[ 999] */ // Shortest string "^Ran"
      new Table(63, 61, 130, new short[] {137, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1000] */ // Shortest string "^Rea"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 423}),
/* NxS[1001] */ // Shortest string "^Rev"
      new Table(64, 66, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 1012}),
/* NxS[1002] */ // Shortest string "^Req"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1003, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1003] */ // Shortest string "^Requ"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1004, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1004] */ // Shortest string "^Requi"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1005}),
/* NxS[1005] */ // Shortest string "^Requir"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1006}),
/* NxS[1006] */ // Shortest string "^Require"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 1007, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1007] */ // Shortest string "^RequireO"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1008, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1008] */ // Shortest string "^RequireOp"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1009}),
/* NxS[1009] */ // Shortest string "^RequireOpt"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1010, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1010] */ // Shortest string "^RequireOpti"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1011, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1011] */ // Shortest string "^RequireOptio"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 505}),
/* NxS[1012] */ // Shortest string "^RevS"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1013, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1013] */ // Shortest string "^RevSu"
      new Table(64, 69, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 51}),
/* NxS[1014] */ // Shortest string "^Pr"
      new Table(33, 72, -1, new short[] {130, 130, 1015, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1016, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1015] */ // Shortest string "^Pre"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1084, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1016] */ // Shortest string "^Pro"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 1017, 130, 130, 130, 1018, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1017] */ // Shortest string "Proc"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1023}),
/* NxS[1018] */ // Shortest string "^Prop"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1019}),
/* NxS[1019] */ // Shortest string "^Prope"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1020}),
/* NxS[1020] */ // Shortest string "^Proper"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1021}),
/* NxS[1021] */ // Shortest string "^Propert"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1022, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1022] */ // Shortest string "^Properti"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 965}),
/* NxS[1023] */ // Shortest string "Proce"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1024, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1024] */ // Shortest string "Proces"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1025, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1025] */ // Shortest string "Process"
      new Table(62, 62, 130, new short[] {1026, 130, 129, 1027, 129, 130, 
          130, 130, 130, -1, 130, 130, 130, 130, 1028, 130, 130, 130, 130, 129, 129, 129, 
          129, 129, 130, 130, -1, 130, 1029, -1, -1, -1, -1, 129, 130, 130, 129, 130, 
          -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1026] */ // Shortest string "ProcessT"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1083}),
/* NxS[1027] */ // Shortest string "Process2"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          149, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 1062, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 129, 129, 129, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, 129, 129, 129, 129, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, 129}),
/* NxS[1028] */ // Shortest string "ProcessI"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1046, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1029] */ // Shortest string "ProcessQ"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1030, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1030] */ // Shortest string "ProcessQu"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1031}),
/* NxS[1031] */ // Shortest string "ProcessQua"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 1032}),
/* NxS[1032] */ // Shortest string "ProcessTri"
      new Table(62, 62, 130, new short[] {1033, 130, 129, 129, 129, 130, 
          130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 
          129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, 
          -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1033] */ // Shortest string "ProcessTriT"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1034}),
/* NxS[1034] */ // Shortest string "ProcessTriTe"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1035, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1035] */ // Shortest string "ProcessTriTes"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1036, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1036] */ // Shortest string "ProcessTriTess"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 1037, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1037] */ // Shortest string "ProcessTriTessF"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1038}),
/* NxS[1038] */ // Shortest string "ProcessTriTessFa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 1039, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1039] */ // Shortest string "ProcessTriTessFac"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1040}),
/* NxS[1040] */ // Shortest string "ProcessTriTessFact"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1041, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1041] */ // Shortest string "ProcessTriTessFacto"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1042}),
/* NxS[1042] */ // Shortest string "ProcessTriTessFactor"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1043, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1043] */ // Shortest string "ProcessTriTessFactors"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          396, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 1044, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1044] */ // Shortest string "ProcessTriTessFactorsA"
      new Table(58, 66, 130, new short[] {1045, 130, 130, 130, 130, 130, 
          129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 
          130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1045] */ // Shortest string "ProcessTriTessFactorsAv"
      new Table(63, 61, 130, new short[] {399, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1046] */ // Shortest string "ProcessIs"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1047, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1047] */ // Shortest string "ProcessIso"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 1048}),
/* NxS[1048] */ // Shortest string "ProcessIsol"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1049, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1049] */ // Shortest string "ProcessIsoli"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1050}),
/* NxS[1050] */ // Shortest string "ProcessIsolin"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1051}),
/* NxS[1051] */ // Shortest string "ProcessIsoline"
      new Table(62, 62, 130, new short[] {1052, 130, 129, 129, 129, 130, 
          130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 
          129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, 
          -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1052] */ // Shortest string "ProcessIsolineT"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1053}),
/* NxS[1053] */ // Shortest string "ProcessIsolineTe"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1054, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1054] */ // Shortest string "ProcessIsolineTes"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1055, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1055] */ // Shortest string "ProcessIsolineTess"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 1056, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1056] */ // Shortest string "ProcessIsolineTessF"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1057}),
/* NxS[1057] */ // Shortest string "ProcessIsolineTessFa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 1058, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1058] */ // Shortest string "ProcessIsolineTessFac"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1059}),
/* NxS[1059] */ // Shortest string "ProcessIsolineTessFact"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1060, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1060] */ // Shortest string "ProcessIsolineTessFacto"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1061}),
/* NxS[1061] */ // Shortest string "ab"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 399, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1062] */ // Shortest string "Process2D"
      new Table(90, 37, -1, new short[] {1063, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 235}),
/* NxS[1063] */ // Shortest string "Process2DQ"
      new Table(44, 1, -1, new short[] {1064}),
/* NxS[1064] */ // Shortest string "Process2DQu"
      new Table(40, 1, -1, new short[] {1065}),
/* NxS[1065] */ // Shortest string "Process2DQua"
      new Table(37, 1, -1, new short[] {1066}),
/* NxS[1066] */ // Shortest string "Process2DQuad"
      new Table(62, 1, -1, new short[] {1067}),
/* NxS[1067] */ // Shortest string "Process2DQuadT"
      new Table(35, 1, -1, new short[] {1068}),
/* NxS[1068] */ // Shortest string "Process2DQuadTe"
      new Table(47, 1, -1, new short[] {1069}),
/* NxS[1069] */ // Shortest string "Process2DQuadTes"
      new Table(47, 1, -1, new short[] {1070}),
/* NxS[1070] */ // Shortest string "Process2DQuadTess"
      new Table(13, 1, -1, new short[] {1071}),
/* NxS[1071] */ // Shortest string "Process2DQuadTessF"
      new Table(40, 1, -1, new short[] {1072}),
/* NxS[1072] */ // Shortest string "Process2DQuadTessFa"
      new Table(46, 1, -1, new short[] {1073}),
/* NxS[1073] */ // Shortest string "Process2DQuadTessFac"
      new Table(39, 1, -1, new short[] {1074}),
/* NxS[1074] */ // Shortest string "Process2DQuadTessFact"
      new Table(48, 1, -1, new short[] {1075}),
/* NxS[1075] */ // Shortest string "Process2DQuadTessFacto"
      new Table(42, 1, -1, new short[] {1076}),
/* NxS[1076] */ // Shortest string "Process2DQuadTessFactor"
      new Table(47, 1, -1, new short[] {1077}),
/* NxS[1077] */ // Shortest string "Process2DQuadTessFactors"
      new Table(70, 28, -1, new short[] {1079, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1078}),
/* NxS[1078] */ // Shortest string "Process2DQuadTessFactorsA"
      new Table(58, 1, -1, new short[] {1082}),
/* NxS[1079] */ // Shortest string "Process2DQuadTessFactorsM"
      new Table(40, 12, -1, new short[] {1080, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1081}),
/* NxS[1080] */ // Shortest string "Process2DQuadTessFactorsMa"
      new Table(5, 1, -1, new short[] {400}),
/* NxS[1081] */ // Shortest string "Process2DQuadTessFactorsMi"
      new Table(36, 1, -1, new short[] {400}),
/* NxS[1082] */ // Shortest string "Process2DQuadTessFactorsAv"
      new Table(63, 1, -1, new short[] {400}),
/* NxS[1083] */ // Shortest string "ProcessTr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1032, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1084] */ // Shortest string "^Prep"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1085}),
/* NxS[1085] */ // Shortest string "^Prepa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1086, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1086] */ // Shortest string "^Prepas"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1087, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1087] */ // Shortest string "^Prepass"
      new Table(64, 61, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 1088, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1089}),
/* NxS[1088] */ // Shortest string "^PrepassF"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1090, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1089] */ // Shortest string "^ForwardB"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 496}),
/* NxS[1090] */ // Shortest string "^PrepassFi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 433}),
/* NxS[1091] */ // Shortest string "Ge"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1123}),
/* NxS[1092] */ // Shortest string "^Gr"
      new Table(33, 72, -1, new short[] {130, 130, 1093, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1094, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1093] */ // Shortest string "^Gre"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1122}),
/* NxS[1094] */ // Shortest string "Gro"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1095, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1095] */ // Shortest string "Grou"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1096, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1096] */ // Shortest string "All"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          1097, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1097] */ // Shortest string "AllM"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1098}),
/* NxS[1098] */ // Shortest string "AllMe"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1099, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1099] */ // Shortest string "AllMem"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1100, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1100] */ // Shortest string "AllMemo"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1101}),
/* NxS[1101] */ // Shortest string "AllMemor"
      new Table(57, 67, 130, new short[] {1102, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 
          129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1102] */ // Shortest string "AllMemory"
      new Table(64, 61, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1103}),
/* NxS[1103] */ // Shortest string "AllMemoryB"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1104}),
/* NxS[1104] */ // Shortest string "AllMemoryBa"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1105}),
/* NxS[1105] */ // Shortest string "AllMemoryBar"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1106}),
/* NxS[1106] */ // Shortest string "AllMemoryBarr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1107, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1107] */ // Shortest string "AllMemoryBarri"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1108}),
/* NxS[1108] */ // Shortest string "AllMemoryBarrie"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1109}),
/* NxS[1109] */ // Shortest string "AllMemoryBarrier"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 1110, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, 400, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 62, -1, -1, -1}),
/* NxS[1110] */ // Shortest string "AllMemoryBarrierW"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1111, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1111] */ // Shortest string "AllMemoryBarrierWi"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1112}),
/* NxS[1112] */ // Shortest string "AllMemoryBarrierWit"
      new Table(53, 71, 130, new short[] {1113, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, 
          -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1}),
/* NxS[1113] */ // Shortest string "AllMemoryBarrierWith"
      new Table(56, 68, 130, new short[] {1114, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, 
          -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1114] */ // Shortest string "AllMemoryBarrierWithG"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1115}),
/* NxS[1115] */ // Shortest string "AllMemoryBarrierWithGr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1116, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1116] */ // Shortest string "AllMemoryBarrierWithGro"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1117, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1117] */ // Shortest string "AllMemoryBarrierWithGrou"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1118, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1118] */ // Shortest string "AllMemoryBarrierWithGroup"
      new Table(64, 66, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 1119}),
/* NxS[1119] */ // Shortest string "AllMemoryBarrierWithGroupS"
      new Table(57, 67, 130, new short[] {1120, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 
          129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1120] */ // Shortest string "tru"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1121}),
/* NxS[1121] */ // Shortest string "fra"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 399, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1122] */ // Shortest string "^Grea"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 434}),
/* NxS[1123] */ // Shortest string "Get"
      new Table(60, 64, 130, new short[] {1124, 130, 130, 130, 129, 129, 
          129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 
          129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 
          129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1124] */ // Shortest string "GetR"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1125}),
/* NxS[1125] */ // Shortest string "GetRe"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1126}),
/* NxS[1126] */ // Shortest string "GetRen"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 1127}),
/* NxS[1127] */ // Shortest string "GetRend"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1128}),
/* NxS[1128] */ // Shortest string "GetRende"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1129}),
/* NxS[1129] */ // Shortest string "GetRender"
      new Table(62, 62, 130, new short[] {1130, 130, 129, 129, 129, 130, 
          130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 
          129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, 
          -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1130] */ // Shortest string "GetRenderT"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1131}),
/* NxS[1131] */ // Shortest string "GetRenderTa"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1132}),
/* NxS[1132] */ // Shortest string "GetRenderTar"
      new Table(63, 61, 130, new short[] {1133, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1133] */ // Shortest string "GetRenderTarg"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1134}),
/* NxS[1134] */ // Shortest string "GetRenderTarge"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1135}),
/* NxS[1135] */ // Shortest string "GetRenderTarget"
      new Table(64, 66, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 1136}),
/* NxS[1136] */ // Shortest string "GetRenderTargetS"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1137}),
/* NxS[1137] */ // Shortest string "GetRenderTargetSa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1138, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1138] */ // Shortest string "GetRenderTargetSam"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1139, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1139] */ // Shortest string "GetRenderTargetSamp"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 1140}),
/* NxS[1140] */ // Shortest string "GetRenderTargetSampl"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1141}),
/* NxS[1141] */ // Shortest string "GetRenderTargetSample"
      new Table(59, 65, 130, new short[] {1142, 130, 130, 130, 130, 129, 
          129, 129, 1143, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 
          130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1142] */ // Shortest string "GetRenderTargetSampleP"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1147, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1143] */ // Shortest string "GetRenderTargetSampleC"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1144, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1144] */ // Shortest string "GetRenderTargetSampleCo"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1145, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1145] */ // Shortest string "asui"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1146}),
/* NxS[1146] */ // Shortest string "li"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 399}),
/* NxS[1147] */ // Shortest string "GetRenderTargetSamplePo"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1148, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1148] */ // Shortest string "GetRenderTargetSamplePos"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1149, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1149] */ // Shortest string "GetRenderTargetSamplePosi"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1150}),
/* NxS[1150] */ // Shortest string "GetRenderTargetSamplePosit"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1151, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1151] */ // Shortest string "GetRenderTargetSamplePositi"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 402, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1152] */ // Shortest string "^Ve"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1153}),
/* NxS[1153] */ // Shortest string "^Ver"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1154}),
/* NxS[1154] */ // Shortest string "^Vert"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1155}),
/* NxS[1155] */ // Shortest string "^Verte"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 71, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1156] */ // Shortest string "^VertexL"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          72, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1157] */ // Shortest string "^VertexLMR"
      new Table(56, 68, 130, new short[] {1158, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, 
          -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1158] */ // Shortest string "^VertexLMRG"
      new Table(64, 61, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1159}),
/* NxS[1159] */ // Shortest string "^VertexLMRGB"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          51, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1160] */ // Shortest string "^De"
      new Table(58, 70, 130, new short[] {1183, 130, 130, 130, 130, 130, 
          129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 
          130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 130, 130, 130, 1182}),
/* NxS[1161] */ // Shortest string "^Di"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 1180, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1162] */ // Shortest string "D3"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          149, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 1167, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 129, 129, 129, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, 129, 129, 129, 129, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, 129}),
/* NxS[1163] */ // Shortest string "^DO"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 1164, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1164] */ // Shortest string "^DOU"
      new Table(64, 61, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1165}),
/* NxS[1165] */ // Shortest string "^DOUB"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 1166, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1166] */ // Shortest string "^DOUBL"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 51, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1167] */ // Shortest string "D3D"
      new Table(35, 33, -1, new short[] {235, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1168}),
/* NxS[1168] */ // Shortest string "D3DC"
      new Table(73, 1, -1, new short[] {1169}),
/* NxS[1169] */ // Shortest string "D3DCO"
      new Table(72, 1, -1, new short[] {1170}),
/* NxS[1170] */ // Shortest string "D3DCOL"
      new Table(73, 1, -1, new short[] {1171}),
/* NxS[1171] */ // Shortest string "D3DCOLO"
      new Table(60, 1, -1, new short[] {1172}),
/* NxS[1172] */ // Shortest string "D3DCOLOR"
      new Table(39, 1, -1, new short[] {1173}),
/* NxS[1173] */ // Shortest string "D3DCOLORt"
      new Table(48, 1, -1, new short[] {1174}),
/* NxS[1174] */ // Shortest string "D3DCOLORto"
      new Table(68, 1, -1, new short[] {1175}),
/* NxS[1175] */ // Shortest string "D3DCOLORtoU"
      new Table(33, 1, -1, new short[] {1176}),
/* NxS[1176] */ // Shortest string "D3DCOLORtoUB"
      new Table(80, 1, -1, new short[] {1177}),
/* NxS[1177] */ // Shortest string "D3DCOLORtoUBY"
      new Table(62, 1, -1, new short[] {1178}),
/* NxS[1178] */ // Shortest string "D3DCOLORtoUBYT"
      new Table(8, 1, -1, new short[] {1179}),
/* NxS[1179] */ // Shortest string "D3DCOLORtoUBYTE"
      new Table(81, 1, -1, new short[] {400}),
/* NxS[1180] */ // Shortest string "^Dif"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 1181, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1181] */ // Shortest string "^Diff"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 496, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1182] */ // Shortest string "^Den"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1186, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1183] */ // Shortest string "Dev"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1184, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1184] */ // Shortest string "Devi"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 1185, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1185] */ // Shortest string "Devic"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1096}),
/* NxS[1186] */ // Shortest string "^Dens"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1187, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1187] */ // Shortest string "^Densi"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1188}),
/* NxS[1188] */ // Shortest string "^Densit"
      new Table(57, 67, 130, new short[] {51, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 
          129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1189] */ // Shortest string "is"
      new Table(33, 72, -1, new short[] {130, 130, 130, 1190, 130, 130, 
          130, 130, 130, 130, 130, 130, 1191, 130, 130, 130, 130, 130, 1192, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1190] */ // Shortest string "isn"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 402}),
/* NxS[1191] */ // Shortest string "isf"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1194, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1192] */ // Shortest string "isi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1193}),
/* NxS[1193] */ // Shortest string "mod"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 399, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1194] */ // Shortest string "isfi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1195}),
/* NxS[1195] */ // Shortest string "isfin"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1196, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1196] */ // Shortest string "satura"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 413}),
/* NxS[1197] */ // Shortest string "po"
      new Table(55, 69, 130, new short[] {399, 130, 130, 130, 130, 130, 
          130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, 
          -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1198] */ // Shortest string "ma"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 399, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 399}),
/* NxS[1199] */ // Shortest string "al"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 399}),
/* NxS[1200] */ // Shortest string "mo"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 1193}),
/* NxS[1201] */ // Shortest string "sa"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1214}),
/* NxS[1202] */ // Shortest string "sm"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1207, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1203] */ // Shortest string "si"
      new Table(63, 65, 130, new short[] {402, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 130, 130, 130, 1205}),
/* NxS[1204] */ // Shortest string "sq"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1146}),
/* NxS[1205] */ // Shortest string "sin"
      new Table(46, 78, 130, new short[] {1206, 130, 130, 130, 130, 130, 
          130, 399, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 
          130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 
          129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, 
          -1, -1, -1, 130, 130, -1, -1, -1, 400, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 62, -1, -1, -1}),
/* NxS[1206] */ // Shortest string "ac"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1061, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1207] */ // Shortest string "smo"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1208, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1208] */ // Shortest string "smoo"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1209}),
/* NxS[1209] */ // Shortest string "smoot"
      new Table(53, 71, 130, new short[] {1210, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, 
          -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1}),
/* NxS[1210] */ // Shortest string "smooth"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1211, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1211] */ // Shortest string "smooths"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1212}),
/* NxS[1212] */ // Shortest string "st"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1213}),
/* NxS[1213] */ // Shortest string "rc"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 399, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1214] */ // Shortest string "sat"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1215, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1215] */ // Shortest string "satu"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1216}),
/* NxS[1216] */ // Shortest string "satur"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1196}),
/* NxS[1217] */ // Shortest string "cl"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 1229, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1213, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1218] */ // Shortest string "ce"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1199, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1219] */ // Shortest string "cr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1228, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1220] */ // Shortest string "^co"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1221, 130, 130, 1222, 130, 1223, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1221] */ // Shortest string "cou"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1224}),
/* NxS[1222] */ // Shortest string "tan"
      new Table(53, 71, 130, new short[] {399, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, 
          -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, 
          -1, 400, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, 
          -1}),
/* NxS[1223] */ // Shortest string "^com"
      new Table(64, 69, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 988}),
/* NxS[1224] */ // Shortest string "coun"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1225}),
/* NxS[1225] */ // Shortest string "count"
      new Table(64, 69, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 1226}),
/* NxS[1226] */ // Shortest string "countb"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1227, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1227] */ // Shortest string "countbi"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1061}),
/* NxS[1228] */ // Shortest string "cro"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1061, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1229] */ // Shortest string "cla"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1213, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1230] */ // Shortest string "fl"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 397, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1231] */ // Shortest string "fa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 1261, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1232] */ // Shortest string "fr"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1260, 130, 130, 130, 130, 1121}),
/* NxS[1233] */ // Shortest string "fm"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 419, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1234] */ // Shortest string "fi"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1251}),
/* NxS[1235] */ // Shortest string "fw"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1248, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1236] */ // Shortest string "f1"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          149, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 158, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 129, 129, 129, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, 129, 1243, 129, 129, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, 129}),
/* NxS[1237] */ // Shortest string "f3"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          149, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 158, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 129, 1238, 129, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, 129, 129, 129, 129, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, 129}),
/* NxS[1238] */ // Shortest string "f32"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          1239, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 158, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 129, 129, 129, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, 129, 129, 129, 129, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, 129}),
/* NxS[1239] */ // Shortest string "f32t"
      new Table(35, 23, -1, new short[] {307, -1, -1, -1, -1, -1, 
          278, 284, -1, -1, -1, -1, -1, 1240, -1, -1, -1, -1, -1, -1, -1, -1, 
          308}),
/* NxS[1240] */ // Shortest string "f32to"
      new Table(45, 1, -1, new short[] {1241}),
/* NxS[1241] */ // Shortest string "f32tof"
      new Table(64, 1, -1, new short[] {1242}),
/* NxS[1242] */ // Shortest string "f32tof1"
      new Table(83, 1, -1, new short[] {400}),
/* NxS[1243] */ // Shortest string "f16"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          1244, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 158, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 129, 129, 129, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, 129, 129, 129, 129, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, 129}),
/* NxS[1244] */ // Shortest string "f16t"
      new Table(35, 23, -1, new short[] {307, -1, -1, -1, -1, -1, 
          278, 284, -1, -1, -1, -1, -1, 1245, -1, -1, -1, -1, -1, -1, -1, -1, 
          308}),
/* NxS[1245] */ // Shortest string "f16to"
      new Table(45, 1, -1, new short[] {1246}),
/* NxS[1246] */ // Shortest string "f16tof"
      new Table(66, 1, -1, new short[] {1247}),
/* NxS[1247] */ // Shortest string "f16tof3"
      new Table(65, 1, -1, new short[] {400}),
/* NxS[1248] */ // Shortest string "fwi"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 1249}),
/* NxS[1249] */ // Shortest string "leng"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1250}),
/* NxS[1250] */ // Shortest string "lengt"
      new Table(53, 71, 130, new short[] {399, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, 
          -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1}),
/* NxS[1251] */ // Shortest string "fir"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1252, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1252] */ // Shortest string "firs"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1253}),
/* NxS[1253] */ // Shortest string "first"
      new Table(64, 69, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 1254}),
/* NxS[1254] */ // Shortest string "firstb"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1255, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1255] */ // Shortest string "firstbi"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1256}),
/* NxS[1256] */ // Shortest string "firstbit"
      new Table(33, 72, -1, new short[] {130, 1257, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1258, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1257] */ // Shortest string "firstbitl"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1197, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1258] */ // Shortest string "firstbith"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1259, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1259] */ // Shortest string "firstbithi"
      new Table(63, 61, 130, new short[] {1250, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1260] */ // Shortest string "lde"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 1213, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1261] */ // Shortest string "fac"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1262}),
/* NxS[1262] */ // Shortest string "face"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 1263, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1263] */ // Shortest string "facef"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1264, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1264] */ // Shortest string "facefo"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1265}),
/* NxS[1265] */ // Shortest string "facefor"
      new Table(55, 69, 130, new short[] {1266, 130, 130, 130, 130, 130, 
          130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, 
          -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1266] */ // Shortest string "faceforw"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1267}),
/* NxS[1267] */ // Shortest string "faceforwa"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 419}),
/* NxS[1268] */ // Shortest string "re"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 1276, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 1277, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1269] */ // Shortest string "ra"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 1273}),
/* NxS[1270] */ // Shortest string "rs"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 1204, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1271] */ // Shortest string "ro"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1272, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1272] */ // Shortest string "rou"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 419}),
/* NxS[1273] */ // Shortest string "rad"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1274, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1274] */ // Shortest string "radi"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1275}),
/* NxS[1275] */ // Shortest string "radia"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1061}),
/* NxS[1276] */ // Shortest string "ref"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 1281, 130, 130, 130, 130, 130, 130, 130, 1282}),
/* NxS[1277] */ // Shortest string "rev"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1278}),
/* NxS[1278] */ // Shortest string "reve"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1279}),
/* NxS[1279] */ // Shortest string "rever"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1280, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1280] */ // Shortest string "revers"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1225}),
/* NxS[1281] */ // Shortest string "refl"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1283}),
/* NxS[1282] */ // Shortest string "refr"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1283}),
/* NxS[1283] */ // Shortest string "refle"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 1146, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1284] */ // Shortest string "an"
      new Table(57, 67, 130, new short[] {399, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 
          129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1285] */ // Shortest string "at"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1297}),
/* NxS[1286] */ // Shortest string "as"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 1287, 130, 
          130, 130, 130, 130, 130, 1288, 1289, 130, 130, 130, 130, 130, 1290, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1287] */ // Shortest string "asd"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1294, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1288] */ // Shortest string "asu"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1145, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1289] */ // Shortest string "asf"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 1292}),
/* NxS[1290] */ // Shortest string "asi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1291}),
/* NxS[1291] */ // Shortest string "asin"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, 400, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 62, -1, -1, -1, 130, 130, 130, 130, 130, 130, 399}),
/* NxS[1292] */ // Shortest string "asfl"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1293, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1293] */ // Shortest string "asflo"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1146}),
/* NxS[1294] */ // Shortest string "asdo"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1295, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1295] */ // Shortest string "asdou"
      new Table(64, 69, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 1296}),
/* NxS[1296] */ // Shortest string "asdoub"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 413}),
/* NxS[1297] */ // Shortest string "ata"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1298}),
/* NxS[1298] */ // Shortest string "exp"
      new Table(64, 60, 130, new short[] {129, 1299, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, 400, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 62, -1, -1, -1}),
/* NxS[1299] */ // Shortest string "log2"
      new Table(81, 77, -1, new short[] {129, 129, 129, 129, 129, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, 129, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 400, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 62, -1, -1, -1, 143, 144, 145, 146, 147, 148, 149, -1, 150, 151, -1, 
          152, 153, 154, 155, 248, -1, 156, 157, 158, -1, 159, 160, 161, -1, 162, 163, 
          164, -1, 165, -1, 129, 129, 129}),
/* NxS[1300] */ // Shortest string "te"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 1308, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1301] */ // Shortest string "ta"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1222}),
/* NxS[1302] */ // Shortest string "tr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 1303, 130, 130, 130, 1120, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1303] */ // Shortest string "tra"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1304}),
/* NxS[1304] */ // Shortest string "tran"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1305, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1305] */ // Shortest string "trans"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1306, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1306] */ // Shortest string "transp"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1307, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1307] */ // Shortest string "noi"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 413, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1308] */ // Shortest string "tex"
      new Table(64, 60, 130, new short[] {1309, 1309, 1309, 1310, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1309] */ // Shortest string "tex1"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          149, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 1321, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 129, 129, 129, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, 129, 129, 129, 129, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, 129}),
/* NxS[1310] */ // Shortest string "texC"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 1311, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1311] */ // Shortest string "texCU"
      new Table(64, 61, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1312}),
/* NxS[1312] */ // Shortest string "texCUB"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 1313, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1313] */ // Shortest string "texCUBE"
      new Table(63, 79, 130, new short[] {1316, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, 400, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 62, -1, -1, -1, 130, 1233, 130, 130, 130, 130, 130, 130, 1314, 
          130, 130, 130, 130, 130, 130, 130, 130, 1315}),
/* NxS[1314] */ // Shortest string "texCUBEb"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1320, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1315] */ // Shortest string "texCUBEp"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1318}),
/* NxS[1316] */ // Shortest string "texCUBEg"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1317}),
/* NxS[1317] */ // Shortest string "texCUBEgr"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 419}),
/* NxS[1318] */ // Shortest string "texCUBEpr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1319, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1319] */ // Shortest string "texCUBEpro"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 399, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1320] */ // Shortest string "texCUBEbi"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1061}),
/* NxS[1321] */ // Shortest string "tex1D"
      new Table(17, 47, -1, new short[] {400, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, 1322, 235, -1, -1, -1, 
          -1, -1, 1323, -1, -1, -1, -1, -1, -1, -1, -1, 1324, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1325}),
/* NxS[1322] */ // Shortest string "tex1Dl"
      new Table(48, 1, -1, new short[] {1327}),
/* NxS[1323] */ // Shortest string "tex1Db"
      new Table(51, 1, -1, new short[] {1330}),
/* NxS[1324] */ // Shortest string "tex1Dp"
      new Table(42, 1, -1, new short[] {1328}),
/* NxS[1325] */ // Shortest string "tex1Dg"
      new Table(42, 1, -1, new short[] {1326}),
/* NxS[1326] */ // Shortest string "tex1Dgr"
      new Table(40, 1, -1, new short[] {1327}),
/* NxS[1327] */ // Shortest string "tex1Dlo"
      new Table(37, 1, -1, new short[] {400}),
/* NxS[1328] */ // Shortest string "tex1Dpr"
      new Table(48, 1, -1, new short[] {1329}),
/* NxS[1329] */ // Shortest string "tex1Dpro"
      new Table(89, 1, -1, new short[] {400}),
/* NxS[1330] */ // Shortest string "tex1Dbi"
      new Table(40, 1, -1, new short[] {1331}),
/* NxS[1331] */ // Shortest string "tex1Dbia"
      new Table(47, 1, -1, new short[] {400}),
/* NxS[1332] */ // Shortest string "^Se"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          1374, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1375, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1333] */ // Shortest string "^St"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1371}),
/* NxS[1334] */ // Shortest string "^Su"
      new Table(64, 69, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 73}),
/* NxS[1335] */ // Shortest string "^So"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 1357, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1336] */ // Shortest string "^Sp"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1354}),
/* NxS[1337] */ // Shortest string "^Sh"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 1338, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1339, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1338] */ // Shortest string "^Sha"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 1343}),
/* NxS[1339] */ // Shortest string "^Shi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1340}),
/* NxS[1340] */ // Shortest string "^Shin"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1341, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1341] */ // Shortest string "^Shini"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1342}),
/* NxS[1342] */ // Shortest string "^Shinin"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 457}),
/* NxS[1343] */ // Shortest string "^Shad"
      new Table(33, 72, -1, new short[] {130, 130, 1344, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1345, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1344] */ // Shortest string "^Shade"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 959}),
/* NxS[1345] */ // Shortest string "^Shado"
      new Table(55, 69, 130, new short[] {1346, 130, 130, 130, 130, 130, 
          130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, 
          -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1346] */ // Shortest string "^Shadow"
      new Table(64, 60, 130, new short[] {129, 129, 129, 1347, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1347] */ // Shortest string "^ShadowC"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 1348, 130, 130, 130, 130, 130, 130, 130, 1349, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1348] */ // Shortest string "^ShadowCa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1122, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1349] */ // Shortest string "^ShadowCo"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 1350}),
/* NxS[1350] */ // Shortest string "^ShadowCol"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 1351}),
/* NxS[1351] */ // Shortest string "^ShadowColl"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1352}),
/* NxS[1352] */ // Shortest string "^ShadowColle"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 1353, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1353] */ // Shortest string "^ShadowCollec"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 452}),
/* NxS[1354] */ // Shortest string "^Spe"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 1355, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1355] */ // Shortest string "^Spec"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1356, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1356] */ // Shortest string "^Specu"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 500}),
/* NxS[1357] */ // Shortest string "^Sof"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1358}),
/* NxS[1358] */ // Shortest string "^Soft"
      new Table(54, 70, 130, new short[] {1359, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, 
          -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1359] */ // Shortest string "^SoftV"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1360}),
/* NxS[1360] */ // Shortest string "^SoftVe"
      new Table(63, 61, 130, new short[] {1361, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1361] */ // Shortest string "^SoftVeg"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1362}),
/* NxS[1362] */ // Shortest string "^SoftVege"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1363}),
/* NxS[1363] */ // Shortest string "^SoftVeget"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1364}),
/* NxS[1364] */ // Shortest string "^SoftVegeta"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1365}),
/* NxS[1365] */ // Shortest string "^Emiss"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1366, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1366] */ // Shortest string "^Emissi"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 953, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1367] */ // Shortest string "^SubS"
      new Table(53, 71, 130, new short[] {1368, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, 
          -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1}),
/* NxS[1368] */ // Shortest string "^SubSh"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1369}),
/* NxS[1369] */ // Shortest string "^SubSha"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 1370}),
/* NxS[1370] */ // Shortest string "^SubShad"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1344}),
/* NxS[1371] */ // Shortest string "^Ste"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1372}),
/* NxS[1372] */ // Shortest string "^Sten"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 1373, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1373] */ // Shortest string "^Stenc"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 958, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1374] */ // Shortest string "^Set"
      new Table(62, 62, 130, new short[] {1382, 130, 129, 129, 129, 130, 
          130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 
          129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, 
          -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1375] */ // Shortest string "^Sep"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1376}),
/* NxS[1376] */ // Shortest string "^Sepa"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1377}),
/* NxS[1377] */ // Shortest string "^Separ"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1378}),
/* NxS[1378] */ // Shortest string "^Separa"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1379}),
/* NxS[1379] */ // Shortest string "^Separat"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1380}),
/* NxS[1380] */ // Shortest string "^Separate"
      new Table(64, 66, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 1381}),
/* NxS[1381] */ // Shortest string "^SeparateS"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1336, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1382] */ // Shortest string "^SetT"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1383}),
/* NxS[1383] */ // Shortest string "^SetTe"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 1384, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[1384] */ // Shortest string "^SetTex"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1385}),
/* NxS[1385] */ // Shortest string "^SetText"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1386, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1386] */ // Shortest string "^SetTextu"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 137}),
/* NxS[1387] */ // Shortest string "de"
      new Table(63, 68, 130, new short[] {1402, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1401}),
/* NxS[1388] */ // Shortest string "dd"
      new Table(57, 67, 130, new short[] {1394, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 
          129, 1394, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1389] */ // Shortest string "di"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1390, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1390] */ // Shortest string "dis"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 1391}),
/* NxS[1391] */ // Shortest string "dist"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1392}),
/* NxS[1392] */ // Shortest string "dista"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1393}),
/* NxS[1393] */ // Shortest string "distan"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 413, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1394] */ // Shortest string "ddx"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          1395, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, 400, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 62, -1, -1, -1}),
/* NxS[1395] */ // Shortest string "ddx_"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 1396, 1397, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1396] */ // Shortest string "ddx_f"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1400, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1397] */ // Shortest string "ddx_c"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1398, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1398] */ // Shortest string "ddx_co"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1399}),
/* NxS[1399] */ // Shortest string "ddx_coa"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1307}),
/* NxS[1400] */ // Shortest string "ddx_fi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 413}),
/* NxS[1401] */ // Shortest string "det"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1405}),
/* NxS[1402] */ // Shortest string "deg"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1403}),
/* NxS[1403] */ // Shortest string "degr"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1404}),
/* NxS[1404] */ // Shortest string "degre"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1061}),
/* NxS[1405] */ // Shortest string "dete"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1406}),
/* NxS[1406] */ // Shortest string "deter"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1407, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1407] */ // Shortest string "determ"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1408, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1408] */ // Shortest string "determi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1409}),
/* NxS[1409] */ // Shortest string "determin"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1145}),
/* NxS[1410] */ // Shortest string "no"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 1411, 130, 130, 130, 130, 130, 130, 130, 130, 1307, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1411] */ // Shortest string "nor"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1412, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1412] */ // Shortest string "norm"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1413}),
/* NxS[1413] */ // Shortest string "norma"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 1414}),
/* NxS[1414] */ // Shortest string "normal"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1415, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1415] */ // Shortest string "normali"
      new Table(61, 63, 130, new short[] {413, 130, 130, 129, 129, 129, 
          130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 
          129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 
          130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1416] */ // Shortest string "E0"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          149, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 158, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 75, 75, 75, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 75, 75, 75, 75, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, 75}),
/* NxS[1417] */ // Shortest string "ex"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1298, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[1418] */ // Shortest string "E+"
      new Table(64, 35, -1, new short[] {1419, 1419, 1419, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1419, 1419, 1419, 1419, 1419, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1419, -1, -1, 1419}),
/* NxS[1419] */ // Shortest string "E+0"
      new Table(64, 35, -1, new short[] {74, 74, 74, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 74, 74, 74, 74, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, 74}),
/* NxS[1420] */ // Shortest string "le"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1425, 130, 130, 130, 130, 130, 1213}),
/* NxS[1421] */ // Shortest string "ld"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1260}),
/* NxS[1422] */ // Shortest string "lo"
      new Table(63, 61, 130, new short[] {1423, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1423] */ // Shortest string "log"
      new Table(64, 60, 130, new short[] {1424, 1299, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, 400, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 62, -1, -1, -1}),
/* NxS[1424] */ // Shortest string "log1"
      new Table(33, 66, -1, new short[] {143, 144, 145, 146, 147, 148, 
          149, -1, 150, 151, -1, 152, 153, 154, 155, 248, -1, 156, 157, 158, -1, 159, 
          160, 161, -1, 162, 163, 164, -1, 165, -1, 129, 129, 129, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, 129, 129, 129, 129, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1299, -1, -1, 129}),
/* NxS[1425] */ // Shortest string "len"
      new Table(63, 61, 130, new short[] {1249, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1}),
/* NxS[1426] */ // Shortest string "^Bl"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 482}),
/* NxS[1427] */ // Shortest string "^Bi"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1428}),
/* NxS[1428] */ // Shortest string "^Bin"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 76}),
/* NxS[1429] */ // Shortest string "^BindC"
      new Table(53, 71, 130, new short[] {1430, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, 
          -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1}),
/* NxS[1430] */ // Shortest string "^BindCh"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 1431}),
/* NxS[1431] */ // Shortest string "^BindCha"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1432}),
/* NxS[1432] */ // Shortest string "^BindChan"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 1433}),
/* NxS[1433] */ // Shortest string "^BindChann"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 1434}),
/* NxS[1434] */ // Shortest string "^BindChanne"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 965}),
/* NxS[1435] */ // Shortest string "/A"
      new Table(50, 1, -1, new short[] {1844}),
/* NxS[1436] */ // Shortest string "/F"
      new Table(34, 1, -1, new short[] {1842}),
/* NxS[1437] */ // Shortest string "/B"
      new Table(34, 24, -1, new short[] {1835, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1836, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 1558}),
/* NxS[1438] */ // Shortest string "/l"
      new Table(51, 1, -1, new short[] {1831}),
/* NxS[1439] */ // Shortest string "/e"
      new Table(5, 30, -1, new short[] {1829, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1671}),
/* NxS[1440] */ // Shortest string "/n"
      new Table(40, 9, -1, new short[] {1804, -1, -1, -1, -1, -1, 
          -1, -1, 1805}),
/* NxS[1441] */ // Shortest string "/d"
      new Table(48, 4, -1, new short[] {1796, -1, -1, 1797}),
/* NxS[1442] */ // Shortest string "/S"
      new Table(39, 2, -1, new short[] {1769, 1770}),
/* NxS[1443] */ // Shortest string "/t"
      new Table(35, 23, -1, new short[] {1743, -1, -1, -1, -1, -1, 
          1703, 1744, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          1745}),
/* NxS[1444] */ // Shortest string "/b"
      new Table(42, 7, -1, new short[] {1738, -1, -1, -1, -1, -1, 
          1739}),
/* NxS[1445] */ // Shortest string "/r"
      new Table(35, 1, -1, new short[] {1731}),
/* NxS[1446] */ // Shortest string "/u"
      new Table(36, 16, -1, new short[] {1724, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1725}),
/* NxS[1447] */ // Shortest string "/f"
      new Table(34, 15, -1, new short[] {1716, -1, -1, -1, -1, -1, 
          1717, -1, -1, -1, -1, -1, -1, -1, 1617}),
/* NxS[1448] */ // Shortest string "/c"
      new Table(34, 15, -1, new short[] {1701, 1702, -1, -1, -1, -1, 
          -1, 1703, -1, -1, -1, -1, -1, -1, 1704}),
/* NxS[1449] */ // Shortest string "/s"
      new Table(39, 17, -1, new short[] {1677, 1678, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1679, -1, 1680}),
/* NxS[1450] */ // Shortest string "/m"
      new Table(40, 1, -1, new short[] {1673}),
/* NxS[1451] */ // Shortest string "/p"
      new Table(40, 9, -1, new short[] {1664, -1, 1665, -1, -1, -1, 
          -1, -1, 1666}),
/* NxS[1452] */ // Shortest string "/i"
      new Table(36, 10, -1, new short[] {1654, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1534}),
/* NxS[1453] */ // Shortest string "/D"
      new Table(35, 1, -1, new short[] {1643}),
/* NxS[1454] */ // Shortest string "/h"
      new Table(40, 1, -1, new short[] {1640}),
/* NxS[1455] */ // Shortest string "/V"
      new Table(35, 1, -1, new short[] {1635}),
/* NxS[1456] */ // Shortest string "/w"
      new Table(53, 1, -1, new short[] {1625}),
/* NxS[1457] */ // Shortest string "/G"
      new Table(35, 1, -1, new short[] {1629}),
/* NxS[1458] */ // Shortest string "/v"
      new Table(35, 14, -1, new short[] {1620, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1621}),
/* NxS[1459] */ // Shortest string "/P"
      new Table(48, 4, -1, new short[] {1608, -1, -1, 1609}),
/* NxS[1460] */ // Shortest string "/R"
      new Table(35, 41, -1, new short[] {1540, -1, -1, -1, -1, 1541, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 1542}),
/* NxS[1461] */ // Shortest string "/T"
      new Table(35, 8, -1, new short[] {1511, -1, -1, -1, -1, -1, 
          -1, 1512}),
/* NxS[1462] */ // Shortest string "/2"
      new Table(52, 1, -1, new short[] {1509}),
/* NxS[1463] */ // Shortest string "/C"
      new Table(44, 5, -1, new short[] {1485, -1, -1, -1, 1486}),
/* NxS[1464] */ // Shortest string "/L"
      new Table(51, 1, -1, new short[] {1477}),
/* NxS[1465] */ // Shortest string "/O"
      new Table(44, 1, -1, new short[] {1476}),
/* NxS[1466] */ // Shortest string "/I"
      new Table(36, 1, -1, new short[] {1467}),
/* NxS[1467] */ // Shortest string "/In"
      new Table(50, 1, -1, new short[] {1468}),
/* NxS[1468] */ // Shortest string "/Inp"
      new Table(44, 1, -1, new short[] {1469}),
/* NxS[1469] */ // Shortest string "/Inpu"
      new Table(39, 1, -1, new short[] {1470}),
/* NxS[1470] */ // Shortest string "/Input"
      new Table(59, 1, -1, new short[] {1471}),
/* NxS[1471] */ // Shortest string "/InputP"
      new Table(40, 1, -1, new short[] {1472}),
/* NxS[1472] */ // Shortest string "/InputPa"
      new Table(39, 1, -1, new short[] {1473}),
/* NxS[1473] */ // Shortest string "/InputPat"
      new Table(46, 1, -1, new short[] {1474}),
/* NxS[1474] */ // Shortest string "/InputPatc"
      new Table(53, 1, -1, new short[] {1475}),
/* NxS[1475] */ // Shortest string "/int2"
      new Table(0, 30, -1, new short[] {77, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 78}),
/* NxS[1476] */ // Shortest string "/Ou"
      new Table(39, 1, -1, new short[] {1467}),
/* NxS[1477] */ // Shortest string "/Li"
      new Table(36, 1, -1, new short[] {1478}),
/* NxS[1478] */ // Shortest string "/Lin"
      new Table(35, 1, -1, new short[] {1479}),
/* NxS[1479] */ // Shortest string "/Line"
      new Table(38, 1, -1, new short[] {1480}),
/* NxS[1480] */ // Shortest string "/LineS"
      new Table(39, 1, -1, new short[] {1481}),
/* NxS[1481] */ // Shortest string "/LineSt"
      new Table(42, 1, -1, new short[] {1482}),
/* NxS[1482] */ // Shortest string "/LineStr"
      new Table(35, 1, -1, new short[] {1483}),
/* NxS[1483] */ // Shortest string "/LineStre"
      new Table(40, 1, -1, new short[] {1484}),
/* NxS[1484] */ // Shortest string "/LineStrea"
      new Table(49, 1, -1, new short[] {1475}),
/* NxS[1485] */ // Shortest string "/Cu"
      new Table(41, 1, -1, new short[] {1510}),
/* NxS[1486] */ // Shortest string "/Co"
      new Table(34, 3, -1, new short[] {1487, -1, 1488}),
/* NxS[1487] */ // Shortest string "/Col"
      new Table(48, 1, -1, new short[] {1508}),
/* NxS[1488] */ // Shortest string "/Con"
      new Table(47, 1, -1, new short[] {1489}),
/* NxS[1489] */ // Shortest string "/Cons"
      new Table(44, 1, -1, new short[] {1490}),
/* NxS[1490] */ // Shortest string "/Consu"
      new Table(49, 1, -1, new short[] {1491}),
/* NxS[1491] */ // Shortest string "/Consum"
      new Table(35, 1, -1, new short[] {1492}),
/* NxS[1492] */ // Shortest string "/Append"
      new Table(38, 1, -1, new short[] {1493}),
/* NxS[1493] */ // Shortest string "/RWS"
      new Table(39, 1, -1, new short[] {1494}),
/* NxS[1494] */ // Shortest string "/RWSt"
      new Table(42, 1, -1, new short[] {1495}),
/* NxS[1495] */ // Shortest string "/Str"
      new Table(44, 1, -1, new short[] {1496}),
/* NxS[1496] */ // Shortest string "/Stru"
      new Table(46, 1, -1, new short[] {1497}),
/* NxS[1497] */ // Shortest string "/Struc"
      new Table(39, 1, -1, new short[] {1498}),
/* NxS[1498] */ // Shortest string "/Struct"
      new Table(44, 1, -1, new short[] {1499}),
/* NxS[1499] */ // Shortest string "/Structu"
      new Table(42, 1, -1, new short[] {1500}),
/* NxS[1500] */ // Shortest string "/Structur"
      new Table(35, 1, -1, new short[] {1501}),
/* NxS[1501] */ // Shortest string "/Structure"
      new Table(37, 1, -1, new short[] {1502}),
/* NxS[1502] */ // Shortest string "/Structured"
      new Table(33, 1, -1, new short[] {1503}),
/* NxS[1503] */ // Shortest string "/StructuredB"
      new Table(44, 1, -1, new short[] {1504}),
/* NxS[1504] */ // Shortest string "/RWBu"
      new Table(45, 1, -1, new short[] {1505}),
/* NxS[1505] */ // Shortest string "/RWBuf"
      new Table(45, 1, -1, new short[] {1506}),
/* NxS[1506] */ // Shortest string "/RWBuff"
      new Table(35, 1, -1, new short[] {1507}),
/* NxS[1507] */ // Shortest string "/vecto"
      new Table(42, 1, -1, new short[] {1475}),
/* NxS[1508] */ // Shortest string "/Colo"
      new Table(42, 1, -1, new short[] {1509}),
/* NxS[1509] */ // Shortest string "/2D"
      new Table(0, 31, -1, new short[] {79, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, 79, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 80, 80}),
/* NxS[1510] */ // Shortest string "/Cub"
      new Table(35, 1, -1, new short[] {1509}),
/* NxS[1511] */ // Shortest string "/Te"
      new Table(5, 1, -1, new short[] {1517}),
/* NxS[1512] */ // Shortest string "/Tr"
      new Table(51, 1, -1, new short[] {1513}),
/* NxS[1513] */ // Shortest string "/Tri"
      new Table(40, 1, -1, new short[] {1514}),
/* NxS[1514] */ // Shortest string "/Tria"
      new Table(36, 1, -1, new short[] {1515}),
/* NxS[1515] */ // Shortest string "/Trian"
      new Table(63, 1, -1, new short[] {1516}),
/* NxS[1516] */ // Shortest string "/Triang"
      new Table(34, 1, -1, new short[] {1478}),
/* NxS[1517] */ // Shortest string "/Tex"
      new Table(39, 1, -1, new short[] {1518}),
/* NxS[1518] */ // Shortest string "/Text"
      new Table(44, 1, -1, new short[] {1519}),
/* NxS[1519] */ // Shortest string "/Textu"
      new Table(42, 1, -1, new short[] {1520}),
/* NxS[1520] */ // Shortest string "/Textur"
      new Table(35, 1, -1, new short[] {1521}),
/* NxS[1521] */ // Shortest string "/Texture"
      new Table(64, 4, -1, new short[] {1522, 1523, 1524, 1525}),
/* NxS[1522] */ // Shortest string "/Texture1"
      new Table(52, 1, -1, new short[] {1538}),
/* NxS[1523] */ // Shortest string "/Texture2"
      new Table(52, 1, -1, new short[] {1536}),
/* NxS[1524] */ // Shortest string "/Texture3"
      new Table(52, 1, -1, new short[] {1535}),
/* NxS[1525] */ // Shortest string "/TextureC"
      new Table(44, 1, -1, new short[] {1526}),
/* NxS[1526] */ // Shortest string "/TextureCu"
      new Table(41, 1, -1, new short[] {1527}),
/* NxS[1527] */ // Shortest string "/TextureCub"
      new Table(35, 1, -1, new short[] {1528}),
/* NxS[1528] */ // Shortest string "/TextureCube"
      new Table(0, 33, -1, new short[] {81, 84, -1, 84, -1, -1, 
          1529, -1, -1, 84, 84, 81, -1, -1, -1, -1, 81, 82, 84, 84, 83, 1530, 
          84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81}),
/* NxS[1529] */ // Shortest string "/Texture1DA"
      new Table(42, 1, -1, new short[] {1531}),
/* NxS[1530] */ // Shortest string "/do|"
      new Table(21, 1, -1, new short[] {81}),
/* NxS[1531] */ // Shortest string "/Texture1DAr"
      new Table(42, 1, -1, new short[] {1532}),
/* NxS[1532] */ // Shortest string "/Texture1DArr"
      new Table(40, 1, -1, new short[] {1533}),
/* NxS[1533] */ // Shortest string "/Texture1DArra"
      new Table(57, 1, -1, new short[] {1534}),
/* NxS[1534] */ // Shortest string "/if"
      new Table(0, 33, -1, new short[] {81, 84, -1, 84, -1, -1, 
          -1, -1, -1, 84, 84, 81, -1, -1, -1, -1, 81, 82, 84, 84, 83, 1530, 
          84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81}),
/* NxS[1535] */ // Shortest string "/Buffer"
      new Table(0, 33, -1, new short[] {85, 84, -1, 84, -1, -1, 
          -1, -1, -1, 84, 84, 81, -1, -1, -1, -1, 85, 86, 84, 84, 83, 1530, 
          84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81}),
/* NxS[1536] */ // Shortest string "/Texture2D"
      new Table(70, 54, -1, new short[] {1537, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, 
          84, -1, 84, -1, -1, 1529, -1, -1, 84, 84, 81, -1, -1, -1, -1, 85, 
          86, 84, 84, 83, 1530, 84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81}),
/* NxS[1537] */ // Shortest string "/Texture2DM"
      new Table(38, 1, -1, new short[] {1538}),
/* NxS[1538] */ // Shortest string "/Texture1D"
      new Table(0, 33, -1, new short[] {85, 84, -1, 84, -1, -1, 
          1529, -1, -1, 84, 84, 81, -1, -1, -1, -1, 85, 86, 84, 84, 83, 1530, 
          84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81}),
/* NxS[1539] */ // Shortest string ""
      new Table(57, 1, -1, new short[] {1535}),
/* NxS[1540] */ // Shortest string "/Re"
      new Table(36, 11, -1, new short[] {1594, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1595}),
/* NxS[1541] */ // Shortest string "/Ra"
      new Table(36, 12, -1, new short[] {1567, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1568}),
/* NxS[1542] */ // Shortest string "/RW"
      new Table(33, 30, -1, new short[] {1543, -1, -1, -1, -1, 1493, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1544}),
/* NxS[1543] */ // Shortest string "/RWB"
      new Table(44, 14, -1, new short[] {1504, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1558}),
/* NxS[1544] */ // Shortest string "/RWT"
      new Table(35, 1, -1, new short[] {1545}),
/* NxS[1545] */ // Shortest string "/RWTe"
      new Table(5, 1, -1, new short[] {1546}),
/* NxS[1546] */ // Shortest string "/RWTex"
      new Table(39, 1, -1, new short[] {1547}),
/* NxS[1547] */ // Shortest string "/RWText"
      new Table(44, 1, -1, new short[] {1548}),
/* NxS[1548] */ // Shortest string "/RWTextu"
      new Table(42, 1, -1, new short[] {1549}),
/* NxS[1549] */ // Shortest string "/RWTextur"
      new Table(35, 1, -1, new short[] {1550}),
/* NxS[1550] */ // Shortest string "/RWTexture"
      new Table(64, 3, -1, new short[] {1551, 1551, 1552}),
/* NxS[1551] */ // Shortest string "/RWTexture1"
      new Table(52, 1, -1, new short[] {1553}),
/* NxS[1552] */ // Shortest string "/tex2"
      new Table(52, 1, -1, new short[] {1475}),
/* NxS[1553] */ // Shortest string "/RWTexture1D"
      new Table(0, 30, -1, new short[] {77, -1, -1, -1, -1, -1, 
          1554, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 78}),
/* NxS[1554] */ // Shortest string "/RWTexture1DA"
      new Table(42, 1, -1, new short[] {1555}),
/* NxS[1555] */ // Shortest string "/RWTexture1DAr"
      new Table(42, 1, -1, new short[] {1556}),
/* NxS[1556] */ // Shortest string "/RWTexture1DArr"
      new Table(40, 1, -1, new short[] {1557}),
/* NxS[1557] */ // Shortest string "/RWTexture1DArra"
      new Table(57, 1, -1, new short[] {1475}),
/* NxS[1558] */ // Shortest string "/By"
      new Table(39, 1, -1, new short[] {1559}),
/* NxS[1559] */ // Shortest string "/Byt"
      new Table(35, 1, -1, new short[] {1560}),
/* NxS[1560] */ // Shortest string "/Byte"
      new Table(6, 1, -1, new short[] {1561}),
/* NxS[1561] */ // Shortest string "/ByteA"
      new Table(37, 1, -1, new short[] {1562}),
/* NxS[1562] */ // Shortest string "/ByteAd"
      new Table(37, 1, -1, new short[] {1563}),
/* NxS[1563] */ // Shortest string "/ByteAdd"
      new Table(42, 1, -1, new short[] {1564}),
/* NxS[1564] */ // Shortest string "/ByteAddr"
      new Table(35, 1, -1, new short[] {1565}),
/* NxS[1565] */ // Shortest string "/ByteAddre"
      new Table(47, 1, -1, new short[] {1566}),
/* NxS[1566] */ // Shortest string "/ByteAddres"
      new Table(47, 1, -1, new short[] {1502}),
/* NxS[1567] */ // Shortest string "/Ran"
      new Table(63, 1, -1, new short[] {1580}),
/* NxS[1568] */ // Shortest string "/Ras"
      new Table(39, 1, -1, new short[] {1569}),
/* NxS[1569] */ // Shortest string "/Rast"
      new Table(35, 1, -1, new short[] {1570}),
/* NxS[1570] */ // Shortest string "/Raste"
      new Table(42, 1, -1, new short[] {1571}),
/* NxS[1571] */ // Shortest string "/Raster"
      new Table(51, 1, -1, new short[] {1572}),
/* NxS[1572] */ // Shortest string "/Rasteri"
      new Table(61, 1, -1, new short[] {1573}),
/* NxS[1573] */ // Shortest string "/Rasteriz"
      new Table(35, 1, -1, new short[] {1574}),
/* NxS[1574] */ // Shortest string "/Rasterize"
      new Table(42, 1, -1, new short[] {1575}),
/* NxS[1575] */ // Shortest string "/Blend"
      new Table(38, 1, -1, new short[] {1576}),
/* NxS[1576] */ // Shortest string "/BlendS"
      new Table(39, 1, -1, new short[] {1577}),
/* NxS[1577] */ // Shortest string "/BlendSt"
      new Table(40, 1, -1, new short[] {1578}),
/* NxS[1578] */ // Shortest string "/BlendSta"
      new Table(39, 1, -1, new short[] {1579}),
/* NxS[1579] */ // Shortest string "/els"
      new Table(35, 1, -1, new short[] {1534}),
/* NxS[1580] */ // Shortest string "/Rang"
      new Table(35, 1, -1, new short[] {1581}),
/* NxS[1581] */ // Shortest string "/Range"
      new Table(17, 13, -1, new short[] {1581, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1582}),
/* NxS[1582] */ // Shortest string "/Range("
      new Table(64, 45, -1, new short[] {1583, 1583, 1583, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1583, 1583, 1583, 1583, 1583, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1583, -1, -1, 1583, -1, 1584, 1584, 
          1585, -1, -1, -1, -1, -1, 1582}),
/* NxS[1583] */ // Shortest string "/Range(0"
      new Table(64, 54, -1, new short[] {1583, 1583, 1583, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1583, 1583, 1583, 1583, 1583, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1583, -1, -1, 1583, -1, -1, -1, 
          1585, -1, -1, -1, -1, -1, 1587, -1, -1, -1, -1, -1, -1, -1, -1, 1588}),
/* NxS[1584] */ // Shortest string "/Range(+"
      new Table(64, 39, -1, new short[] {1583, 1583, 1583, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1583, 1583, 1583, 1583, 1583, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1583, -1, -1, 1583, -1, -1, -1, 
          1585}),
/* NxS[1585] */ // Shortest string "/Range(."
      new Table(64, 35, -1, new short[] {1586, 1586, 1586, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1586, 1586, 1586, 1586, 1586, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1586, -1, -1, 1586}),
/* NxS[1586] */ // Shortest string "/Range(.0"
      new Table(45, 73, -1, new short[] {1587, -1, -1, -1, -1, -1, 
          -1, -1, 1587, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1586, 1586, 1586, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1586, 1586, 
          1586, 1586, 1586, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1586, -1, -1, 1586, 
          -1, -1, -1, -1, 1587, 1587, -1, -1, -1, 1587, -1, -1, -1, -1, -1, -1, 
          -1, -1, 1588}),
/* NxS[1587] */ // Shortest string "/Range(0\x20"
      new Table(17, 10, -1, new short[] {1587, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1588}),
/* NxS[1588] */ // Shortest string "/Range(0,"
      new Table(64, 45, -1, new short[] {1589, 1589, 1589, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1589, 1589, 1589, 1589, 1589, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1589, -1, -1, 1589, -1, 1590, 1590, 
          1591, -1, -1, -1, -1, -1, 1588}),
/* NxS[1589] */ // Shortest string "/Range(0,0"
      new Table(64, 58, -1, new short[] {1589, 1589, 1589, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1589, 1589, 1589, 1589, 1589, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1589, -1, -1, 1589, -1, -1, -1, 
          1591, -1, -1, -1, -1, -1, 1593, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1509}),
/* NxS[1590] */ // Shortest string "/Range(0,+"
      new Table(64, 39, -1, new short[] {1589, 1589, 1589, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1589, 1589, 1589, 1589, 1589, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1589, -1, -1, 1589, -1, -1, -1, 
          1591}),
/* NxS[1591] */ // Shortest string "/Range(0,."
      new Table(64, 35, -1, new short[] {1592, 1592, 1592, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1592, 1592, 1592, 1592, 1592, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1592, -1, -1, 1592}),
/* NxS[1592] */ // Shortest string "/Range(0,.0"
      new Table(45, 77, -1, new short[] {1593, -1, -1, -1, -1, -1, 
          -1, -1, 1593, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1592, 1592, 1592, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1592, 1592, 
          1592, 1592, 1592, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1592, -1, -1, 1592, 
          -1, -1, -1, -1, 1593, 1593, -1, -1, -1, 1593, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1509}),
/* NxS[1593] */ // Shortest string "/Range(0,0\x20"
      new Table(17, 14, -1, new short[] {1593, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1509}),
/* NxS[1594] */ // Shortest string "/Ren"
      new Table(37, 1, -1, new short[] {1596}),
/* NxS[1595] */ // Shortest string "/Rec"
      new Table(39, 1, -1, new short[] {1509}),
/* NxS[1596] */ // Shortest string "/Rend"
      new Table(35, 1, -1, new short[] {1597}),
/* NxS[1597] */ // Shortest string "/Rende"
      new Table(42, 1, -1, new short[] {1598}),
/* NxS[1598] */ // Shortest string "/Render"
      new Table(62, 1, -1, new short[] {1599}),
/* NxS[1599] */ // Shortest string "/RenderT"
      new Table(40, 1, -1, new short[] {1600}),
/* NxS[1600] */ // Shortest string "/RenderTa"
      new Table(42, 1, -1, new short[] {1601}),
/* NxS[1601] */ // Shortest string "/RenderTar"
      new Table(63, 1, -1, new short[] {1602}),
/* NxS[1602] */ // Shortest string "/RenderTarg"
      new Table(35, 1, -1, new short[] {1603}),
/* NxS[1603] */ // Shortest string "/RenderTarge"
      new Table(39, 1, -1, new short[] {1604}),
/* NxS[1604] */ // Shortest string "/RenderTarget"
      new Table(54, 1, -1, new short[] {1605}),
/* NxS[1605] */ // Shortest string "/DepthStencilV"
      new Table(51, 1, -1, new short[] {1606}),
/* NxS[1606] */ // Shortest string "/DepthStencilVi"
      new Table(35, 1, -1, new short[] {1607}),
/* NxS[1607] */ // Shortest string "/DepthStencilVie"
      new Table(55, 1, -1, new short[] {1534}),
/* NxS[1608] */ // Shortest string "/Po"
      new Table(51, 1, -1, new short[] {1618}),
/* NxS[1609] */ // Shortest string "/Pi"
      new Table(5, 1, -1, new short[] {1610}),
/* NxS[1610] */ // Shortest string "/Pix"
      new Table(35, 1, -1, new short[] {1611}),
/* NxS[1611] */ // Shortest string "/Pixe"
      new Table(34, 1, -1, new short[] {1612}),
/* NxS[1612] */ // Shortest string "/Pixel"
      new Table(38, 1, -1, new short[] {1613}),
/* NxS[1613] */ // Shortest string "/PixelS"
      new Table(53, 1, -1, new short[] {1614}),
/* NxS[1614] */ // Shortest string "/PixelSh"
      new Table(40, 1, -1, new short[] {1615}),
/* NxS[1615] */ // Shortest string "/PixelSha"
      new Table(37, 1, -1, new short[] {1616}),
/* NxS[1616] */ // Shortest string "/tbuff"
      new Table(35, 1, -1, new short[] {1617}),
/* NxS[1617] */ // Shortest string "/fo"
      new Table(42, 1, -1, new short[] {1534}),
/* NxS[1618] */ // Shortest string "/Poi"
      new Table(36, 1, -1, new short[] {1619}),
/* NxS[1619] */ // Shortest string "/Poin"
      new Table(39, 1, -1, new short[] {1479}),
/* NxS[1620] */ // Shortest string "/ve"
      new Table(46, 1, -1, new short[] {1627}),
/* NxS[1621] */ // Shortest string "/vo"
      new Table(34, 18, -1, new short[] {1622, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1623}),
/* NxS[1622] */ // Shortest string "/vol"
      new Table(40, 1, -1, new short[] {1624}),
/* NxS[1623] */ // Shortest string "/voi"
      new Table(37, 1, -1, new short[] {1534}),
/* NxS[1624] */ // Shortest string "/vola"
      new Table(39, 1, -1, new short[] {1625}),
/* NxS[1625] */ // Shortest string "/wh"
      new Table(51, 1, -1, new short[] {1626}),
/* NxS[1626] */ // Shortest string "/whi"
      new Table(34, 1, -1, new short[] {1579}),
/* NxS[1627] */ // Shortest string "/vec"
      new Table(39, 1, -1, new short[] {1628}),
/* NxS[1628] */ // Shortest string "/vect"
      new Table(48, 1, -1, new short[] {1507}),
/* NxS[1629] */ // Shortest string "/Ge"
      new Table(48, 1, -1, new short[] {1630}),
/* NxS[1630] */ // Shortest string "/Geo"
      new Table(49, 1, -1, new short[] {1631}),
/* NxS[1631] */ // Shortest string "/Geom"
      new Table(35, 1, -1, new short[] {1632}),
/* NxS[1632] */ // Shortest string "/Geome"
      new Table(39, 1, -1, new short[] {1633}),
/* NxS[1633] */ // Shortest string "/Geomet"
      new Table(42, 1, -1, new short[] {1634}),
/* NxS[1634] */ // Shortest string "/Geometr"
      new Table(57, 1, -1, new short[] {1612}),
/* NxS[1635] */ // Shortest string "/Ve"
      new Table(42, 5, -1, new short[] {1636, -1, -1, -1, 1637}),
/* NxS[1636] */ // Shortest string "/Ver"
      new Table(39, 1, -1, new short[] {1638}),
/* NxS[1637] */ // Shortest string "/Vec"
      new Table(39, 1, -1, new short[] {1487}),
/* NxS[1638] */ // Shortest string "/Vert"
      new Table(35, 1, -1, new short[] {1639}),
/* NxS[1639] */ // Shortest string "/Verte"
      new Table(5, 1, -1, new short[] {1612}),
/* NxS[1640] */ // Shortest string "/ha"
      new Table(34, 1, -1, new short[] {1641}),
/* NxS[1641] */ // Shortest string "/hal"
      new Table(45, 1, -1, new short[] {1642}),
/* NxS[1642] */ // Shortest string "/bool"
      new Table(65, 56, -1, new short[] {1475, 1475, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1475, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 78}),
/* NxS[1643] */ // Shortest string "/De"
      new Table(50, 1, -1, new short[] {1644}),
/* NxS[1644] */ // Shortest string "/Dep"
      new Table(39, 1, -1, new short[] {1645}),
/* NxS[1645] */ // Shortest string "/Dept"
      new Table(53, 1, -1, new short[] {1646}),
/* NxS[1646] */ // Shortest string "/Depth"
      new Table(38, 1, -1, new short[] {1647}),
/* NxS[1647] */ // Shortest string "/DepthS"
      new Table(39, 1, -1, new short[] {1648}),
/* NxS[1648] */ // Shortest string "/DepthSt"
      new Table(35, 1, -1, new short[] {1649}),
/* NxS[1649] */ // Shortest string "/DepthSte"
      new Table(36, 1, -1, new short[] {1650}),
/* NxS[1650] */ // Shortest string "/DepthSten"
      new Table(46, 1, -1, new short[] {1651}),
/* NxS[1651] */ // Shortest string "/DepthStenc"
      new Table(51, 1, -1, new short[] {1652}),
/* NxS[1652] */ // Shortest string "/DepthStenci"
      new Table(34, 1, -1, new short[] {1653}),
/* NxS[1653] */ // Shortest string "/DepthStencil"
      new Table(38, 17, -1, new short[] {1576, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1605}),
/* NxS[1654] */ // Shortest string "/in"
      new Table(0, 49, -1, new short[] {81, 84, -1, 84, -1, -1, 
          -1, -1, -1, 84, 84, 81, -1, -1, -1, -1, 81, 82, 84, 84, 83, 1530, 
          84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81, -1, 1655, -1, -1, -1, 
          -1, 1656, -1, -1, -1, -1, -1, -1, -1, -1, 1657}),
/* NxS[1655] */ // Shortest string "/inl"
      new Table(51, 1, -1, new short[] {1663}),
/* NxS[1656] */ // Shortest string "/int"
      new Table(65, 62, -1, new short[] {1475, 1475, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1475, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 78, -1, -1, -1, -1, -1, 1659}),
/* NxS[1657] */ // Shortest string "/o"
      new Table(44, 1, -1, new short[] {1658}),
/* NxS[1658] */ // Shortest string "/ou"
      new Table(39, 1, -1, new short[] {1534}),
/* NxS[1659] */ // Shortest string "/inte"
      new Table(42, 1, -1, new short[] {1660}),
/* NxS[1660] */ // Shortest string "/inter"
      new Table(45, 1, -1, new short[] {1661}),
/* NxS[1661] */ // Shortest string "/namesp"
      new Table(40, 1, -1, new short[] {1662}),
/* NxS[1662] */ // Shortest string "/namespa"
      new Table(46, 1, -1, new short[] {1579}),
/* NxS[1663] */ // Shortest string "/inli"
      new Table(36, 1, -1, new short[] {1579}),
/* NxS[1664] */ // Shortest string "/pa"
      new Table(47, 1, -1, new short[] {1672}),
/* NxS[1665] */ // Shortest string "/pr"
      new Table(35, 1, -1, new short[] {1669}),
/* NxS[1666] */ // Shortest string "/po"
      new Table(51, 1, -1, new short[] {1667}),
/* NxS[1667] */ // Shortest string "/poi"
      new Table(36, 1, -1, new short[] {1668}),
/* NxS[1668] */ // Shortest string "/poin"
      new Table(39, 1, -1, new short[] {1475}),
/* NxS[1669] */ // Shortest string "/pre"
      new Table(46, 1, -1, new short[] {1670}),
/* NxS[1670] */ // Shortest string "/prec"
      new Table(51, 1, -1, new short[] {1671}),
/* NxS[1671] */ // Shortest string "/el"
      new Table(47, 1, -1, new short[] {1579}),
/* NxS[1672] */ // Shortest string "/pas"
      new Table(47, 1, -1, new short[] {1534}),
/* NxS[1673] */ // Shortest string "/ma"
      new Table(39, 1, -1, new short[] {1674}),
/* NxS[1674] */ // Shortest string "/mat"
      new Table(42, 1, -1, new short[] {1675}),
/* NxS[1675] */ // Shortest string "/matr"
      new Table(51, 1, -1, new short[] {1676}),
/* NxS[1676] */ // Shortest string "/matri"
      new Table(5, 1, -1, new short[] {1475}),
/* NxS[1677] */ // Shortest string "/st"
      new Table(40, 3, -1, new short[] {1694, -1, 1695}),
/* NxS[1678] */ // Shortest string "/sa"
      new Table(49, 1, -1, new short[] {1686}),
/* NxS[1679] */ // Shortest string "/sh"
      new Table(40, 1, -1, new short[] {1684}),
/* NxS[1680] */ // Shortest string "/sw"
      new Table(51, 1, -1, new short[] {1681}),
/* NxS[1681] */ // Shortest string "/swi"
      new Table(39, 1, -1, new short[] {1682}),
/* NxS[1682] */ // Shortest string "/swit"
      new Table(46, 1, -1, new short[] {1683}),
/* NxS[1683] */ // Shortest string "/switc"
      new Table(53, 1, -1, new short[] {1534}),
/* NxS[1684] */ // Shortest string "/sha"
      new Table(42, 1, -1, new short[] {1685}),
/* NxS[1685] */ // Shortest string "/shar"
      new Table(35, 1, -1, new short[] {1623}),
/* NxS[1686] */ // Shortest string "/sam"
      new Table(50, 1, -1, new short[] {1687}),
/* NxS[1687] */ // Shortest string "/samp"
      new Table(34, 1, -1, new short[] {1688}),
/* NxS[1688] */ // Shortest string "/sampl"
      new Table(35, 1, -1, new short[] {1689}),
/* NxS[1689] */ // Shortest string "/sample"
      new Table(0, 43, -1, new short[] {81, 84, -1, 84, -1, -1, 
          -1, -1, -1, 84, 84, 81, -1, -1, -1, -1, 81, 82, 84, 84, 83, 1530, 
          84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1690}),
/* NxS[1690] */ // Shortest string "/sampler"
      new Table(65, 56, -1, new short[] {1552, 1552, 1691, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 78}),
/* NxS[1691] */ // Shortest string "/samplerC"
      new Table(68, 1, -1, new short[] {1692}),
/* NxS[1692] */ // Shortest string "/samplerCU"
      new Table(33, 1, -1, new short[] {1693}),
/* NxS[1693] */ // Shortest string "/samplerCUB"
      new Table(8, 1, -1, new short[] {1475}),
/* NxS[1694] */ // Shortest string "/sta"
      new Table(39, 1, -1, new short[] {1699}),
/* NxS[1695] */ // Shortest string "/str"
      new Table(44, 8, -1, new short[] {1696, -1, -1, -1, -1, -1, 
          -1, 1697}),
/* NxS[1696] */ // Shortest string "/stru"
      new Table(46, 1, -1, new short[] {1658}),
/* NxS[1697] */ // Shortest string "/stri"
      new Table(36, 1, -1, new short[] {1698}),
/* NxS[1698] */ // Shortest string "/strin"
      new Table(63, 1, -1, new short[] {1475}),
/* NxS[1699] */ // Shortest string "/stat"
      new Table(51, 1, -1, new short[] {1700}),
/* NxS[1700] */ // Shortest string "/stati"
      new Table(46, 1, -1, new short[] {1534}),
/* NxS[1701] */ // Shortest string "/cl"
      new Table(40, 1, -1, new short[] {1664}),
/* NxS[1702] */ // Shortest string "/ce"
      new Table(36, 1, -1, new short[] {1712}),
/* NxS[1703] */ // Shortest string "/tb"
      new Table(44, 1, -1, new short[] {1710}),
/* NxS[1704] */ // Shortest string "/co"
      new Table(36, 14, -1, new short[] {1705, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1706}),
/* NxS[1705] */ // Shortest string "/con"
      new Table(39, 9, -1, new short[] {1707, -1, -1, -1, -1, -1, 
          -1, -1, 1658}),
/* NxS[1706] */ // Shortest string "/com"
      new Table(50, 1, -1, new short[] {1625}),
/* NxS[1707] */ // Shortest string "/cont"
      new Table(51, 1, -1, new short[] {1708}),
/* NxS[1708] */ // Shortest string "/conti"
      new Table(36, 1, -1, new short[] {1709}),
/* NxS[1709] */ // Shortest string "/contin"
      new Table(44, 1, -1, new short[] {1579}),
/* NxS[1710] */ // Shortest string "/tbu"
      new Table(45, 1, -1, new short[] {1711}),
/* NxS[1711] */ // Shortest string "/tbuf"
      new Table(45, 1, -1, new short[] {1616}),
/* NxS[1712] */ // Shortest string "/cen"
      new Table(39, 1, -1, new short[] {1713}),
/* NxS[1713] */ // Shortest string "/cent"
      new Table(42, 1, -1, new short[] {1714}),
/* NxS[1714] */ // Shortest string "/centr"
      new Table(48, 1, -1, new short[] {1715}),
/* NxS[1715] */ // Shortest string "/centro"
      new Table(51, 1, -1, new short[] {1623}),
/* NxS[1716] */ // Shortest string "/fl"
      new Table(48, 1, -1, new short[] {1718}),
/* NxS[1717] */ // Shortest string "/fa"
      new Table(34, 1, -1, new short[] {1671}),
/* NxS[1718] */ // Shortest string "/flo"
      new Table(40, 1, -1, new short[] {1719}),
/* NxS[1719] */ // Shortest string "/floa"
      new Table(39, 1, -1, new short[] {1720}),
/* NxS[1720] */ // Shortest string "/float"
      new Table(64, 57, -1, new short[] {1721, 1722, 1722, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1722, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 78}),
/* NxS[1721] */ // Shortest string "/float1"
      new Table(5, 1, -1, new short[] {1723}),
/* NxS[1722] */ // Shortest string "/float2"
      new Table(0, 30, -1, new short[] {77, -1, -1, -1, -1, 1723, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 78}),
/* NxS[1723] */ // Shortest string "/float1x"
      new Table(64, 18, -1, new short[] {1475, 1475, 1475, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1475}),
/* NxS[1724] */ // Shortest string "/un"
      new Table(51, 1, -1, new short[] {1727}),
/* NxS[1725] */ // Shortest string "/ui"
      new Table(36, 1, -1, new short[] {1726}),
/* NxS[1726] */ // Shortest string "/uin"
      new Table(39, 1, -1, new short[] {1642}),
/* NxS[1727] */ // Shortest string "/uni"
      new Table(45, 1, -1, new short[] {1728}),
/* NxS[1728] */ // Shortest string "/unif"
      new Table(48, 1, -1, new short[] {1729}),
/* NxS[1729] */ // Shortest string "/unifo"
      new Table(42, 1, -1, new short[] {1730}),
/* NxS[1730] */ // Shortest string "/unifor"
      new Table(49, 1, -1, new short[] {1534}),
/* NxS[1731] */ // Shortest string "/re"
      new Table(39, 25, -1, new short[] {1732, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 1733}),
/* NxS[1732] */ // Shortest string "/ret"
      new Table(44, 1, -1, new short[] {1736}),
/* NxS[1733] */ // Shortest string "/reg"
      new Table(51, 1, -1, new short[] {1734}),
/* NxS[1734] */ // Shortest string "/regi"
      new Table(47, 1, -1, new short[] {1735}),
/* NxS[1735] */ // Shortest string "/regis"
      new Table(39, 1, -1, new short[] {1616}),
/* NxS[1736] */ // Shortest string "/exte"
      new Table(42, 1, -1, new short[] {1737}),
/* NxS[1737] */ // Shortest string "/exter"
      new Table(36, 1, -1, new short[] {1534}),
/* NxS[1738] */ // Shortest string "/br"
      new Table(35, 1, -1, new short[] {1741}),
/* NxS[1739] */ // Shortest string "/bo"
      new Table(48, 1, -1, new short[] {1740}),
/* NxS[1740] */ // Shortest string "/boo"
      new Table(34, 1, -1, new short[] {1642}),
/* NxS[1741] */ // Shortest string "/bre"
      new Table(40, 1, -1, new short[] {1742}),
/* NxS[1742] */ // Shortest string "/brea"
      new Table(43, 1, -1, new short[] {1534}),
/* NxS[1743] */ // Shortest string "/te"
      new Table(5, 42, -1, new short[] {1758, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1759}),
/* NxS[1744] */ // Shortest string "/tr"
      new Table(44, 8, -1, new short[] {1579, -1, -1, -1, -1, -1, 
          -1, 1750}),
/* NxS[1745] */ // Shortest string "/ty"
      new Table(50, 1, -1, new short[] {1746}),
/* NxS[1746] */ // Shortest string "/typ"
      new Table(35, 1, -1, new short[] {1747}),
/* NxS[1747] */ // Shortest string "/type"
      new Table(37, 1, -1, new short[] {1748}),
/* NxS[1748] */ // Shortest string "/typed"
      new Table(35, 1, -1, new short[] {1749}),
/* NxS[1749] */ // Shortest string "/typede"
      new Table(45, 1, -1, new short[] {1534}),
/* NxS[1750] */ // Shortest string "/tri"
      new Table(40, 1, -1, new short[] {1751}),
/* NxS[1751] */ // Shortest string "/tria"
      new Table(36, 1, -1, new short[] {1752}),
/* NxS[1752] */ // Shortest string "/trian"
      new Table(63, 1, -1, new short[] {1753}),
/* NxS[1753] */ // Shortest string "/triang"
      new Table(34, 1, -1, new short[] {1754}),
/* NxS[1754] */ // Shortest string "/triangl"
      new Table(35, 1, -1, new short[] {1755}),
/* NxS[1755] */ // Shortest string "/triangle"
      new Table(0, 41, -1, new short[] {77, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 1756}),
/* NxS[1756] */ // Shortest string "/trianglea"
      new Table(37, 1, -1, new short[] {1757}),
/* NxS[1757] */ // Shortest string "/linead"
      new Table(89, 1, -1, new short[] {1475}),
/* NxS[1758] */ // Shortest string "/tex"
      new Table(39, 27, -1, new short[] {1767, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1552}),
/* NxS[1759] */ // Shortest string "/tec"
      new Table(53, 1, -1, new short[] {1760}),
/* NxS[1760] */ // Shortest string "/tech"
      new Table(36, 1, -1, new short[] {1761}),
/* NxS[1761] */ // Shortest string "/techn"
      new Table(51, 1, -1, new short[] {1762}),
/* NxS[1762] */ // Shortest string "/techni"
      new Table(69, 1, -1, new short[] {1763}),
/* NxS[1763] */ // Shortest string "/techniq"
      new Table(44, 1, -1, new short[] {1764}),
/* NxS[1764] */ // Shortest string "/techniqu"
      new Table(35, 1, -1, new short[] {1765}),
/* NxS[1765] */ // Shortest string "/technique"
      new Table(64, 60, -1, new short[] {1766, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 81, 84, -1, 84, -1, -1, -1, -1, -1, 84, 84, 
          81, -1, -1, -1, -1, 81, 82, 84, 84, 83, 1530, 84, 84, 84, 81, 81, 
          81, 81, 81, 81, 81, 81}),
/* NxS[1766] */ // Shortest string "/technique1"
      new Table(64, 32, -1, new short[] {1534, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1534}),
/* NxS[1767] */ // Shortest string "/text"
      new Table(44, 1, -1, new short[] {1768}),
/* NxS[1768] */ // Shortest string "/textu"
      new Table(42, 1, -1, new short[] {1579}),
/* NxS[1769] */ // Shortest string "/St"
      new Table(40, 3, -1, new short[] {1788, -1, 1495}),
/* NxS[1770] */ // Shortest string "/Sa"
      new Table(49, 1, -1, new short[] {1771}),
/* NxS[1771] */ // Shortest string "/Sam"
      new Table(50, 1, -1, new short[] {1772}),
/* NxS[1772] */ // Shortest string "/Samp"
      new Table(34, 1, -1, new short[] {1773}),
/* NxS[1773] */ // Shortest string "/Sampl"
      new Table(35, 1, -1, new short[] {1774}),
/* NxS[1774] */ // Shortest string "/Sample"
      new Table(42, 1, -1, new short[] {1775}),
/* NxS[1775] */ // Shortest string "/Sampler"
      new Table(64, 66, -1, new short[] {1776, 1776, 1776, 1777, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 81, 84, -1, 84, -1, -1, -1, -1, -1, 84, 84, 
          81, -1, -1, -1, -1, 81, 82, 84, 84, 83, 1530, 84, 84, 84, 81, 81, 
          81, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, 1576}),
/* NxS[1776] */ // Shortest string "/Sampler1"
      new Table(52, 1, -1, new short[] {1534}),
/* NxS[1777] */ // Shortest string "/SamplerC"
      new Table(48, 21, -1, new short[] {1778, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1779}),
/* NxS[1778] */ // Shortest string "/SamplerCo"
      new Table(49, 1, -1, new short[] {1781}),
/* NxS[1779] */ // Shortest string "/SamplerCU"
      new Table(33, 1, -1, new short[] {1780}),
/* NxS[1780] */ // Shortest string "/SamplerCUB"
      new Table(8, 1, -1, new short[] {1534}),
/* NxS[1781] */ // Shortest string "/SamplerCom"
      new Table(50, 1, -1, new short[] {1782}),
/* NxS[1782] */ // Shortest string "/SamplerComp"
      new Table(40, 1, -1, new short[] {1783}),
/* NxS[1783] */ // Shortest string "/SamplerCompa"
      new Table(42, 1, -1, new short[] {1784}),
/* NxS[1784] */ // Shortest string "/SamplerCompar"
      new Table(51, 1, -1, new short[] {1785}),
/* NxS[1785] */ // Shortest string "/SamplerCompari"
      new Table(47, 1, -1, new short[] {1786}),
/* NxS[1786] */ // Shortest string "/SamplerComparis"
      new Table(48, 1, -1, new short[] {1787}),
/* NxS[1787] */ // Shortest string "/SamplerCompariso"
      new Table(36, 1, -1, new short[] {1575}),
/* NxS[1788] */ // Shortest string "/Sta"
      new Table(39, 1, -1, new short[] {1789}),
/* NxS[1789] */ // Shortest string "/Stat"
      new Table(35, 1, -1, new short[] {1790}),
/* NxS[1790] */ // Shortest string "/State"
      new Table(41, 1, -1, new short[] {1791}),
/* NxS[1791] */ // Shortest string "/Stateb"
      new Table(34, 1, -1, new short[] {1792}),
/* NxS[1792] */ // Shortest string "/Statebl"
      new Table(48, 1, -1, new short[] {1793}),
/* NxS[1793] */ // Shortest string "/Stateblo"
      new Table(46, 1, -1, new short[] {1794}),
/* NxS[1794] */ // Shortest string "/Statebloc"
      new Table(43, 1, -1, new short[] {1795}),
/* NxS[1795] */ // Shortest string "/Stateblock"
      new Table(0, 39, -1, new short[] {81, 84, -1, 84, -1, -1, 
          -1, -1, -1, 84, 84, 81, -1, -1, -1, -1, 81, 82, 84, 84, 83, 1530, 
          84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, 
          1576}),
/* NxS[1796] */ // Shortest string "/do"
      new Table(0, 45, -1, new short[] {81, 84, -1, 84, -1, -1, 
          -1, -1, -1, 84, 84, 81, -1, -1, -1, -1, 81, 82, 84, 84, 83, 1530, 
          84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1801}),
/* NxS[1797] */ // Shortest string "/di"
      new Table(47, 1, -1, new short[] {1798}),
/* NxS[1798] */ // Shortest string "/dis"
      new Table(46, 1, -1, new short[] {1799}),
/* NxS[1799] */ // Shortest string "/disc"
      new Table(40, 1, -1, new short[] {1800}),
/* NxS[1800] */ // Shortest string "/disca"
      new Table(42, 1, -1, new short[] {1623}),
/* NxS[1801] */ // Shortest string "/dou"
      new Table(41, 1, -1, new short[] {1802}),
/* NxS[1802] */ // Shortest string "/doub"
      new Table(34, 1, -1, new short[] {1803}),
/* NxS[1803] */ // Shortest string "/doubl"
      new Table(35, 1, -1, new short[] {1642}),
/* NxS[1804] */ // Shortest string "/na"
      new Table(49, 1, -1, new short[] {1826}),
/* NxS[1805] */ // Shortest string "/no"
      new Table(50, 2, -1, new short[] {1806, 1807}),
/* NxS[1806] */ // Shortest string "/nop"
      new Table(35, 1, -1, new short[] {1818}),
/* NxS[1807] */ // Shortest string "/noi"
      new Table(36, 1, -1, new short[] {1808}),
/* NxS[1808] */ // Shortest string "/noin"
      new Table(39, 1, -1, new short[] {1809}),
/* NxS[1809] */ // Shortest string "/noint"
      new Table(35, 1, -1, new short[] {1810}),
/* NxS[1810] */ // Shortest string "/nointe"
      new Table(42, 1, -1, new short[] {1811}),
/* NxS[1811] */ // Shortest string "/nointer"
      new Table(50, 1, -1, new short[] {1812}),
/* NxS[1812] */ // Shortest string "/nointerp"
      new Table(48, 1, -1, new short[] {1813}),
/* NxS[1813] */ // Shortest string "/nointerpo"
      new Table(34, 1, -1, new short[] {1814}),
/* NxS[1814] */ // Shortest string "/nointerpol"
      new Table(40, 1, -1, new short[] {1815}),
/* NxS[1815] */ // Shortest string "/nointerpola"
      new Table(39, 1, -1, new short[] {1816}),
/* NxS[1816] */ // Shortest string "/nointerpolat"
      new Table(51, 1, -1, new short[] {1817}),
/* NxS[1817] */ // Shortest string "/nointerpolati"
      new Table(48, 1, -1, new short[] {1737}),
/* NxS[1818] */ // Shortest string "/nope"
      new Table(42, 1, -1, new short[] {1819}),
/* NxS[1819] */ // Shortest string "/noper"
      new Table(47, 1, -1, new short[] {1820}),
/* NxS[1820] */ // Shortest string "/nopers"
      new Table(50, 1, -1, new short[] {1821}),
/* NxS[1821] */ // Shortest string "/nopersp"
      new Table(35, 1, -1, new short[] {1822}),
/* NxS[1822] */ // Shortest string "/noperspe"
      new Table(46, 1, -1, new short[] {1823}),
/* NxS[1823] */ // Shortest string "/noperspec"
      new Table(39, 1, -1, new short[] {1824}),
/* NxS[1824] */ // Shortest string "/noperspect"
      new Table(51, 1, -1, new short[] {1825}),
/* NxS[1825] */ // Shortest string "/noperspecti"
      new Table(58, 1, -1, new short[] {1579}),
/* NxS[1826] */ // Shortest string "/nam"
      new Table(35, 1, -1, new short[] {1827}),
/* NxS[1827] */ // Shortest string "/name"
      new Table(47, 1, -1, new short[] {1828}),
/* NxS[1828] */ // Shortest string "/names"
      new Table(50, 1, -1, new short[] {1661}),
/* NxS[1829] */ // Shortest string "/ex"
      new Table(39, 1, -1, new short[] {1830}),
/* NxS[1830] */ // Shortest string "/ext"
      new Table(35, 1, -1, new short[] {1736}),
/* NxS[1831] */ // Shortest string "/li"
      new Table(36, 1, -1, new short[] {1832}),
/* NxS[1832] */ // Shortest string "/lin"
      new Table(35, 1, -1, new short[] {1833}),
/* NxS[1833] */ // Shortest string "/line"
      new Table(0, 41, -1, new short[] {77, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 1834}),
/* NxS[1834] */ // Shortest string "/linea"
      new Table(37, 6, -1, new short[] {1757, -1, -1, -1, -1, 1534}),
/* NxS[1835] */ // Shortest string "/Bl"
      new Table(35, 1, -1, new short[] {1840}),
/* NxS[1836] */ // Shortest string "/Bu"
      new Table(45, 1, -1, new short[] {1837}),
/* NxS[1837] */ // Shortest string "/Buf"
      new Table(45, 1, -1, new short[] {1838}),
/* NxS[1838] */ // Shortest string "/Buff"
      new Table(35, 1, -1, new short[] {1839}),
/* NxS[1839] */ // Shortest string "/Buffe"
      new Table(42, 1, -1, new short[] {1535}),
/* NxS[1840] */ // Shortest string "/Ble"
      new Table(36, 1, -1, new short[] {1841}),
/* NxS[1841] */ // Shortest string "/Blen"
      new Table(37, 1, -1, new short[] {1575}),
/* NxS[1842] */ // Shortest string "/Fl"
      new Table(48, 1, -1, new short[] {1843}),
/* NxS[1843] */ // Shortest string "/Flo"
      new Table(40, 1, -1, new short[] {1595}),
/* NxS[1844] */ // Shortest string "/Ap"
      new Table(50, 1, -1, new short[] {1845}),
/* NxS[1845] */ // Shortest string "/App"
      new Table(35, 1, -1, new short[] {1846}),
/* NxS[1846] */ // Shortest string "/Appe"
      new Table(36, 1, -1, new short[] {1847}),
/* NxS[1847] */ // Shortest string "/Appen"
      new Table(37, 1, -1, new short[] {1492}),
/* NxS[1848] */ // Shortest string "/="
      new Table(6, 71, -1, new short[] {1435, -1, -1, -1, -1, -1, 
          -1, 1436, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1437, 1438, 1439, 1440, 1441, 1442, 1443, -1, 1444, 1445, -1, 
          1446, 1447, 1448, 1449, 1657, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, -1, 1458, 1459, 
          1460, -1, 1461, -1, -1, 1462, -1, 1463, -1, -1, -1, -1, 1464, 1465, -1, -1, 
          1466}),
/* NxS[1849] */ // Shortest string "^\t\t"
      new Table(33, 76, -1, new short[] {2128, -1, -1, -1, -1, 2129, 
          -1, -1, -1, -1, -1, -1, -1, 2130, -1, -1, -1, -1, -1, 2131, -1, 2132, 
          -1, 2133, -1, -1, 2134, 2135, -1, 2136, -1, -1, -1, -1, 2137, 1863, -1, 1864, 
          -1, 2138, 2139, 1867, 1868, -1, -1, 1869, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 1870, -1, -1, 1849, -1, -1, -1, -1, -1, 2126, -1, 1851, -1, -1, -1, 
          -1, 2127, -1, -1, 1849, 1849}),
/* NxS[1850] */ // Shortest string "^\tA"
      new Table(34, 17, -1, new short[] {2170, -1, -1, 1948, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 2171, 1844}),
/* NxS[1851] */ // Shortest string "^\tE"
      new Table(49, 26, -1, new short[] {2180, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1895, -1, 
          -1, -1, -1, 2181}),
/* NxS[1852] */ // Shortest string "^\tF"
      new Table(34, 15, -1, new short[] {1842, -1, -1, -1, -1, -1, 
          2157, -1, -1, -1, -1, -1, -1, -1, 2158}),
/* NxS[1853] */ // Shortest string "^\tB"
      new Table(34, 24, -1, new short[] {2115, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1836, -1, -1, -1, -1, -1, -1, 2116, -1, -1, -1, -1, 
          -1, 1558}),
/* NxS[1854] */ // Shortest string "^\tS"
      new Table(35, 19, -1, new short[] {2060, -1, -1, -1, 2061, 1770, 
          -1, 1919, -1, 2062, -1, -1, -1, 2063, -1, 2064, -1, -1, 2065}),
/* NxS[1855] */ // Shortest string "^\tc"
      new Table(34, 15, -1, new short[] {1701, 1702, -1, -1, -1, -1, 
          -1, 1703, -1, -1, -1, -1, -1, -1, 2058}),
/* NxS[1856] */ // Shortest string "^\tD"
      new Table(35, 39, -1, new short[] {2046, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1910, -1, -1, -1, 2047, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          2048}),
/* NxS[1857] */ // Shortest string "^\tV"
      new Table(35, 1, -1, new short[] {2038}),
/* NxS[1858] */ // Shortest string "^\tG"
      new Table(8, 35, -1, new short[] {1894, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1629, -1, -1, -1, -1, -1, -1, 2035}),
/* NxS[1859] */ // Shortest string "^\tP"
      new Table(40, 12, -1, new short[] {1980, -1, 2020, -1, -1, -1, 
          -1, -1, 1608, -1, -1, 1609}),
/* NxS[1860] */ // Shortest string "^\tR"
      new Table(35, 41, -1, new short[] {2002, -1, -1, -1, -1, 2003, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 1542}),
/* NxS[1861] */ // Shortest string "^\tT"
      new Table(35, 8, -1, new short[] {1511, -1, -1, -1, -1, 2001, 
          -1, 1512}),
/* NxS[1862] */ // Shortest string "^\tC"
      new Table(44, 13, -1, new short[] {1982, -1, -1, -1, 1983, -1, 
          -1, -1, -1, -1, -1, -1, 1984}),
/* NxS[1863] */ // Shortest string "^\tU"
      new Table(47, 1, -1, new short[] {1977}),
/* NxS[1864] */ // Shortest string "^\tM"
      new Table(40, 12, -1, new short[] {1969, -1, -1, -1, -1, -1, 
          -1, -1, 1929, -1, -1, 1970}),
/* NxS[1865] */ // Shortest string "^\tL"
      new Table(35, 65, -1, new short[] {1920, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1921, -1, -1, 1922, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          1923, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1894}),
/* NxS[1866] */ // Shortest string "^\tO"
      new Table(36, 10, -1, new short[] {1899, -1, -1, -1, -1, -1, 
          -1, -1, 1476, 1900}),
/* NxS[1867] */ // Shortest string "^\tN"
      new Table(35, 14, -1, new short[] {1890, -1, -1, -1, -1, 1891, 
          -1, -1, -1, -1, -1, -1, -1, 1892}),
/* NxS[1868] */ // Shortest string "^\tW"
      new Table(42, 1, -1, new short[] {1883}),
/* NxS[1869] */ // Shortest string "^\tZ"
      new Table(13, 63, -1, new short[] {1871, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          1872, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1873, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1874}),
/* NxS[1870] */ // Shortest string "^\t#"
      new Table(50, 1, -1, new short[] {123}),
/* NxS[1871] */ // Shortest string "^\tZF"
      new Table(40, 1, -1, new short[] {1881}),
/* NxS[1872] */ // Shortest string "^\tZe"
      new Table(42, 1, -1, new short[] {1880}),
/* NxS[1873] */ // Shortest string "^\tZT"
      new Table(35, 1, -1, new short[] {1878}),
/* NxS[1874] */ // Shortest string "^\tZW"
      new Table(42, 1, -1, new short[] {1875}),
/* NxS[1875] */ // Shortest string "^\tZWr"
      new Table(51, 1, -1, new short[] {1876}),
/* NxS[1876] */ // Shortest string "^\tZWri"
      new Table(39, 1, -1, new short[] {1877}),
/* NxS[1877] */ // Shortest string "^\tMod"
      new Table(35, 1, -1, new short[] {53}),
/* NxS[1878] */ // Shortest string "^\tZTe"
      new Table(47, 1, -1, new short[] {1879}),
/* NxS[1879] */ // Shortest string "^\tZTes"
      new Table(39, 1, -1, new short[] {53}),
/* NxS[1880] */ // Shortest string "^\tZer"
      new Table(48, 1, -1, new short[] {53}),
/* NxS[1881] */ // Shortest string "^\tZFa"
      new Table(51, 1, -1, new short[] {1882}),
/* NxS[1882] */ // Shortest string "^\tFai"
      new Table(34, 1, -1, new short[] {53}),
/* NxS[1883] */ // Shortest string "^\tWr"
      new Table(51, 1, -1, new short[] {1884}),
/* NxS[1884] */ // Shortest string "^\tWri"
      new Table(39, 1, -1, new short[] {1885}),
/* NxS[1885] */ // Shortest string "^\tWrit"
      new Table(35, 1, -1, new short[] {1886}),
/* NxS[1886] */ // Shortest string "^\tRead"
      new Table(70, 1, -1, new short[] {1887}),
/* NxS[1887] */ // Shortest string "^\tReadM"
      new Table(40, 1, -1, new short[] {1888}),
/* NxS[1888] */ // Shortest string "^\tReadMa"
      new Table(47, 1, -1, new short[] {1889}),
/* NxS[1889] */ // Shortest string "^\tReadMas"
      new Table(43, 1, -1, new short[] {53}),
/* NxS[1890] */ // Shortest string "^\tNe"
      new Table(58, 1, -1, new short[] {1897}),
/* NxS[1891] */ // Shortest string "^\tNa"
      new Table(49, 1, -1, new short[] {1877}),
/* NxS[1892] */ // Shortest string "^\tNo"
      new Table(39, 1, -1, new short[] {1893}),
/* NxS[1893] */ // Shortest string "^\tNot"
      new Table(8, 1, -1, new short[] {1894}),
/* NxS[1894] */ // Shortest string "^\tGE"
      new Table(69, 1, -1, new short[] {1895}),
/* NxS[1895] */ // Shortest string "^\tEq"
      new Table(44, 1, -1, new short[] {1896}),
/* NxS[1896] */ // Shortest string "^\tEqu"
      new Table(40, 1, -1, new short[] {1882}),
/* NxS[1897] */ // Shortest string "^\tNev"
      new Table(35, 1, -1, new short[] {1898}),
/* NxS[1898] */ // Shortest string "^\tNeve"
      new Table(42, 1, -1, new short[] {53}),
/* NxS[1899] */ // Shortest string "^\tOn"
      new Table(35, 1, -1, new short[] {87}),
/* NxS[1900] */ // Shortest string "^\tOf"
      new Table(45, 1, -1, new short[] {1901}),
/* NxS[1901] */ // Shortest string "^\tOff"
      new Table(47, 1, -1, new short[] {1902}),
/* NxS[1902] */ // Shortest string "^\tOffs"
      new Table(35, 1, -1, new short[] {1879}),
/* NxS[1903] */ // Shortest string "^\tOneM"
      new Table(51, 1, -1, new short[] {1904}),
/* NxS[1904] */ // Shortest string "^\tOneMi"
      new Table(36, 1, -1, new short[] {1905}),
/* NxS[1905] */ // Shortest string "^\tOneMin"
      new Table(44, 1, -1, new short[] {1906}),
/* NxS[1906] */ // Shortest string "^\tOneMinu"
      new Table(47, 1, -1, new short[] {1907}),
/* NxS[1907] */ // Shortest string "^\tOneMinus"
      new Table(38, 15, -1, new short[] {1908, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1909}),
/* NxS[1908] */ // Shortest string "^\tOneMinusS"
      new Table(42, 1, -1, new short[] {1919}),
/* NxS[1909] */ // Shortest string "^\tOneMinusD"
      new Table(47, 1, -1, new short[] {1910}),
/* NxS[1910] */ // Shortest string "^\tDs"
      new Table(39, 1, -1, new short[] {1911}),
/* NxS[1911] */ // Shortest string "^\tSrc"
      new Table(67, 31, -1, new short[] {1913, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1912}),
/* NxS[1912] */ // Shortest string "^\tSrcA"
      new Table(34, 1, -1, new short[] {1916}),
/* NxS[1913] */ // Shortest string "^\tSrcC"
      new Table(48, 1, -1, new short[] {1914}),
/* NxS[1914] */ // Shortest string "^\tSrcCo"
      new Table(34, 1, -1, new short[] {1915}),
/* NxS[1915] */ // Shortest string "^\tSrcCol"
      new Table(48, 1, -1, new short[] {1898}),
/* NxS[1916] */ // Shortest string "^\tSrcAl"
      new Table(50, 1, -1, new short[] {1917}),
/* NxS[1917] */ // Shortest string "^\tSrcAlp"
      new Table(53, 1, -1, new short[] {1918}),
/* NxS[1918] */ // Shortest string "^\tSrcAlph"
      new Table(40, 1, -1, new short[] {53}),
/* NxS[1919] */ // Shortest string "^\tSr"
      new Table(46, 1, -1, new short[] {1911}),
/* NxS[1920] */ // Shortest string "^\tLe"
      new Table(47, 1, -1, new short[] {1968}),
/* NxS[1921] */ // Shortest string "^\tLo"
      new Table(63, 1, -1, new short[] {1931}),
/* NxS[1922] */ // Shortest string "^\tLi"
      new Table(36, 28, -1, new short[] {1478, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1924}),
/* NxS[1923] */ // Shortest string "^\tLO"
      new Table(52, 1, -1, new short[] {53}),
/* NxS[1924] */ // Shortest string "^\tLig"
      new Table(53, 1, -1, new short[] {1925}),
/* NxS[1925] */ // Shortest string "^\tLigh"
      new Table(39, 1, -1, new short[] {1926}),
/* NxS[1926] */ // Shortest string "^\tLight"
      new Table(51, 20, -1, new short[] {1927, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1928}),
/* NxS[1927] */ // Shortest string "^\tLighti"
      new Table(36, 1, -1, new short[] {1930}),
/* NxS[1928] */ // Shortest string "^\tLightM"
      new Table(48, 1, -1, new short[] {1929}),
/* NxS[1929] */ // Shortest string "^\tMo"
      new Table(37, 1, -1, new short[] {1877}),
/* NxS[1930] */ // Shortest string "^\tLightin"
      new Table(63, 1, -1, new short[] {53}),
/* NxS[1931] */ // Shortest string "^\tLog"
      new Table(51, 1, -1, new short[] {1932}),
/* NxS[1932] */ // Shortest string "^\tLogi"
      new Table(46, 1, -1, new short[] {1933}),
/* NxS[1933] */ // Shortest string "^\tLogic"
      new Table(40, 1, -1, new short[] {1934}),
/* NxS[1934] */ // Shortest string "^\tLogica"
      new Table(34, 1, -1, new short[] {1935}),
/* NxS[1935] */ // Shortest string "^\tLogical"
      new Table(38, 62, -1, new short[] {1902, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1938, -1, -1, -1, -1, -1, 1939, 1940, -1, 
          1941, -1, -1, 1915, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1936, -1, 1937}),
/* NxS[1936] */ // Shortest string "^\tLogicalA"
      new Table(36, 1, -1, new short[] {1967}),
/* NxS[1937] */ // Shortest string "^\tLogicalE"
      new Table(69, 1, -1, new short[] {1964}),
/* NxS[1938] */ // Shortest string "^\tLogicalC"
      new Table(34, 15, -1, new short[] {1960, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1961}),
/* NxS[1939] */ // Shortest string "^\tLogicalO"
      new Table(42, 1, -1, new short[] {88}),
/* NxS[1940] */ // Shortest string "^\tLogicalN"
      new Table(40, 9, -1, new short[] {1945, -1, -1, -1, -1, -1, 
          -1, -1, 1946}),
/* NxS[1941] */ // Shortest string "^\tLogicalI"
      new Table(36, 1, -1, new short[] {1942}),
/* NxS[1942] */ // Shortest string "^\tLogicalIn"
      new Table(58, 1, -1, new short[] {1943}),
/* NxS[1943] */ // Shortest string "^\tLogicalInv"
      new Table(35, 1, -1, new short[] {1944}),
/* NxS[1944] */ // Shortest string "^\tLogicalInve"
      new Table(42, 1, -1, new short[] {1879}),
/* NxS[1945] */ // Shortest string "^\t\tBle"
      new Table(36, 1, -1, new short[] {1948}),
/* NxS[1946] */ // Shortest string "^\tLogicalNo"
      new Table(42, 7, -1, new short[] {53, -1, -1, -1, -1, -1, 
          1947}),
/* NxS[1947] */ // Shortest string "^\tLogicalNoo"
      new Table(50, 1, -1, new short[] {53}),
/* NxS[1948] */ // Shortest string "^\tAd"
      new Table(37, 1, -1, new short[] {53}),
/* NxS[1949] */ // Shortest string "^\tLogicalOrR"
      new Table(35, 1, -1, new short[] {1956}),
/* NxS[1950] */ // Shortest string "^\tLogicalOrI"
      new Table(36, 1, -1, new short[] {1951}),
/* NxS[1951] */ // Shortest string "^\tLogicalOrIn"
      new Table(58, 1, -1, new short[] {1952}),
/* NxS[1952] */ // Shortest string "^\tLogicalOrInv"
      new Table(35, 1, -1, new short[] {1953}),
/* NxS[1953] */ // Shortest string "^\tLogicalOrInve"
      new Table(42, 1, -1, new short[] {1954}),
/* NxS[1954] */ // Shortest string "^\tLogicalOrInver"
      new Table(39, 1, -1, new short[] {1955}),
/* NxS[1955] */ // Shortest string "^\tLogicalOrInvert"
      new Table(35, 1, -1, new short[] {1948}),
/* NxS[1956] */ // Shortest string "^\tLogicalOrRe"
      new Table(58, 1, -1, new short[] {1957}),
/* NxS[1957] */ // Shortest string "^\tLogicalOrRev"
      new Table(35, 1, -1, new short[] {1958}),
/* NxS[1958] */ // Shortest string "^\tLogicalOrReve"
      new Table(42, 1, -1, new short[] {1959}),
/* NxS[1959] */ // Shortest string "^\tDiffu"
      new Table(47, 1, -1, new short[] {1877}),
/* NxS[1960] */ // Shortest string "^\tLogicalCl"
      new Table(35, 1, -1, new short[] {1963}),
/* NxS[1961] */ // Shortest string "^\tLogicalCo"
      new Table(50, 1, -1, new short[] {1962}),
/* NxS[1962] */ // Shortest string "^\tLogicalCop"
      new Table(57, 1, -1, new short[] {89}),
/* NxS[1963] */ // Shortest string "^\tSpecul"
      new Table(40, 1, -1, new short[] {1898}),
/* NxS[1964] */ // Shortest string "^\tLogicalEq"
      new Table(44, 1, -1, new short[] {1965}),
/* NxS[1965] */ // Shortest string "^\tLogicalEqu"
      new Table(51, 1, -1, new short[] {1966}),
/* NxS[1966] */ // Shortest string "^\tLogicalEqui"
      new Table(58, 1, -1, new short[] {53}),
/* NxS[1967] */ // Shortest string "^\tLogicalAn"
      new Table(37, 1, -1, new short[] {88}),
/* NxS[1968] */ // Shortest string "^\tLes"
      new Table(47, 1, -1, new short[] {53}),
/* NxS[1969] */ // Shortest string "^\tMa"
      new Table(5, 35, -1, new short[] {53, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1971}),
/* NxS[1970] */ // Shortest string "^\tMi"
      new Table(36, 1, -1, new short[] {53}),
/* NxS[1971] */ // Shortest string "^\tMat"
      new Table(35, 1, -1, new short[] {1972}),
/* NxS[1972] */ // Shortest string "^\tMate"
      new Table(42, 1, -1, new short[] {1973}),
/* NxS[1973] */ // Shortest string "^\tMater"
      new Table(51, 1, -1, new short[] {1974}),
/* NxS[1974] */ // Shortest string "^\tMateri"
      new Table(40, 1, -1, new short[] {1975}),
/* NxS[1975] */ // Shortest string "^\tStenci"
      new Table(34, 1, -1, new short[] {1976}),
/* NxS[1976] */ // Shortest string "^\tPass"
      new Table(0, 28, -1, new short[] {67, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 68, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 67}),
/* NxS[1977] */ // Shortest string "^\tUs"
      new Table(35, 1, -1, new short[] {1978}),
/* NxS[1978] */ // Shortest string "^\tUse"
      new Table(59, 1, -1, new short[] {1979}),
/* NxS[1979] */ // Shortest string "^\tUseP"
      new Table(40, 1, -1, new short[] {1980}),
/* NxS[1980] */ // Shortest string "^\tPa"
      new Table(47, 1, -1, new short[] {1981}),
/* NxS[1981] */ // Shortest string "^\tPas"
      new Table(47, 1, -1, new short[] {1976}),
/* NxS[1982] */ // Shortest string "^\tCu"
      new Table(34, 8, -1, new short[] {1882, -1, -1, -1, -1, -1, 
          -1, 1510}),
/* NxS[1983] */ // Shortest string "^\tCo"
      new Table(34, 16, -1, new short[] {1991, -1, 1488, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1992}),
/* NxS[1984] */ // Shortest string "^\tCG"
      new Table(59, 1, -1, new short[] {1985}),
/* NxS[1985] */ // Shortest string "^\tCGP"
      new Table(60, 1, -1, new short[] {1986}),
/* NxS[1986] */ // Shortest string "^\tCGPR"
      new Table(73, 1, -1, new short[] {1987}),
/* NxS[1987] */ // Shortest string "^\tCGPRO"
      new Table(56, 1, -1, new short[] {1988}),
/* NxS[1988] */ // Shortest string "^\tCGPROG"
      new Table(60, 1, -1, new short[] {1989}),
/* NxS[1989] */ // Shortest string "^\tCGPROGR"
      new Table(6, 1, -1, new short[] {1990}),
/* NxS[1990] */ // Shortest string "^\tCGPROGRA"
      new Table(70, 1, -1, new short[] {1976}),
/* NxS[1991] */ // Shortest string "^\tCol"
      new Table(48, 1, -1, new short[] {1995}),
/* NxS[1992] */ // Shortest string "^\tCom"
      new Table(41, 10, -1, new short[] {1993, -1, -1, -1, -1, -1, 
          -1, -1, -1, 53}),
/* NxS[1993] */ // Shortest string "^\tcomb"
      new Table(51, 1, -1, new short[] {1994}),
/* NxS[1994] */ // Shortest string "^\tcombi"
      new Table(36, 1, -1, new short[] {1877}),
/* NxS[1995] */ // Shortest string "^\tColo"
      new Table(42, 1, -1, new short[] {90}),
/* NxS[1996] */ // Shortest string "^\tColorM"
      new Table(40, 1, -1, new short[] {1997}),
/* NxS[1997] */ // Shortest string "^\tColorMa"
      new Table(39, 9, -1, new short[] {1998, -1, -1, -1, -1, -1, 
          -1, -1, 1889}),
/* NxS[1998] */ // Shortest string "^\tColorMat"
      new Table(35, 1, -1, new short[] {1999}),
/* NxS[1999] */ // Shortest string "^\tColorMate"
      new Table(42, 1, -1, new short[] {2000}),
/* NxS[2000] */ // Shortest string "^\tColorMater"
      new Table(51, 1, -1, new short[] {1896}),
/* NxS[2001] */ // Shortest string "^\tTa"
      new Table(63, 1, -1, new short[] {1981}),
/* NxS[2002] */ // Shortest string "^\tRe"
      new Table(36, 34, -1, new short[] {1594, -1, -1, -1, 2006, -1, 
          -1, -1, -1, 53, 1595, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          2007, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2008}),
/* NxS[2003] */ // Shortest string "^\tRa"
      new Table(36, 12, -1, new short[] {2004, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1568}),
/* NxS[2004] */ // Shortest string "^\tRan"
      new Table(63, 1, -1, new short[] {2005}),
/* NxS[2005] */ // Shortest string "^\tRang"
      new Table(35, 1, -1, new short[] {91}),
/* NxS[2006] */ // Shortest string "^\tRea"
      new Table(37, 1, -1, new short[] {1886}),
/* NxS[2007] */ // Shortest string "^\tRev"
      new Table(38, 1, -1, new short[] {2018}),
/* NxS[2008] */ // Shortest string "^\tReq"
      new Table(44, 1, -1, new short[] {2009}),
/* NxS[2009] */ // Shortest string "^\tRequ"
      new Table(51, 1, -1, new short[] {2010}),
/* NxS[2010] */ // Shortest string "^\tRequi"
      new Table(42, 1, -1, new short[] {2011}),
/* NxS[2011] */ // Shortest string "^\tRequir"
      new Table(35, 1, -1, new short[] {2012}),
/* NxS[2012] */ // Shortest string "^\tRequire"
      new Table(73, 1, -1, new short[] {2013}),
/* NxS[2013] */ // Shortest string "^\tRequireO"
      new Table(50, 1, -1, new short[] {2014}),
/* NxS[2014] */ // Shortest string "^\tRequireOp"
      new Table(39, 1, -1, new short[] {2015}),
/* NxS[2015] */ // Shortest string "^\tRequireOpt"
      new Table(51, 1, -1, new short[] {2016}),
/* NxS[2016] */ // Shortest string "^\tRequireOpti"
      new Table(48, 1, -1, new short[] {2017}),
/* NxS[2017] */ // Shortest string "^\tRequireOptio"
      new Table(36, 1, -1, new short[] {1968}),
/* NxS[2018] */ // Shortest string "^\tRevS"
      new Table(44, 1, -1, new short[] {2019}),
/* NxS[2019] */ // Shortest string "^\tRevSu"
      new Table(41, 1, -1, new short[] {53}),
/* NxS[2020] */ // Shortest string "^\tPr"
      new Table(35, 14, -1, new short[] {2021, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 2022}),
/* NxS[2021] */ // Shortest string "^\tPre"
      new Table(50, 1, -1, new short[] {2028}),
/* NxS[2022] */ // Shortest string "^\tPro"
      new Table(50, 1, -1, new short[] {2023}),
/* NxS[2023] */ // Shortest string "^\tProp"
      new Table(35, 1, -1, new short[] {2024}),
/* NxS[2024] */ // Shortest string "^\tPrope"
      new Table(42, 1, -1, new short[] {2025}),
/* NxS[2025] */ // Shortest string "^\tProper"
      new Table(39, 1, -1, new short[] {2026}),
/* NxS[2026] */ // Shortest string "^\tPropert"
      new Table(51, 1, -1, new short[] {2027}),
/* NxS[2027] */ // Shortest string "^\tProperti"
      new Table(35, 1, -1, new short[] {1981}),
/* NxS[2028] */ // Shortest string "^\tPrep"
      new Table(40, 1, -1, new short[] {2029}),
/* NxS[2029] */ // Shortest string "^\tPrepa"
      new Table(47, 1, -1, new short[] {2030}),
/* NxS[2030] */ // Shortest string "^\tPrepas"
      new Table(47, 1, -1, new short[] {2031}),
/* NxS[2031] */ // Shortest string "^\tPrepass"
      new Table(13, 21, -1, new short[] {2032, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2033}),
/* NxS[2032] */ // Shortest string "^\tPrepassF"
      new Table(51, 1, -1, new short[] {2034}),
/* NxS[2033] */ // Shortest string "^\tForwardB"
      new Table(40, 1, -1, new short[] {1959}),
/* NxS[2034] */ // Shortest string "^\tPrepassFi"
      new Table(36, 1, -1, new short[] {1896}),
/* NxS[2035] */ // Shortest string "^\tGr"
      new Table(35, 1, -1, new short[] {2036}),
/* NxS[2036] */ // Shortest string "^\tGre"
      new Table(40, 1, -1, new short[] {2037}),
/* NxS[2037] */ // Shortest string "^\tGrea"
      new Table(39, 1, -1, new short[] {1897}),
/* NxS[2038] */ // Shortest string "^\tVe"
      new Table(42, 5, -1, new short[] {2039, -1, -1, -1, 1637}),
/* NxS[2039] */ // Shortest string "^\tVer"
      new Table(39, 1, -1, new short[] {2040}),
/* NxS[2040] */ // Shortest string "^\tVert"
      new Table(35, 1, -1, new short[] {2041}),
/* NxS[2041] */ // Shortest string "^\tVerte"
      new Table(5, 1, -1, new short[] {92}),
/* NxS[2042] */ // Shortest string "^\tVertexL"
      new Table(70, 1, -1, new short[] {93}),
/* NxS[2043] */ // Shortest string "^\tVertexLMR"
      new Table(56, 1, -1, new short[] {2044}),
/* NxS[2044] */ // Shortest string "^\tVertexLMRG"
      new Table(33, 1, -1, new short[] {2045}),
/* NxS[2045] */ // Shortest string "^\tVertexLMRGB"
      new Table(70, 1, -1, new short[] {53}),
/* NxS[2046] */ // Shortest string "^\tDe"
      new Table(36, 15, -1, new short[] {2054, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1644}),
/* NxS[2047] */ // Shortest string "^\tDi"
      new Table(45, 1, -1, new short[] {2052}),
/* NxS[2048] */ // Shortest string "^\tDO"
      new Table(68, 1, -1, new short[] {2049}),
/* NxS[2049] */ // Shortest string "^\tDOU"
      new Table(33, 1, -1, new short[] {2050}),
/* NxS[2050] */ // Shortest string "^\tDOUB"
      new Table(72, 1, -1, new short[] {2051}),
/* NxS[2051] */ // Shortest string "^\tDOUBL"
      new Table(8, 1, -1, new short[] {53}),
/* NxS[2052] */ // Shortest string "^\tDif"
      new Table(45, 1, -1, new short[] {2053}),
/* NxS[2053] */ // Shortest string "^\tDiff"
      new Table(44, 1, -1, new short[] {1959}),
/* NxS[2054] */ // Shortest string "^\tDen"
      new Table(47, 1, -1, new short[] {2055}),
/* NxS[2055] */ // Shortest string "^\tDens"
      new Table(51, 1, -1, new short[] {2056}),
/* NxS[2056] */ // Shortest string "^\tDensi"
      new Table(39, 1, -1, new short[] {2057}),
/* NxS[2057] */ // Shortest string "^\tDensit"
      new Table(57, 1, -1, new short[] {53}),
/* NxS[2058] */ // Shortest string "^\tco"
      new Table(36, 14, -1, new short[] {1705, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 2059}),
/* NxS[2059] */ // Shortest string "^\tcom"
      new Table(41, 10, -1, new short[] {1993, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1625}),
/* NxS[2060] */ // Shortest string "^\tSe"
      new Table(39, 12, -1, new short[] {2102, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 2103}),
/* NxS[2061] */ // Shortest string "^\tSt"
      new Table(35, 8, -1, new short[] {2099, -1, -1, -1, -1, 1788, 
          -1, 1495}),
/* NxS[2062] */ // Shortest string "^\tSu"
      new Table(41, 1, -1, new short[] {94}),
/* NxS[2063] */ // Shortest string "^\tSo"
      new Table(45, 1, -1, new short[] {2085}),
/* NxS[2064] */ // Shortest string "^\tSp"
      new Table(35, 1, -1, new short[] {2082}),
/* NxS[2065] */ // Shortest string "^\tSh"
      new Table(40, 12, -1, new short[] {2066, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 2067}),
/* NxS[2066] */ // Shortest string "^\tSha"
      new Table(37, 1, -1, new short[] {2071}),
/* NxS[2067] */ // Shortest string "^\tShi"
      new Table(36, 1, -1, new short[] {2068}),
/* NxS[2068] */ // Shortest string "^\tShin"
      new Table(51, 1, -1, new short[] {2069}),
/* NxS[2069] */ // Shortest string "^\tShini"
      new Table(36, 1, -1, new short[] {2070}),
/* NxS[2070] */ // Shortest string "^\tShinin"
      new Table(35, 1, -1, new short[] {1920}),
/* NxS[2071] */ // Shortest string "^\tShad"
      new Table(35, 14, -1, new short[] {2072, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 2073}),
/* NxS[2072] */ // Shortest string "^\tShade"
      new Table(42, 1, -1, new short[] {1976}),
/* NxS[2073] */ // Shortest string "^\tShado"
      new Table(55, 1, -1, new short[] {2074}),
/* NxS[2074] */ // Shortest string "^\tShadow"
      new Table(67, 1, -1, new short[] {2075}),
/* NxS[2075] */ // Shortest string "^\tShadowC"
      new Table(40, 9, -1, new short[] {2076, -1, -1, -1, -1, -1, 
          -1, -1, 2077}),
/* NxS[2076] */ // Shortest string "^\tShadowCa"
      new Table(47, 1, -1, new short[] {2037}),
/* NxS[2077] */ // Shortest string "^\tShadowCo"
      new Table(34, 1, -1, new short[] {2078}),
/* NxS[2078] */ // Shortest string "^\tShadowCol"
      new Table(34, 1, -1, new short[] {2079}),
/* NxS[2079] */ // Shortest string "^\tShadowColl"
      new Table(35, 1, -1, new short[] {2080}),
/* NxS[2080] */ // Shortest string "^\tShadowColle"
      new Table(46, 1, -1, new short[] {2081}),
/* NxS[2081] */ // Shortest string "^\tShadowCollec"
      new Table(39, 1, -1, new short[] {1915}),
/* NxS[2082] */ // Shortest string "^\tSpe"
      new Table(46, 1, -1, new short[] {2083}),
/* NxS[2083] */ // Shortest string "^\tSpec"
      new Table(44, 1, -1, new short[] {2084}),
/* NxS[2084] */ // Shortest string "^\tSpecu"
      new Table(34, 1, -1, new short[] {1963}),
/* NxS[2085] */ // Shortest string "^\tSof"
      new Table(39, 1, -1, new short[] {2086}),
/* NxS[2086] */ // Shortest string "^\tSoft"
      new Table(54, 1, -1, new short[] {2087}),
/* NxS[2087] */ // Shortest string "^\tSoftV"
      new Table(35, 1, -1, new short[] {2088}),
/* NxS[2088] */ // Shortest string "^\tSoftVe"
      new Table(63, 1, -1, new short[] {2089}),
/* NxS[2089] */ // Shortest string "^\tSoftVeg"
      new Table(35, 1, -1, new short[] {2090}),
/* NxS[2090] */ // Shortest string "^\tSoftVege"
      new Table(39, 1, -1, new short[] {2091}),
/* NxS[2091] */ // Shortest string "^\tSoftVeget"
      new Table(40, 1, -1, new short[] {2092}),
/* NxS[2092] */ // Shortest string "^\tSoftVegeta"
      new Table(39, 1, -1, new short[] {2093}),
/* NxS[2093] */ // Shortest string "^\tEmiss"
      new Table(51, 1, -1, new short[] {2094}),
/* NxS[2094] */ // Shortest string "^\tEmissi"
      new Table(48, 1, -1, new short[] {1970}),
/* NxS[2095] */ // Shortest string "^\tSubS"
      new Table(53, 1, -1, new short[] {2096}),
/* NxS[2096] */ // Shortest string "^\tSubSh"
      new Table(40, 1, -1, new short[] {2097}),
/* NxS[2097] */ // Shortest string "^\tSubSha"
      new Table(37, 1, -1, new short[] {2098}),
/* NxS[2098] */ // Shortest string "^\tSubShad"
      new Table(35, 1, -1, new short[] {2072}),
/* NxS[2099] */ // Shortest string "^\tSte"
      new Table(36, 1, -1, new short[] {2100}),
/* NxS[2100] */ // Shortest string "^\tSten"
      new Table(46, 1, -1, new short[] {2101}),
/* NxS[2101] */ // Shortest string "^\tStenc"
      new Table(51, 1, -1, new short[] {1975}),
/* NxS[2102] */ // Shortest string "^\tSet"
      new Table(62, 1, -1, new short[] {2110}),
/* NxS[2103] */ // Shortest string "^\tSep"
      new Table(40, 1, -1, new short[] {2104}),
/* NxS[2104] */ // Shortest string "^\tSepa"
      new Table(42, 1, -1, new short[] {2105}),
/* NxS[2105] */ // Shortest string "^\tSepar"
      new Table(40, 1, -1, new short[] {2106}),
/* NxS[2106] */ // Shortest string "^\tSepara"
      new Table(39, 1, -1, new short[] {2107}),
/* NxS[2107] */ // Shortest string "^\tSeparat"
      new Table(35, 1, -1, new short[] {2108}),
/* NxS[2108] */ // Shortest string "^\tSeparate"
      new Table(38, 1, -1, new short[] {2109}),
/* NxS[2109] */ // Shortest string "^\tSeparateS"
      new Table(50, 1, -1, new short[] {2064}),
/* NxS[2110] */ // Shortest string "^\tSetT"
      new Table(35, 1, -1, new short[] {2111}),
/* NxS[2111] */ // Shortest string "^\tSetTe"
      new Table(5, 1, -1, new short[] {2112}),
/* NxS[2112] */ // Shortest string "^\tSetTex"
      new Table(39, 1, -1, new short[] {2113}),
/* NxS[2113] */ // Shortest string "^\tSetText"
      new Table(44, 1, -1, new short[] {2114}),
/* NxS[2114] */ // Shortest string "^\tSetTextu"
      new Table(42, 1, -1, new short[] {1877}),
/* NxS[2115] */ // Shortest string "^\tBl"
      new Table(35, 1, -1, new short[] {2124}),
/* NxS[2116] */ // Shortest string "^\tBi"
      new Table(36, 1, -1, new short[] {2117}),
/* NxS[2117] */ // Shortest string "^\tBin"
      new Table(37, 1, -1, new short[] {95}),
/* NxS[2118] */ // Shortest string "^\tBindC"
      new Table(53, 1, -1, new short[] {2119}),
/* NxS[2119] */ // Shortest string "^\tBindCh"
      new Table(40, 1, -1, new short[] {2120}),
/* NxS[2120] */ // Shortest string "^\tBindCha"
      new Table(36, 1, -1, new short[] {2121}),
/* NxS[2121] */ // Shortest string "^\tBindChan"
      new Table(36, 1, -1, new short[] {2122}),
/* NxS[2122] */ // Shortest string "^\tBindChann"
      new Table(35, 1, -1, new short[] {2123}),
/* NxS[2123] */ // Shortest string "^\tBindChanne"
      new Table(34, 1, -1, new short[] {1981}),
/* NxS[2124] */ // Shortest string "^\tBle"
      new Table(36, 1, -1, new short[] {2125}),
/* NxS[2125] */ // Shortest string "^\tBlen"
      new Table(37, 1, -1, new short[] {96}),
/* NxS[2126] */ // Shortest string "^\t\tA"
      new Table(34, 16, -1, new short[] {2170, -1, -1, 1948, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 2171}),
/* NxS[2127] */ // Shortest string "^\t\tF"
      new Table(40, 9, -1, new short[] {2157, -1, -1, -1, -1, -1, 
          -1, -1, 2158}),
/* NxS[2128] */ // Shortest string "^\t\tB"
      new Table(34, 18, -1, new short[] {2156, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2116}),
/* NxS[2129] */ // Shortest string "^\t\tS"
      new Table(35, 19, -1, new short[] {2060, -1, -1, -1, 2155, -1, 
          -1, 1919, -1, 2062, -1, -1, -1, 2063, -1, 2064, -1, -1, 2065}),
/* NxS[2130] */ // Shortest string "^\t\tc"
      new Table(48, 1, -1, new short[] {2153}),
/* NxS[2131] */ // Shortest string "^\t\tD"
      new Table(35, 39, -1, new short[] {2152, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1910, -1, -1, -1, 2047, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          2048}),
/* NxS[2132] */ // Shortest string "^\t\tV"
      new Table(35, 1, -1, new short[] {2148}),
/* NxS[2133] */ // Shortest string "^\t\tG"
      new Table(8, 35, -1, new short[] {1894, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2035}),
/* NxS[2134] */ // Shortest string "^\t\tP"
      new Table(40, 3, -1, new short[] {1980, -1, 2020}),
/* NxS[2135] */ // Shortest string "^\t\tR"
      new Table(35, 6, -1, new short[] {2145, -1, -1, -1, -1, 2146}),
/* NxS[2136] */ // Shortest string "^\t\tT"
      new Table(40, 1, -1, new short[] {2001}),
/* NxS[2137] */ // Shortest string "^\t\tC"
      new Table(44, 13, -1, new short[] {2141, -1, -1, -1, 2142, -1, 
          -1, -1, -1, -1, -1, -1, 1984}),
/* NxS[2138] */ // Shortest string "^\t\tL"
      new Table(35, 65, -1, new short[] {1920, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1921, -1, -1, 2140, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          1923, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1894}),
/* NxS[2139] */ // Shortest string "^\t\tO"
      new Table(36, 10, -1, new short[] {1899, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1900}),
/* NxS[2140] */ // Shortest string "^\t\tLi"
      new Table(63, 1, -1, new short[] {1924}),
/* NxS[2141] */ // Shortest string "^\t\tCu"
      new Table(34, 1, -1, new short[] {1882}),
/* NxS[2142] */ // Shortest string "^\t\tCo"
      new Table(34, 16, -1, new short[] {2143, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1992}),
/* NxS[2143] */ // Shortest string "^\t\tCol"
      new Table(48, 1, -1, new short[] {2144}),
/* NxS[2144] */ // Shortest string "^\t\tColo"
      new Table(42, 1, -1, new short[] {97}),
/* NxS[2145] */ // Shortest string "^\t\tRe"
      new Table(40, 30, -1, new short[] {2006, -1, -1, -1, -1, 53, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2007, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 2008}),
/* NxS[2146] */ // Shortest string "^\t\tRa"
      new Table(36, 1, -1, new short[] {2147}),
/* NxS[2147] */ // Shortest string "^\t\tRan"
      new Table(63, 1, -1, new short[] {1877}),
/* NxS[2148] */ // Shortest string "^\t\tVe"
      new Table(42, 1, -1, new short[] {2149}),
/* NxS[2149] */ // Shortest string "^\t\tVer"
      new Table(39, 1, -1, new short[] {2150}),
/* NxS[2150] */ // Shortest string "^\t\tVert"
      new Table(35, 1, -1, new short[] {2151}),
/* NxS[2151] */ // Shortest string "^\t\tVerte"
      new Table(5, 1, -1, new short[] {98}),
/* NxS[2152] */ // Shortest string "^\t\tDe"
      new Table(36, 1, -1, new short[] {2054}),
/* NxS[2153] */ // Shortest string "^\t\tco"
      new Table(49, 1, -1, new short[] {2154}),
/* NxS[2154] */ // Shortest string "^\t\tcom"
      new Table(41, 1, -1, new short[] {1993}),
/* NxS[2155] */ // Shortest string "^\t\tSt"
      new Table(35, 1, -1, new short[] {2099}),
/* NxS[2156] */ // Shortest string "^\t\tBl"
      new Table(35, 1, -1, new short[] {1945}),
/* NxS[2157] */ // Shortest string "^\tFa"
      new Table(34, 18, -1, new short[] {2165, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1882}),
/* NxS[2158] */ // Shortest string "^\tFo"
      new Table(42, 22, -1, new short[] {2159, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53}),
/* NxS[2159] */ // Shortest string "^\tFor"
      new Table(55, 1, -1, new short[] {2160}),
/* NxS[2160] */ // Shortest string "^\tForw"
      new Table(40, 1, -1, new short[] {2161}),
/* NxS[2161] */ // Shortest string "^\tForwa"
      new Table(42, 1, -1, new short[] {2162}),
/* NxS[2162] */ // Shortest string "^\tForwar"
      new Table(37, 1, -1, new short[] {2163}),
/* NxS[2163] */ // Shortest string "^\tForward"
      new Table(6, 28, -1, new short[] {2164, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 2033}),
/* NxS[2164] */ // Shortest string "^\tForwardA"
      new Table(37, 1, -1, new short[] {1948}),
/* NxS[2165] */ // Shortest string "^\tFal"
      new Table(34, 1, -1, new short[] {2166}),
/* NxS[2166] */ // Shortest string "^\tFall"
      new Table(33, 1, -1, new short[] {2167}),
/* NxS[2167] */ // Shortest string "^\tFallB"
      new Table(40, 1, -1, new short[] {2168}),
/* NxS[2168] */ // Shortest string "^\tFallBa"
      new Table(46, 1, -1, new short[] {2169}),
/* NxS[2169] */ // Shortest string "^\tFallBac"
      new Table(43, 1, -1, new short[] {1976}),
/* NxS[2170] */ // Shortest string "^\tAl"
      new Table(50, 6, -1, new short[] {2175, -1, -1, -1, -1, 2176}),
/* NxS[2171] */ // Shortest string "^\tAm"
      new Table(41, 1, -1, new short[] {2172}),
/* NxS[2172] */ // Shortest string "^\tAmb"
      new Table(51, 1, -1, new short[] {2173}),
/* NxS[2173] */ // Shortest string "^\tAmbi"
      new Table(35, 1, -1, new short[] {2174}),
/* NxS[2174] */ // Shortest string "^\tAmbie"
      new Table(36, 1, -1, new short[] {1879}),
/* NxS[2175] */ // Shortest string "^\tAlp"
      new Table(53, 1, -1, new short[] {2178}),
/* NxS[2176] */ // Shortest string "^\tAlw"
      new Table(40, 1, -1, new short[] {2177}),
/* NxS[2177] */ // Shortest string "^\tAlwa"
      new Table(57, 1, -1, new short[] {1968}),
/* NxS[2178] */ // Shortest string "^\tAlph"
      new Table(40, 1, -1, new short[] {2179}),
/* NxS[2179] */ // Shortest string "^\tAlpha"
      new Table(62, 1, -1, new short[] {1873}),
/* NxS[2180] */ // Shortest string "^\tEm"
      new Table(51, 1, -1, new short[] {2184}),
/* NxS[2181] */ // Shortest string "^\tEN"
      new Table(52, 1, -1, new short[] {2182}),
/* NxS[2182] */ // Shortest string "^\tEND"
      new Table(67, 1, -1, new short[] {2183}),
/* NxS[2183] */ // Shortest string "^\tENDC"
      new Table(56, 1, -1, new short[] {1976}),
/* NxS[2184] */ // Shortest string "^\tEmi"
      new Table(47, 1, -1, new short[] {2185}),
/* NxS[2185] */ // Shortest string "^\tEmis"
      new Table(47, 1, -1, new short[] {2093}),
/* NxS[2186] */ // Shortest string "\"/"
      new Table(14, 2, 2186, new short[] {99, 2187}),
/* NxS[2187] */ // Shortest string "\"\\"
      new Table(0, 1, 2186, new short[] {-1}),
/* NxS[2188] */ // Shortest string "^Fa"
      new Table(33, 72, -1, new short[] {130, 2196, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 142, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2189] */ // Shortest string "^Fo"
      new Table(63, 71, 130, new short[] {51, 129, 129, 129, 130, 130, 
          130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 
          129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, 
          -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          2190}),
/* NxS[2190] */ // Shortest string "^For"
      new Table(55, 69, 130, new short[] {2191, 130, 130, 130, 130, 130, 
          130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, 
          -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[2191] */ // Shortest string "^Forw"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 2192}),
/* NxS[2192] */ // Shortest string "^Forwa"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2193}),
/* NxS[2193] */ // Shortest string "^Forwar"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 2194}),
/* NxS[2194] */ // Shortest string "^Forward"
      new Table(64, 61, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 2195, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1089}),
/* NxS[2195] */ // Shortest string "^ForwardA"
      new Table(64, 65, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 485}),
/* NxS[2196] */ // Shortest string "^Fal"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 2197}),
/* NxS[2197] */ // Shortest string "^Fall"
      new Table(64, 61, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 2198}),
/* NxS[2198] */ // Shortest string "^FallB"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 2199}),
/* NxS[2199] */ // Shortest string "^FallBa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 2200, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2200] */ // Shortest string "^FallBac"
      new Table(64, 71, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          959}),
/* NxS[2201] */ // Shortest string "+0"
      new Table(64, 39, -1, new short[] {2201, 2201, 2201, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2201, 2201, 2201, 2201, 2201, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 2201, -1, -1, 2201, -1, -1, -1, 
          2202}),
/* NxS[2202] */ // Shortest string "0."
      new Table(64, 35, -1, new short[] {100, 100, 100, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 100, 100, 100, 100, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, -1, -1, 100}),
/* NxS[2203] */ // Shortest string "+2"
      new Table(52, 51, -1, new short[] {1509, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 2201, 2201, 2201, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 2201, 2201, 2201, 2201, 2201, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 2201, -1, -1, 2201, -1, -1, -1, 2202}),
/* NxS[2204] */ // Shortest string "^Em"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2240, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2205] */ // Shortest string "Ev"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 2209}),
/* NxS[2206] */ // Shortest string "^EN"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2207, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2207] */ // Shortest string "^END"
      new Table(64, 60, 130, new short[] {129, 129, 129, 2208, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[2208] */ // Shortest string "^ENDC"
      new Table(56, 68, 130, new short[] {959, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, 
          -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[2209] */ // Shortest string "Eva"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 2210}),
/* NxS[2210] */ // Shortest string "Eval"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 2211, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2211] */ // Shortest string "Evalu"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 2212}),
/* NxS[2212] */ // Shortest string "Evalua"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 2213}),
/* NxS[2213] */ // Shortest string "Evaluat"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 2214}),
/* NxS[2214] */ // Shortest string "Evaluate"
      new Table(64, 60, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 2215, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1}),
/* NxS[2215] */ // Shortest string "EvaluateA"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 2216}),
/* NxS[2216] */ // Shortest string "EvaluateAt"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 2217}),
/* NxS[2217] */ // Shortest string "EvaluateAtt"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2218}),
/* NxS[2218] */ // Shortest string "EvaluateAttr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2219, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2219] */ // Shortest string "EvaluateAttri"
      new Table(64, 69, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 2220}),
/* NxS[2220] */ // Shortest string "EvaluateAttrib"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 2221, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2221] */ // Shortest string "EvaluateAttribu"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 2222}),
/* NxS[2222] */ // Shortest string "EvaluateAttribut"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 2223}),
/* NxS[2223] */ // Shortest string "EvaluateAttribute"
      new Table(64, 66, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 2224, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 2225}),
/* NxS[2224] */ // Shortest string "EvaluateAttributeA"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 2230}),
/* NxS[2225] */ // Shortest string "EvaluateAttributeS"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 2226}),
/* NxS[2226] */ // Shortest string "EvaluateAttributeSn"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 2227}),
/* NxS[2227] */ // Shortest string "EvaluateAttributeSna"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2228, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2228] */ // Shortest string "EvaluateAttributeSnap"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2229, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2229] */ // Shortest string "EvaluateAttributeSnapp"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 419}),
/* NxS[2230] */ // Shortest string "EvaluateAttributeAt"
      new Table(64, 66, 130, new short[] {129, 129, 129, 2232, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 2231}),
/* NxS[2231] */ // Shortest string "EvaluateAttributeAtS"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 2238}),
/* NxS[2232] */ // Shortest string "EvaluateAttributeAtC"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 2233}),
/* NxS[2233] */ // Shortest string "EvaluateAttributeAtCe"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 2234}),
/* NxS[2234] */ // Shortest string "EvaluateAttributeAtCen"
      new Table(64, 67, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 2235}),
/* NxS[2235] */ // Shortest string "EvaluateAttributeAtCent"
      new Table(64, 70, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2236}),
/* NxS[2236] */ // Shortest string "EvaluateAttributeAtCentr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 2237, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2237] */ // Shortest string "EvaluateAttributeAtCentro"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 419, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2238] */ // Shortest string "EvaluateAttributeAtSa"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2239, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2239] */ // Shortest string "EvaluateAttributeAtSam"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 1296, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2240] */ // Shortest string "^Emi"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 2241, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2241] */ // Shortest string "^Emis"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 1365, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2242] */ // Shortest string "^Al"
      new Table(33, 72, -1, new short[] {130, 1096, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2247, 130, 130, 130, 130, 
          2248, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2243] */ // Shortest string "^Am"
      new Table(64, 69, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 130, 2244}),
/* NxS[2244] */ // Shortest string "^Amb"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 2245, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2245] */ // Shortest string "^Ambi"
      new Table(64, 63, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 2246}),
/* NxS[2246] */ // Shortest string "^Ambie"
      new Table(64, 64, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 139}),
/* NxS[2247] */ // Shortest string "^Alp"
      new Table(53, 71, 130, new short[] {2250, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, 
          -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1}),
/* NxS[2248] */ // Shortest string "^Alw"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 2249}),
/* NxS[2249] */ // Shortest string "^Alwa"
      new Table(57, 67, 130, new short[] {505, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 
          129, 130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[2250] */ // Shortest string "^Alph"
      new Table(64, 68, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 130, 130, 130, 130, 130, 130, 2251}),
/* NxS[2251] */ // Shortest string "^Alpha"
      new Table(62, 62, 130, new short[] {133, 130, 129, 129, 129, 130, 
          130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 
          129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, 
          -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[2252] */ // Shortest string "0x"
      new Table(33, 72, -1, new short[] {103, -1, 103, -1, 103, -1, 
          -1, 103, 103, -1, -1, -1, 103, 103, -1, -1, -1, -1, -1, 103, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 103, 103, 103, 103, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 103, 103, 103, 103, 103, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 103, -1, 103, 103, 103, -1, -1, -1, 
          -1, 103}),
/* NxS[2253] */ // Shortest string "Pr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 2254, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2254] */ // Shortest string "Pro"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 1017, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2255] */ // Shortest string "Gr"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 1094, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2256] */ // Shortest string "De"
      new Table(58, 66, 130, new short[] {1183, 130, 130, 130, 130, 130, 
          129, 129, 129, 130, 130, 130, 130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 129, 129, 129, 129, 129, 130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 
          130, 130, 129, 130, -1, -1, -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
/* NxS[2257] */ // Shortest string "co"
      new Table(33, 72, -1, new short[] {130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 1221, 130, 130, 1222, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 130, 130, 130, 130, 
          -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 130, 
          130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, -1, 
          130, 130}),
/* NxS[2258] */ // Shortest string "Al"
      new Table(64, 62, 130, new short[] {129, 129, 129, 130, 130, 130, 
          130, -1, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 
          130, 130, -1, 130, 130, -1, -1, -1, -1, 129, 130, 130, 129, 130, -1, -1, 
          -1, 130, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 130, 1096}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = MapC(code) - NxS[state].min;
            if (idx < 0) idx += 91;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '{white_space}',	Shortest string "^\t"
        case 108: // Recognized '{white_space}',	Shortest string "\t"
/* Ignore */
            break;
        case 2: // Recognized '.',	Shortest string "/"
        case 3: // Recognized '.',	Shortest string "\0"
        case 5: // Recognized '.',	Shortest string "x"
        case 6: // Recognized '.',	Shortest string "^A"
        case 8: // Recognized '.',	Shortest string "^E"
        case 9: // Recognized '.',	Shortest string "+"
        case 10: // Recognized '.',	Shortest string "."
        case 11: // Recognized '.',	Shortest string "^F"
        case 12: // Recognized '.',	Shortest string "\""
        case 13: // Recognized '.',	Shortest string "&"
        case 14: // Recognized '.',	Shortest string "|"
        case 15: // Recognized '.',	Shortest string "*"
        case 16: // Recognized '.',	Shortest string ";"
        case 17: // Recognized '.',	Shortest string "^B"
        case 18: // Recognized '.',	Shortest string "l"
        case 19: // Recognized '.',	Shortest string "e"
        case 20: // Recognized '.',	Shortest string "n"
        case 21: // Recognized '.',	Shortest string "d"
        case 22: // Recognized '.',	Shortest string "^S"
        case 23: // Recognized '.',	Shortest string "t"
        case 24: // Recognized '.',	Shortest string "a"
        case 25: // Recognized '.',	Shortest string "r"
        case 26: // Recognized '.',	Shortest string "f"
        case 27: // Recognized '.',	Shortest string "^c"
        case 28: // Recognized '.',	Shortest string "s"
        case 29: // Recognized '.',	Shortest string "m"
        case 30: // Recognized '.',	Shortest string "p"
        case 31: // Recognized '.',	Shortest string "i"
        case 32: // Recognized '.',	Shortest string "^D"
        case 33: // Recognized '.',	Shortest string "^V"
        case 34: // Recognized '.',	Shortest string "^G"
        case 35: // Recognized '.',	Shortest string "^P"
        case 36: // Recognized '.',	Shortest string "^R"
        case 37: // Recognized '.',	Shortest string "^T"
        case 38: // Recognized '.',	Shortest string "^C"
        case 39: // Recognized '.',	Shortest string "^U"
        case 40: // Recognized '.',	Shortest string "^M"
        case 41: // Recognized '.',	Shortest string ":"
        case 42: // Recognized '.',	Shortest string "^L"
        case 43: // Recognized '.',	Shortest string "^O"
        case 44: // Recognized '.',	Shortest string "^N"
        case 45: // Recognized '.',	Shortest string "^W"
        case 46: // Recognized '.',	Shortest string "I"
        case 47: // Recognized '.',	Shortest string "^Z"
        case 48: // Recognized '.',	Shortest string "^#"
        case 109: // Recognized '.',	Shortest string "A"
        case 110: // Recognized '.',	Shortest string "E"
        case 111: // Recognized '.',	Shortest string "c"
        case 112: // Recognized '.',	Shortest string "D"
        case 113: // Recognized '.',	Shortest string "G"
        case 114: // Recognized '.',	Shortest string "P"
        case 115: // Recognized '.',	Shortest string "U"
return (int)ShaderlabToken.UNDEFINED;
            break;
        case 4: // Recognized '{digit}+',	Shortest string "0"
        case 7: // Recognized '{digit}+',	Shortest string "9"
return (int)ShaderlabToken.NUMBER;
            break;
        case 49: // Recognized '^{white_space}*{blank}*{unityKeywordsWithPara}{blank}*{white_space}+{words}',	Shortest string "^#pragma\t"
        case 50: // Recognized '^{white_space}*{blank}*{unityKeywordsWithPara}{blank}*{white_space}+{words}',	Shortest string "^#pragma\t/"
return (int)ShaderlabToken.UNITYNONBLOCKKEYWORD;
            break;
        case 51: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^Add"
        case 52: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^Add\t"
        case 53: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^Add\x20"
        case 54: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^Add;"
        case 63: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^One"
        case 64: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^LogicalOr"
        case 65: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^LogicalCopy"
        case 70: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^Color"
        case 71: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^Vertex"
        case 72: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^VertexLM"
        case 73: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^Sub"
        case 76: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^Bind"
        case 87: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\tOne"
        case 88: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\tLogicalOr"
        case 89: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\tLogicalCopy"
        case 90: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\tColor"
        case 91: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\tRange"
        case 92: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\tVertex"
        case 93: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\tVertexLM"
        case 94: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\tSub"
        case 95: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\tBind"
        case 96: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\tBlend"
        case 97: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\t\tColor"
        case 98: // Recognized '^{white_space}*{blank}*{unityNonBlockKeywords}{blank}*({white_space}*|\{|\,|\;)',	Shortest string "^\t\tVertex"
return (int)ShaderlabToken.UNITYNONBLOCKKEYWORD;
            break;
        case 55: // Recognized '{alpha}+{digit}+{keyword}',	Shortest string "x0Texture1D"
        case 56: // Recognized '{alpha}+{digit}+{keyword}',	Shortest string "x0do"
        case 57: // Recognized '{alpha}+{digit}+{keyword}',	Shortest string "x0Texture2D"
        case 58: // Recognized '{alpha}+{digit}+{keyword}',	Shortest string "x0in"
        case 59: // Recognized '{alpha}+{digit}+{keyword}',	Shortest string "x0technique"
        case 60: // Recognized '{alpha}+{digit}+{keyword}',	Shortest string "x0Sampler"
        case 61: // Recognized '{alpha}+{digit}+{keyword}',	Shortest string "x0Stateblock"
return (int)ShaderlabToken.TEXT;
            break;
        case 62: // Recognized '{function}{blank}*\(',	Shortest string "log("
return (int)ShaderlabToken.FUNCTION;
            break;
        case 66: // Recognized ':({blank})*{keywordsSpeical}({white_space}|;)',	Shortest string ":FOG\t"
return (int)ShaderlabToken.KEYWORDSPECIAL;
            break;
        case 67: // Recognized '^{white_space}*{blank}*{unityBlockKeywords}{blank}*({white_space}|\{)',	Shortest string "^Pass\t"
        case 68: // Recognized '^{white_space}*{blank}*{unityBlockKeywords}{blank}*({white_space}|\{)',	Shortest string "^Pass\x20"
return (int)ShaderlabToken.UNITYBLOCKKEYWORD;
            break;
        case 69: // Recognized '{unityFunction}{blank}*\(',	Shortest string "UnpackNormal("
return (int)ShaderlabToken.UNITYFUNCTION;
            break;
        case 74: // Recognized '{exponent}?{digit}+',	Shortest string "E+00"
        case 75: // Recognized '{exponent}?{digit}+',	Shortest string "E00"
return (int)ShaderlabToken.NUMBER;
            break;
        case 77: // Recognized '({white_space}|{blank}|{symbol}){datatype}({white_space}+|\()',	Shortest string "/int\t"
        case 78: // Recognized '({white_space}|{blank}|{symbol}){datatype}({white_space}+|\()',	Shortest string "/int("
return (int)ShaderlabToken.DATATYPE;
            break;
        case 79: // Recognized '({white_space}|{blank}|{symbol}){unityDataType}({white_space}+|\(|\))',	Shortest string "/2D\t"
        case 80: // Recognized '({white_space}|{blank}|{symbol}){unityDataType}({white_space}+|\(|\))',	Shortest string "/2D("
return (int)ShaderlabToken.DATATYPE;
            break;
        case 81: // Recognized '({white_space}|{blank}|{symbol}){keyword}{blank}*({white_space}|{symbol})',	Shortest string "/do."
        case 82: // Recognized '({white_space}|{blank}|{symbol}){keyword}{blank}*({white_space}|{symbol})',	Shortest string "/do\x20"
        case 83: // Recognized '({white_space}|{blank}|{symbol}){keyword}{blank}*({white_space}|{symbol})',	Shortest string "/do&"
        case 84: // Recognized '({white_space}|{blank}|{symbol}){keyword}{blank}*({white_space}|{symbol})',	Shortest string "/do/"
        case 85: // Recognized '({white_space}|{blank}|{symbol}){keyword}{blank}*({white_space}|{symbol})',	Shortest string "/Buffer\t"
        case 86: // Recognized '({white_space}|{blank}|{symbol}){keyword}{blank}*({white_space}|{symbol})',	Shortest string "/Buffer\x20"
return (int)ShaderlabToken.KEYWORD;
            break;
        case 99: // Recognized '\"(\\.|[^\\"])*\"',	Shortest string "\"\""
return (int)ShaderlabToken.STRING_LITERAL;
            break;
        case 100: // Recognized '{float1}',	Shortest string ".0"
        case 101: // Recognized '{float1}',	Shortest string ".2"
        case 102: // Recognized '{float1}',	Shortest string ".0H"
return (int)ShaderlabToken.FLOAT;
            break;
        case 103: // Recognized '"0x"{hexdigit}+',	Shortest string "0x0"
return (int)ShaderlabToken.NUMBER;
            break;
        case 104: // Recognized '"//"(.)*',	Shortest string "//"
return (int)ShaderlabToken.COMMENT_LINE;
            break;
        case 105: // Recognized '{CmntStart}{words}\**',	Shortest string "/*"
        case 106: // Recognized '{CmntStart}{words}\**',	Shortest string "/**"
BEGIN(COMMENT); return (int)ShaderlabToken.COMMENT;
            break;
        case 107: // Recognized '{CmntStart}{words}\**{CmntEnd}',	Shortest string "/**/"
return (int)ShaderlabToken.COMMENT;
            break;
        case 116: // In <COMMENT> Recognized '{words}\**',	Shortest string ""
        case 117: // In <COMMENT> Recognized '\n',	Shortest string ""
        case 118: // In <COMMENT> Recognized '{words}\**',	Shortest string "/"
        case 119: // In <COMMENT> Recognized '{words}\**',	Shortest string "*"
return (int)ShaderlabToken.COMMENT;
            break;
        case 120: // In <COMMENT> Recognized '{words}\**{CmntEnd}',	Shortest string "*/"
BEGIN(INITIAL); return (int)ShaderlabToken.COMMENT;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner

// ==============================================================
// <auto-generated>
// This code automatically produced from an embedded resource.
// Do not edit this file, or it will become incompatible with 
// the specification from which it was generated.
// </auto-generated>
// ==============================================================

// Code copied from GPLEX embedded resource
    [Serializable]
    public class BufferException : Exception
    {
        public BufferException() { }
        public BufferException(string message) : base(message) { }
        public BufferException(string message, Exception innerException)
            : base(message, innerException) { }
        protected BufferException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }

    public abstract class ScanBuff
    {
        private string fileNm;

        public const int EndOfFile = -1;
        public const int UnicodeReplacementChar = 0xFFFD;

        public bool IsFile { get { return (fileNm != null); } }
        public string FileName { get { return fileNm; } set { fileNm = value; } }

        public abstract int Pos { get; set; }
        public abstract int Read();
        public virtual void Mark() { }

        public abstract string GetString(int begin, int limit);

        public static ScanBuff GetBuffer(string source)
        {
            return new StringBuffer(source);
        }

        public static ScanBuff GetBuffer(IList<string> source)
        {
            return new LineBuffer(source);
        }

#if (!NOFILES)
        public static ScanBuff GetBuffer(Stream source)
        {
            return new BuildBuffer(source);
        }

#if (!BYTEMODE)
        public static ScanBuff GetBuffer(Stream source, int fallbackCodePage)
        {
            return new BuildBuffer(source, fallbackCodePage);
        }
#endif // !BYTEMODE
#endif // !NOFILES
    }

    #region Buffer classes

    // ==============================================================
    // =====  Definitions for various ScanBuff derived classes   ====
    // ==============================================================
    // ===============         String input          ================
    // ==============================================================

    /// <summary>
    /// This class reads characters from a single string as
    /// required, for example, by Visual Studio language services
    /// </summary>
    sealed class StringBuffer : ScanBuff
    {
        string str;        // input buffer
        int bPos;          // current position in buffer
        int sLen;

        public StringBuffer(string source)
        {
            this.str = source;
            this.sLen = source.Length;
            this.FileName = null;
        }

        public override int Read()
        {
            if (bPos < sLen) return str[bPos++];
            else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see new line
            else { bPos++; return EndOfFile; }                // two strikes and you're out!
        }

        public override string GetString(int begin, int limit)
        {
            //  "limit" can be greater than sLen with the BABEL
            //  option set.  Read returns a "virtual" EOL if
            //  an attempt is made to read past the end of the
            //  string buffer.  Without the guard any attempt 
            //  to fetch yytext for a token that includes the 
            //  EOL will throw an index exception.
            if (limit > sLen) limit = sLen;
            if (limit <= begin) return "";
            else return str.Substring(begin, limit - begin);
        }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }

        public override string ToString() { return "StringBuffer"; }
    }

    // ==============================================================
    //  The LineBuff class contributed by Nigel Horspool, 
    //  nigelh@cs.uvic.cs
    // ==============================================================

    sealed class LineBuffer : ScanBuff
    {
        IList<string> line;    // list of source lines from a file
        int numLines;          // number of strings in line list
        string curLine;        // current line in that list
        int cLine;             // index of current line in the list
        int curLen;            // length of current line
        int curLineStart;      // position of line start in whole file
        int curLineEnd;        // position of line end in whole file
        int maxPos;            // max position ever visited in whole file
        int cPos;              // ordinal number of code in source

        // Constructed from a list of strings, one per source line.
        // The lines have had trailing '\n' characters removed.
        public LineBuffer(IList<string> lineList)
        {
            line = lineList;
            numLines = line.Count;
            cPos = curLineStart = 0;
            curLine = (numLines > 0 ? line[0] : "");
            maxPos = curLineEnd = curLen = curLine.Length;
            cLine = 1;
            FileName = null;
        }

        public override int Read()
        {
            if (cPos < curLineEnd)
                return curLine[cPos++ - curLineStart];
            if (cPos++ == curLineEnd)
                return '\n';
            if (cLine >= numLines)
                return EndOfFile;
            curLine = line[cLine];
            curLen = curLine.Length;
            curLineStart = curLineEnd + 1;
            curLineEnd = curLineStart + curLen;
            if (curLineEnd > maxPos)
                maxPos = curLineEnd;
            cLine++;
            return curLen > 0 ? curLine[0] : '\n';
        }

        // To speed up searches for the line containing a position
        private int cachedPosition;
        private int cachedIxdex;
        private int cachedLineStart;

        // Given a position pos within the entire source, the results are
        //   ix     -- the index of the containing line
        //   lstart -- the position of the first character on that line
        private void findIndex(int pos, out int ix, out int lstart)
        {
            if (pos >= cachedPosition)
            {
                ix = cachedIxdex; lstart = cachedLineStart;
            }
            else
            {
                ix = lstart = 0;
            }
            while (ix < numLines)
            {
                int len = line[ix].Length + 1;
                if (pos < lstart + len) break;
                lstart += len;
                ix++;
            }
            cachedPosition = pos;
            cachedIxdex = ix;
            cachedLineStart = lstart;
        }

        public override string GetString(int begin, int limit)
        {
            if (begin >= maxPos || limit <= begin) return "";
            int endIx, begIx, endLineStart, begLineStart;
            findIndex(begin, out begIx, out begLineStart);
            int begCol = begin - begLineStart;
            findIndex(limit, out endIx, out endLineStart);
            int endCol = limit - endLineStart;
            string s = line[begIx];
            if (begIx == endIx)
            {
                // the usual case, substring all on one line
                return (endCol <= s.Length) ?
                    s.Substring(begCol, endCol - begCol)
                    : s.Substring(begCol) + "\n";
            }
            // the string spans multiple lines, yuk!
            StringBuilder sb = new StringBuilder();
            if (begCol < s.Length)
                sb.Append(s.Substring(begCol));
            for (; ; )
            {
                sb.Append("\n");
                s = line[++begIx];
                if (begIx >= endIx) break;
                sb.Append(s);
            }
            if (endCol <= s.Length)
            {
                sb.Append(s.Substring(0, endCol));
            }
            else
            {
                sb.Append(s);
                sb.Append("\n");
            }
            return sb.ToString();
        }

        public override int Pos
        {
            get { return cPos; }
            set
            {
                cPos = value;
                findIndex(cPos, out cLine, out curLineStart);
                // cLine should be the *next* line after curLine.
                curLine = (cLine < numLines ? line[cLine++] : "");
                curLineEnd = curLineStart + curLine.Length;
            }
        }

        public override string ToString() { return "LineBuffer"; }
    }

#if (!NOFILES)
    // ==============================================================
    // =====     class BuildBuff : for unicode text files    ========
    // ==============================================================

    class BuildBuffer : ScanBuff
    {
        // Double buffer for char stream.
        class BufferElement
        {
            StringBuilder bldr = new StringBuilder();
            StringBuilder next = new StringBuilder();
            int minIx;
            int maxIx;
            int brkIx;
            bool appendToNext;

            internal BufferElement() { }

            internal int MaxIndex { get { return maxIx; } }
            // internal int MinIndex { get { return minIx; } }

            internal char this[int index]
            {
                get
                {
                    if (index < minIx || index >= maxIx)
                        throw new BufferException("Index was outside data buffer");
                    else if (index < brkIx)
                        return bldr[index - minIx];
                    else
                        return next[index - brkIx];
                }
            }

            internal void Append(char[] block, int count)
            {
                maxIx += count;
                if (appendToNext)
                    this.next.Append(block, 0, count);
                else
                {
                    this.bldr.Append(block, 0, count);
                    brkIx = maxIx;
                    appendToNext = true;
                }
            }

            internal string GetString(int start, int limit)
            {
                if (limit <= start)
                    return "";
                if (start >= minIx && limit <= maxIx)
                    if (limit < brkIx) // String entirely in bldr builder
                        return bldr.ToString(start - minIx, limit - start);
                    else if (start >= brkIx) // String entirely in next builder
                        return next.ToString(start - brkIx, limit - start);
                    else // Must do a string-concatenation
                        return
                            bldr.ToString(start - minIx, brkIx - start) +
                            next.ToString(0, limit - brkIx);
                else
                    throw new BufferException("String was outside data buffer");
            }

            internal void Mark(int limit)
            {
                if (limit > brkIx + 16) // Rotate blocks
                {
                    StringBuilder temp = bldr;
                    bldr = next;
                    next = temp;
                    next.Length = 0;
                    minIx = brkIx;
                    brkIx = maxIx;
                }
            }
        }

        BufferElement data = new BufferElement();

        int bPos;            // Postion index in the StringBuilder
        BlockReader NextBlk; // Delegate that serves char-arrays;

        private string EncodingName
        {
            get
            {
                StreamReader rdr = NextBlk.Target as StreamReader;
                return (rdr == null ? "raw-bytes" : rdr.CurrentEncoding.BodyName);
            }
        }

        public BuildBuffer(Stream stream)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Raw(stream);
        }

#if (!BYTEMODE)
        public BuildBuffer(Stream stream, int fallbackCodePage)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Get(stream, fallbackCodePage);
        }
#endif

        /// <summary>
        /// Marks a conservative lower bound for the buffer,
        /// allowing space to be reclaimed.  If an application 
        /// needs to call GetString at arbitrary past locations 
        /// in the input stream, Mark() is not called.
        /// </summary>
        public override void Mark() { data.Mark(bPos - 2); }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }


        /// <summary>
        /// Read returns the ordinal number of the next char, or 
        /// EOF (-1) for an end of stream.  Note that the next
        /// code point may require *two* calls of Read().
        /// </summary>
        /// <returns></returns>
        public override int Read()
        {
            //
            //  Characters at positions 
            //  [data.offset, data.offset + data.bldr.Length)
            //  are available in data.bldr.
            //
            if (bPos < data.MaxIndex)
            {
                // ch0 cannot be EOF
                return (int)data[bPos++];
            }
            else // Read from underlying stream
            {
                // Experimental code, blocks of page size
                char[] chrs = new char[4096];
                int count = NextBlk(chrs, 0, 4096);
                if (count == 0)
                    return EndOfFile;
                else
                {
                    data.Append(chrs, count);
                    return (int)data[bPos++];
                }
            }
        }

        public override string GetString(int begin, int limit)
        {
            return data.GetString(begin, limit);
        }

        public override string ToString()
        {
            return "StringBuilder buffer, encoding: " + this.EncodingName;
        }
    }

    // =============== End ScanBuff-derived classes ==================

    public delegate int BlockReader(char[] block, int index, int number);

    // A delegate factory, serving up a delegate that
    // reads a block of characters from the underlying
    // encoded stream, via a StreamReader object.
    //
    public static class BlockReaderFactory
    {
        public static BlockReader Raw(Stream stream)
        {
            return delegate(char[] block, int index, int number)
            {
                byte[] b = new byte[number];
                int count = stream.Read(b, 0, number);
                int i = 0;
                int j = index;
                for (; i < count; i++, j++)
                    block[j] = (char)b[i];
                return count;
            };
        }

#if (!BYTEMODE)
        public static BlockReader Get(Stream stream, int fallbackCodePage)
        {
            Encoding encoding;
            int preamble = Preamble(stream);

            if (preamble != 0)  // There is a valid BOM here!
                encoding = Encoding.GetEncoding(preamble);
            else if (fallbackCodePage == -1) // Fallback is "raw" bytes
                return Raw(stream);
            else if (fallbackCodePage != -2) // Anything but "guess"
                encoding = Encoding.GetEncoding(fallbackCodePage);
            else // This is the "guess" option
            {
                int guess = new Guesser(stream).GuessCodePage();
                stream.Seek(0, SeekOrigin.Begin);
                if (guess == -1) // ==> this is a 7-bit file
                    encoding = Encoding.ASCII;
                else if (guess == 65001)
                    encoding = Encoding.UTF8;
                else             // ==> use the machine default
                    encoding = Encoding.Default;
            }
            StreamReader reader = new StreamReader(stream, encoding);
            return reader.Read;
        }

        static int Preamble(Stream stream)
        {
            int b0 = stream.ReadByte();
            int b1 = stream.ReadByte();

            if (b0 == 0xfe && b1 == 0xff)
                return 1201; // UTF16BE
            if (b0 == 0xff && b1 == 0xfe)
                return 1200; // UTF16LE

            int b2 = stream.ReadByte();
            if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                return 65001; // UTF8
            //
            // There is no unicode preamble, so we
            // return denoter for the machine default.
            //
            stream.Seek(0, SeekOrigin.Begin);
            return 0;
        }
#endif // !BYTEMODE
    }
#endif // !NOFILES
    #endregion Buffer classes

    // ==============================================================
    // ============      class CodePageHandling         =============
    // ==============================================================
#if (!NOFILES)
    public static class CodePageHandling
    {
        public static int GetCodePage(string option)
        {
            string command = option.ToUpperInvariant();
            if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
                command = command.Substring(9);
            try
            {
                if (command.Equals("RAW"))
                    return -1;
                else if (command.Equals("GUESS"))
                    return -2;
                else if (command.Equals("DEFAULT"))
                    return 0;
                else if (char.IsDigit(command[0]))
                    return int.Parse(command, CultureInfo.InvariantCulture);
                else
                {
                    Encoding enc = Encoding.GetEncoding(command);
                    return enc.CodePage;
                }
            }
            catch (FormatException)
            {
                Console.Error.WriteLine(
                    "Invalid format \"{0}\", using machine default", option);
            }
            catch (ArgumentException)
            {
                Console.Error.WriteLine(
                    "Unknown code page \"{0}\", using machine default", option);
            }
            return 0;
        }
    }
#region guesser
#if (!BYTEMODE)
    // ==============================================================
    // ============          Encoding Guesser           =============
    // ==============================================================

    /// <summary>
    /// This class provides a simple finite state automaton that
    /// scans the file looking for (1) valid UTF-8 byte patterns,
    /// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
    /// The method then guesses whether it is UTF-8 or maybe some 
    /// local machine default encoding.  This works well for the
    /// various Latin encodings.
    /// </summary>
    internal class Guesser
    {
        ScanBuff buffer;

        public int GuessCodePage() { return Scan(); }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int EndToken = 0;

        #region user code
        /* 
         *  Reads the bytes of a file to determine if it is 
         *  UTF-8 or a single-byte code page file.
         */
        public long utfX;
        public long uppr;
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;

        #region ScannerTables
        static int[] startState = new int[] { 11, 0 };

        #region CharacterMap
        static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
        #endregion

        static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };


        [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        // Reason for suppression: cannot have self-reference in array initializer.
        static Guesser()
        {
            nextState[7] = nextState[2];
            nextState[9] = nextState[2];
            nextState[10] = nextState[2];
        }

        int NextState()
        {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                return nextState[state][map[code]];
        }
        #endregion

        public Guesser(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source)
        {
            this.buffer = new BuildBuffer(source);
            code = buffer.Read();
        }

        int Scan()
        {
            for (; ; )
            {
                int next;
                state = currentStart;
                while ((next = NextState()) == goStart)
                    code = buffer.Read();

                state = next;
                code = buffer.Read();

                while ((next = NextState()) > eofNum)
                {
                    state = next;
                    code = buffer.Read();
                }
                if (state <= maxAccept)
                {
                    #region ActionSwitch
#pragma warning disable 162
                    switch (state)
                    {
                        case eofNum:
                            switch (currentStart)
                            {
                                case 11:
                                    if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                                    else if (uppr * 10 > utfX) return 0;   /* default code page */
                                    else return 65001;                     /* UTF-8 encoding */
                                    break;
                            }
                            return EndToken;
                        case 1: // Recognized '{Upper128}',	Shortest string "\xC0"
                        case 2: // Recognized '{Upper128}',	Shortest string "\x80"
                        case 3: // Recognized '{Upper128}',	Shortest string "\xE0"
                        case 4: // Recognized '{Upper128}',	Shortest string "\xF0"
                            uppr++;
                            break;
                        case 5: // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                            uppr += 2;
                            break;
                        case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                            uppr += 3;
                            break;
                        case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                            utfX += 3;
                            break;
                        case 8: // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                            uppr += 2;
                            break;
                        case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                            utfX += 2;
                            break;
                        case 10: // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                            utfX++;
                            break;
                        default:
                            break;
                    }
#pragma warning restore 162
                    #endregion
                }
            }
        }
    } // end class Guesser
    
#endif // !BYTEMODE
#endregion
#endif // !NOFILES

// End of code copied from embedded resource

} // end namespace
