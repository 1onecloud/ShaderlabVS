//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  ROCKYWIN8
//  DateTime: 2014/8/27 23:50:39
//  UserName: Rocky
//  GPLEX input file <Shaderlab.lex - 2014/8/27 23:49:54>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, noParser, noFiles, minimize
//  Option settings: classes, compressMap, compressNext, embedbuffers
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STANDALONE
#define NOFILES
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;


namespace ShaderlabVS.Lexer
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 30;
        const int initial = 31;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int COMMENT = 1;

#region user code
/**********************************************************************************/
/********************************User Defined Code*********************************/
/**********************************************************************************/
public int NextToken() { return yylex(); }
     public int GetPos() { return yypos; }
     public int GetLength() { return yyleng; }

	 public void PushbackText(int length) { yyless(length); }
/********************************Rules Section*********************************/
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {31, 26, 0};

#region CompressedCharacterMap
    //
    // There are 90 equivalence classes
    // There are 2 character sequence regions
    // There are 1 tables, 126 entries
    // There are 1 runs, 0 singletons
    // Decision tree depth is 1
    //
    static sbyte[] mapC0 = new sbyte[126] {
/*     '\0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 6, 6, 6, 2, 2, 
/*   '\x10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x20' */ 68, 14, 4, 87, 2, 9, 18, 2, 21, 22, 3, 7, 16, 8, 17, 1, 
/*      '0' */ 64, 57, 58, 59, 80, 81, 82, 83, 84, 85, 67, 15, 11, 13, 12, 2, 
/*      '@' */ 2, 65, 25, 60, 44, 62, 76, 49, 70, 74, 2, 75, 69, 66, 72, 71, 
/*      'P' */ 52, 89, 53, 30, 55, 61, 46, 73, 78, 79, 77, 23, 5, 24, 2, 86, 
/*      '`' */ 2, 32, 33, 38, 29, 27, 37, 56, 45, 43, 88, 35, 26, 41, 28, 40, 
/*      'p' */ 42, 63, 34, 39, 31, 36, 51, 47, 48, 50, 54, 19, 10, 20 };

    static sbyte MapC(int code)
    { // '\0' <= code <= '\U0010FFFF'
      if (code < 126) // '\0' <= code <= '}'
        return mapC0[code - 0];
      else // '~' <= code <= '\U0010FFFF'
        return (sbyte)2;
    }
#endregion

    static Table[] NxS = new Table[1545] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "\t"
      new Table(25, 63, -1, new short[] {490, 491, 492, 493, 494, 495, 
          496, 497, 498, 499, -1, 500, 501, 502, 503, 1151, 504, 505, 506, 507, 508, 509, 
          510, -1, 511, -1, 512, 513, 514, -1, 515, -1, -1, 516, -1, 517, 518, 519, 
          -1, -1, 520, 521, -1, -1, 522, -1, 523, 524, 525, 526, -1, 527, 528, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 529}),
/* NxS[   2] */ new Table(0, 0, -1, null), // Shortest string ":FOG\t"
/* NxS[   3] */ new Table(0, 0, -1, null), // Shortest string "Shader/"
/* NxS[   4] */ // Shortest string "Shader\x20"
      new Table(68, 47, -1, new short[] {4, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          3, 3, -1, 3, -1, -1, 3, 3, 3, 3, 489, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3}),
/* NxS[   5] */ new Table(0, 0, -1, null), // Shortest string "/#pragma\t"
/* NxS[   6] */ // Shortest string "/#pragma\x20"
      new Table(68, 29, 536, new short[] {6, 536, 536, 536, 536, 536, 
          536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 
          5, 536, 536, -1, 536, 536, 6}),
/* NxS[   7] */ new Table(0, 0, -1, null), // Shortest string "/Sub/"
/* NxS[   8] */ // Shortest string "/Sub\x20"
      new Table(68, 47, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7}),
/* NxS[   9] */ new Table(0, 0, -1, null), // Shortest string "/Pass/"
/* NxS[  10] */ // Shortest string "/Pass\x20"
      new Table(68, 47, -1, new short[] {10, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          9, 9, -1, 9, -1, -1, 9, 9, 9, 9, 569, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9}),
/* NxS[  11] */ // Shortest string "/2D\t"
      new Table(68, 29, -1, new short[] {11, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          11, -1, -1, -1, -1, -1, 11}),
/* NxS[  12] */ new Table(0, 0, -1, null), // Shortest string "/2D("
/* NxS[  13] */ // Shortest string "/int\t"
      new Table(68, 29, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          13, -1, -1, -1, -1, -1, 13}),
/* NxS[  14] */ new Table(0, 0, -1, null), // Shortest string "/int("
/* NxS[  15] */ new Table(0, 0, -1, null), // Shortest string "/log("
/* NxS[  16] */ new Table(0, 0, -1, null), // Shortest string "/UnpackNormal("
/* NxS[  17] */ new Table(0, 0, -1, null), // Shortest string "/do/"
/* NxS[  18] */ // Shortest string "/Buffer\t"
      new Table(68, 29, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          13, -1, -1, -1, -1, -1, 13}),
/* NxS[  19] */ // Shortest string "/Range("
      new Table(57, 51, -1, new short[] {930, 930, 930, -1, -1, -1, 
          -1, 930, -1, -1, -1, 931, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 930, 930, 930, 930, 930, 930, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 929, 929, -1, -1, -1, -1, -1, -1, -1, -1, 933}),
/* NxS[  20] */ // Shortest string "/Range\x20"
      new Table(68, 47, -1, new short[] {20, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 19, 7, 7, 7}),
/* NxS[  21] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  22] */ // Shortest string "//"
      new Table(0, 1, 22, new short[] {-1}),
/* NxS[  23] */ // Shortest string "/*"
      new Table(0, 4, 23, new short[] {-1, 23, 23, 24}),
/* NxS[  24] */ // Shortest string "/**"
      new Table(1, 3, -1, new short[] {25, -1, 24}),
/* NxS[  25] */ new Table(0, 0, -1, null), // Shortest string "/**/"
/* NxS[  26] */ // Shortest string ""
      new Table(0, 4, 28, new short[] {27, 28, 28, 29}),
/* NxS[  27] */ new Table(0, 0, -1, null), // Shortest string ""
/* NxS[  28] */ // Shortest string "/"
      new Table(0, 4, 28, new short[] {-1, 28, 28, 29}),
/* NxS[  29] */ // Shortest string "*"
      new Table(1, 3, -1, new short[] {30, -1, 29}),
/* NxS[  30] */ new Table(0, 0, -1, null), // Shortest string "*/"
/* NxS[  31] */ // Shortest string ""
      new Table(67, 54, -1, new short[] {37, 1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 1, 32, -1, 33, 34, -1, 1, 33, 33, 33, 35, 33, 33, 33, 33, 
          33, 33, 33, 33, 33, 33, 33, 33, 33, 33, -1, -1, -1, -1, -1, 36}),
/* NxS[  32] */ // Shortest string "/"
      new Table(25, 69, -1, new short[] {490, 491, 492, 493, 494, 495, 
          496, 497, 498, 499, -1, 500, 501, 502, 503, 1151, 504, 505, 506, 507, 508, 509, 
          510, -1, 511, -1, 512, 513, 514, -1, 515, -1, -1, 516, -1, 517, 518, 519, 
          -1, -1, 520, 521, -1, -1, 522, -1, 523, 524, 525, 526, -1, 527, 528, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 529, -1, -1, -1, 22, -1, 23}),
/* NxS[  33] */ // Shortest string "*"
      new Table(25, 63, -1, new short[] {490, 491, 492, 493, 494, 495, 
          496, 497, 498, 499, -1, 500, 501, 502, 503, 1151, 504, 505, 506, 507, 508, 509, 
          510, -1, 511, -1, 512, 513, 514, -1, 515, -1, -1, 516, -1, 517, 518, 519, 
          -1, -1, 520, 521, -1, -1, 522, -1, 523, 524, 525, 526, -1, 527, 528, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 529}),
/* NxS[  34] */ // Shortest string "\""
      new Table(4, 2, 34, new short[] {21, 1544}),
/* NxS[  35] */ // Shortest string "|"
      new Table(10, 1, -1, new short[] {33}),
/* NxS[  36] */ // Shortest string "S"
      new Table(45, 1, -1, new short[] {484}),
/* NxS[  37] */ // Shortest string ":"
      new Table(25, 53, -1, new short[] {38, -1, -1, -1, -1, 39, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, 41, 
          -1, -1, -1, -1, -1, 42, 43, -1, 44, -1, -1, -1, -1, 45, -1, -1, 
          -1, -1, 46, 47, -1, 37, -1, -1, -1, 48, -1, -1, -1, 49, 50}),
/* NxS[  38] */ // Shortest string ":B"
      new Table(65, 10, -1, new short[] {457, -1, -1, -1, 458, -1, 
          459, -1, -1, 460}),
/* NxS[  39] */ // Shortest string ":S"
      new Table(46, 24, -1, new short[] {271, -1, -1, -1, -1, -1, 
          272, 273, -1, 274, -1, -1, -1, -1, 275, -1, -1, -1, -1, -1, -1, -1, 
          -1, 276}),
/* NxS[  40] */ // Shortest string ":D"
      new Table(62, 13, -1, new short[] {244, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 245}),
/* NxS[  41] */ // Shortest string ":V"
      new Table(52, 25, -1, new short[] {241, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 242}),
/* NxS[  42] */ // Shortest string ":P"
      new Table(30, 42, -1, new short[] {232, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 233}),
/* NxS[  43] */ // Shortest string ":R"
      new Table(62, 1, -1, new short[] {210}),
/* NxS[  44] */ // Shortest string ":T"
      new Table(62, 4, -1, new short[] {190, -1, -1, 191}),
/* NxS[  45] */ // Shortest string ":C"
      new Table(61, 11, -1, new short[] {174, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 175}),
/* NxS[  46] */ // Shortest string ":A"
      new Table(44, 29, -1, new short[] {144, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 145, -1, -1, 146}),
/* NxS[  47] */ // Shortest string ":M"
      new Table(61, 14, -1, new short[] {114, -1, -1, -1, 115, -1, 
          -1, -1, -1, -1, -1, -1, -1, 116}),
/* NxS[  48] */ // Shortest string ":N"
      new Table(71, 1, -1, new short[] {108}),
/* NxS[  49] */ // Shortest string ":F"
      new Table(53, 22, -1, new short[] {61, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, 63}),
/* NxS[  50] */ // Shortest string ":Z"
      new Table(60, 1, -1, new short[] {51}),
/* NxS[  51] */ // Shortest string ":ZC"
      new Table(69, 1, -1, new short[] {52}),
/* NxS[  52] */ // Shortest string ":ZCL"
      new Table(74, 1, -1, new short[] {53}),
/* NxS[  53] */ // Shortest string ":ZCLI"
      new Table(52, 1, -1, new short[] {54}),
/* NxS[  54] */ // Shortest string ":ZCLIP"
      new Table(62, 1, -1, new short[] {55}),
/* NxS[  55] */ // Shortest string ":BLENDE"
      new Table(72, 1, -1, new short[] {56}),
/* NxS[  56] */ // Shortest string ":BLENDEN"
      new Table(65, 1, -1, new short[] {57}),
/* NxS[  57] */ // Shortest string ":BLENDENA"
      new Table(25, 1, -1, new short[] {58}),
/* NxS[  58] */ // Shortest string ":BLENDENAB"
      new Table(69, 1, -1, new short[] {59}),
/* NxS[  59] */ // Shortest string ":VFAC"
      new Table(62, 1, -1, new short[] {60}),
/* NxS[  60] */ // Shortest string ":FOG"
      new Table(68, 38, -1, new short[] {2, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          2, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2}),
/* NxS[  61] */ // Shortest string ":FR"
      new Table(71, 1, -1, new short[] {70}),
/* NxS[  62] */ // Shortest string ":FO"
      new Table(49, 1, -1, new short[] {60}),
/* NxS[  63] */ // Shortest string ":FI"
      new Table(69, 1, -1, new short[] {64}),
/* NxS[  64] */ // Shortest string ":FIL"
      new Table(55, 15, -1, new short[] {65, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 66}),
/* NxS[  65] */ // Shortest string ":FILT"
      new Table(62, 1, -1, new short[] {69}),
/* NxS[  66] */ // Shortest string ":CULL"
      new Table(66, 1, -1, new short[] {67}),
/* NxS[  67] */ // Shortest string ":CULLM"
      new Table(71, 1, -1, new short[] {68}),
/* NxS[  68] */ // Shortest string ":CULLMO"
      new Table(44, 1, -1, new short[] {59}),
/* NxS[  69] */ // Shortest string ":FILTE"
      new Table(53, 1, -1, new short[] {60}),
/* NxS[  70] */ // Shortest string ":FRO"
      new Table(72, 1, -1, new short[] {71}),
/* NxS[  71] */ // Shortest string ":FRON"
      new Table(55, 1, -1, new short[] {72}),
/* NxS[  72] */ // Shortest string ":FRONT"
      new Table(60, 17, -1, new short[] {73, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74}),
/* NxS[  73] */ // Shortest string ":FRONTC"
      new Table(71, 1, -1, new short[] {95}),
/* NxS[  74] */ // Shortest string ":BACKF"
      new Table(65, 1, -1, new short[] {75}),
/* NxS[  75] */ // Shortest string ":BACKFA"
      new Table(60, 1, -1, new short[] {76}),
/* NxS[  76] */ // Shortest string ":BACKFAC"
      new Table(62, 1, -1, new short[] {77}),
/* NxS[  77] */ // Shortest string ":BACKFACE"
      new Table(30, 1, -1, new short[] {78}),
/* NxS[  78] */ // Shortest string ":BACKFACES"
      new Table(55, 1, -1, new short[] {79}),
/* NxS[  79] */ // Shortest string ":BACKFACEST"
      new Table(62, 1, -1, new short[] {80}),
/* NxS[  80] */ // Shortest string ":BACKFACESTE"
      new Table(72, 1, -1, new short[] {81}),
/* NxS[  81] */ // Shortest string ":BACKFACESTEN"
      new Table(60, 1, -1, new short[] {82}),
/* NxS[  82] */ // Shortest string ":BACKFACESTENC"
      new Table(74, 1, -1, new short[] {83}),
/* NxS[  83] */ // Shortest string ":BACKFACESTENCI"
      new Table(69, 1, -1, new short[] {84}),
/* NxS[  84] */ // Shortest string ":BACKFACESTENCIL"
      new Table(52, 26, -1, new short[] {85, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 86, 87}),
/* NxS[  85] */ // Shortest string ":BACKFACESTENCILP"
      new Table(65, 1, -1, new short[] {93}),
/* NxS[  86] */ // Shortest string ":BACKFACESTENCILF"
      new Table(61, 5, -1, new short[] {91, -1, -1, -1, 89}),
/* NxS[  87] */ // Shortest string ":BACKFACESTENCILZ"
      new Table(76, 1, -1, new short[] {88}),
/* NxS[  88] */ // Shortest string ":BACKFACESTENCILZF"
      new Table(65, 1, -1, new short[] {89}),
/* NxS[  89] */ // Shortest string ":BACKFACESTENCILFA"
      new Table(74, 1, -1, new short[] {90}),
/* NxS[  90] */ // Shortest string ":BACKFACESTENCILFAI"
      new Table(69, 1, -1, new short[] {60}),
/* NxS[  91] */ // Shortest string ":DEPTHFU"
      new Table(72, 1, -1, new short[] {92}),
/* NxS[  92] */ // Shortest string ":DEPTHFUN"
      new Table(60, 1, -1, new short[] {60}),
/* NxS[  93] */ // Shortest string ":BACKFACESTENCILPA"
      new Table(30, 1, -1, new short[] {94}),
/* NxS[  94] */ // Shortest string ":VPO"
      new Table(30, 1, -1, new short[] {60}),
/* NxS[  95] */ // Shortest string ":FRONTCO"
      new Table(61, 1, -1, new short[] {96}),
/* NxS[  96] */ // Shortest string ":FRONTCOU"
      new Table(72, 1, -1, new short[] {97}),
/* NxS[  97] */ // Shortest string ":FRONTCOUN"
      new Table(55, 1, -1, new short[] {98}),
/* NxS[  98] */ // Shortest string ":FRONTCOUNT"
      new Table(62, 1, -1, new short[] {99}),
/* NxS[  99] */ // Shortest string ":FRONTCOUNTE"
      new Table(53, 1, -1, new short[] {100}),
/* NxS[ 100] */ // Shortest string ":FRONTCOUNTER"
      new Table(60, 1, -1, new short[] {101}),
/* NxS[ 101] */ // Shortest string ":FRONTCOUNTERC"
      new Table(69, 1, -1, new short[] {102}),
/* NxS[ 102] */ // Shortest string ":FRONTCOUNTERCL"
      new Table(71, 1, -1, new short[] {103}),
/* NxS[ 103] */ // Shortest string ":FRONTCOUNTERCLO"
      new Table(60, 1, -1, new short[] {104}),
/* NxS[ 104] */ // Shortest string ":FRONTCOUNTERCLOC"
      new Table(75, 1, -1, new short[] {105}),
/* NxS[ 105] */ // Shortest string ":FRONTCOUNTERCLOCK"
      new Table(73, 1, -1, new short[] {106}),
/* NxS[ 106] */ // Shortest string ":FRONTCOUNTERCLOCKW"
      new Table(74, 1, -1, new short[] {107}),
/* NxS[ 107] */ // Shortest string ":FRONTCOUNTERCLOCKWI"
      new Table(30, 1, -1, new short[] {59}),
/* NxS[ 108] */ // Shortest string ":NO"
      new Table(53, 1, -1, new short[] {109}),
/* NxS[ 109] */ // Shortest string ":NOR"
      new Table(66, 1, -1, new short[] {110}),
/* NxS[ 110] */ // Shortest string ":NORM"
      new Table(65, 1, -1, new short[] {111}),
/* NxS[ 111] */ // Shortest string ":NORMA"
      new Table(69, 1, -1, new short[] {112}),
/* NxS[ 112] */ // Shortest string ":PSIZE"
      new Table(57, 49, -1, new short[] {113, 60, 60, -1, -1, -1, 
          -1, 60, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
          -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2}),
/* NxS[ 113] */ // Shortest string ":PSIZE1"
      new Table(57, 49, -1, new short[] {60, -1, -1, -1, -1, -1, 
          -1, 60, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
          -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2}),
/* NxS[ 114] */ // Shortest string ":MU"
      new Table(69, 1, -1, new short[] {136}),
/* NxS[ 115] */ // Shortest string ":MA"
      new Table(78, 1, -1, new short[] {126}),
/* NxS[ 116] */ // Shortest string ":MI"
      new Table(52, 21, -1, new short[] {117, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 118}),
/* NxS[ 117] */ // Shortest string ":MIP"
      new Table(69, 1, -1, new short[] {121}),
/* NxS[ 118] */ // Shortest string ":MIN"
      new Table(69, 1, -1, new short[] {119}),
/* NxS[ 119] */ // Shortest string ":MAXL"
      new Table(71, 1, -1, new short[] {120}),
/* NxS[ 120] */ // Shortest string ":MAXLO"
      new Table(44, 1, -1, new short[] {60}),
/* NxS[ 121] */ // Shortest string ":MIPL"
      new Table(71, 1, -1, new short[] {122}),
/* NxS[ 122] */ // Shortest string ":MIPLO"
      new Table(44, 1, -1, new short[] {123}),
/* NxS[ 123] */ // Shortest string ":MIPLOD"
      new Table(25, 1, -1, new short[] {124}),
/* NxS[ 124] */ // Shortest string ":MIPLODB"
      new Table(74, 1, -1, new short[] {125}),
/* NxS[ 125] */ // Shortest string ":MIPLODBI"
      new Table(65, 1, -1, new short[] {94}),
/* NxS[ 126] */ // Shortest string ":MAX"
      new Table(65, 5, -1, new short[] {127, -1, -1, -1, 119}),
/* NxS[ 127] */ // Shortest string ":MAXA"
      new Table(72, 1, -1, new short[] {128}),
/* NxS[ 128] */ // Shortest string ":MAXAN"
      new Table(74, 1, -1, new short[] {129}),
/* NxS[ 129] */ // Shortest string ":MAXANI"
      new Table(30, 1, -1, new short[] {130}),
/* NxS[ 130] */ // Shortest string ":MAXANIS"
      new Table(71, 1, -1, new short[] {131}),
/* NxS[ 131] */ // Shortest string ":MAXANISO"
      new Table(55, 1, -1, new short[] {132}),
/* NxS[ 132] */ // Shortest string ":MAXANISOT"
      new Table(53, 1, -1, new short[] {133}),
/* NxS[ 133] */ // Shortest string ":MAXANISOTR"
      new Table(71, 1, -1, new short[] {134}),
/* NxS[ 134] */ // Shortest string ":MAXANISOTRO"
      new Table(52, 1, -1, new short[] {135}),
/* NxS[ 135] */ // Shortest string ":MAXANISOTROP"
      new Table(79, 1, -1, new short[] {60}),
/* NxS[ 136] */ // Shortest string ":MUL"
      new Table(55, 1, -1, new short[] {137}),
/* NxS[ 137] */ // Shortest string ":MULT"
      new Table(74, 1, -1, new short[] {138}),
/* NxS[ 138] */ // Shortest string ":MULTI"
      new Table(30, 1, -1, new short[] {139}),
/* NxS[ 139] */ // Shortest string ":MULTIS"
      new Table(65, 1, -1, new short[] {140}),
/* NxS[ 140] */ // Shortest string ":MULTISA"
      new Table(66, 1, -1, new short[] {141}),
/* NxS[ 141] */ // Shortest string ":MULTISAM"
      new Table(52, 1, -1, new short[] {142}),
/* NxS[ 142] */ // Shortest string ":MULTISAMP"
      new Table(69, 1, -1, new short[] {143}),
/* NxS[ 143] */ // Shortest string ":MULTISAMPL"
      new Table(62, 1, -1, new short[] {54}),
/* NxS[ 144] */ // Shortest string ":AD"
      new Table(44, 1, -1, new short[] {169}),
/* NxS[ 145] */ // Shortest string ":AL"
      new Table(52, 1, -1, new short[] {158}),
/* NxS[ 146] */ // Shortest string ":AN"
      new Table(55, 1, -1, new short[] {147}),
/* NxS[ 147] */ // Shortest string ":ANT"
      new Table(74, 1, -1, new short[] {148}),
/* NxS[ 148] */ // Shortest string ":ANTI"
      new Table(65, 1, -1, new short[] {149}),
/* NxS[ 149] */ // Shortest string ":ANTIA"
      new Table(69, 1, -1, new short[] {150}),
/* NxS[ 150] */ // Shortest string ":ANTIAL"
      new Table(74, 1, -1, new short[] {151}),
/* NxS[ 151] */ // Shortest string ":ANTIALI"
      new Table(65, 1, -1, new short[] {152}),
/* NxS[ 152] */ // Shortest string ":ANTIALIA"
      new Table(30, 1, -1, new short[] {153}),
/* NxS[ 153] */ // Shortest string ":ANTIALIAS"
      new Table(62, 1, -1, new short[] {154}),
/* NxS[ 154] */ // Shortest string ":ANTIALIASE"
      new Table(44, 1, -1, new short[] {155}),
/* NxS[ 155] */ // Shortest string ":ANTIALIASED"
      new Table(69, 1, -1, new short[] {156}),
/* NxS[ 156] */ // Shortest string ":ANTIALIASEDL"
      new Table(74, 1, -1, new short[] {157}),
/* NxS[ 157] */ // Shortest string ":ANTIALIASEDLI"
      new Table(72, 1, -1, new short[] {143}),
/* NxS[ 158] */ // Shortest string ":ALP"
      new Table(70, 1, -1, new short[] {159}),
/* NxS[ 159] */ // Shortest string ":ALPH"
      new Table(65, 1, -1, new short[] {160}),
/* NxS[ 160] */ // Shortest string ":ALPHA"
      new Table(55, 1, -1, new short[] {161}),
/* NxS[ 161] */ // Shortest string ":ALPHAT"
      new Table(71, 1, -1, new short[] {162}),
/* NxS[ 162] */ // Shortest string ":ALPHATO"
      new Table(60, 1, -1, new short[] {163}),
/* NxS[ 163] */ // Shortest string ":ALPHATOC"
      new Table(71, 1, -1, new short[] {164}),
/* NxS[ 164] */ // Shortest string ":ALPHATOCO"
      new Table(46, 1, -1, new short[] {165}),
/* NxS[ 165] */ // Shortest string ":ALPHATOCOV"
      new Table(62, 1, -1, new short[] {166}),
/* NxS[ 166] */ // Shortest string ":ALPHATOCOVE"
      new Table(53, 1, -1, new short[] {167}),
/* NxS[ 167] */ // Shortest string ":ALPHATOCOVER"
      new Table(65, 1, -1, new short[] {168}),
/* NxS[ 168] */ // Shortest string ":ALPHATOCOVERA"
      new Table(49, 1, -1, new short[] {143}),
/* NxS[ 169] */ // Shortest string ":ADD"
      new Table(53, 1, -1, new short[] {170}),
/* NxS[ 170] */ // Shortest string ":ADDR"
      new Table(62, 1, -1, new short[] {171}),
/* NxS[ 171] */ // Shortest string ":ADDRE"
      new Table(30, 1, -1, new short[] {172}),
/* NxS[ 172] */ // Shortest string ":ADDRES"
      new Table(30, 1, -1, new short[] {173}),
/* NxS[ 173] */ // Shortest string ":ADDRESS"
      new Table(46, 28, -1, new short[] {60, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 60}),
/* NxS[ 174] */ // Shortest string ":CU"
      new Table(69, 1, -1, new short[] {189}),
/* NxS[ 175] */ // Shortest string ":CO"
      new Table(66, 4, -1, new short[] {176, -1, -1, 177}),
/* NxS[ 176] */ // Shortest string ":COM"
      new Table(52, 1, -1, new short[] {181}),
/* NxS[ 177] */ // Shortest string ":COL"
      new Table(71, 1, -1, new short[] {178}),
/* NxS[ 178] */ // Shortest string ":COLO"
      new Table(53, 1, -1, new short[] {179}),
/* NxS[ 179] */ // Shortest string ":COLOR"
      new Table(57, 49, -1, new short[] {180, 60, 60, -1, -1, -1, 
          -1, 60, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
          -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2}),
/* NxS[ 180] */ // Shortest string ":COLOR1"
      new Table(57, 49, -1, new short[] {60, 60, 60, -1, -1, -1, 
          -1, 60, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
          -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2}),
/* NxS[ 181] */ // Shortest string ":COMP"
      new Table(65, 1, -1, new short[] {182}),
/* NxS[ 182] */ // Shortest string ":COMPA"
      new Table(53, 1, -1, new short[] {183}),
/* NxS[ 183] */ // Shortest string ":COMPAR"
      new Table(74, 1, -1, new short[] {184}),
/* NxS[ 184] */ // Shortest string ":COMPARI"
      new Table(30, 1, -1, new short[] {185}),
/* NxS[ 185] */ // Shortest string ":COMPARIS"
      new Table(71, 1, -1, new short[] {186}),
/* NxS[ 186] */ // Shortest string ":COMPARISO"
      new Table(72, 1, -1, new short[] {187}),
/* NxS[ 187] */ // Shortest string ":COMPARISON"
      new Table(76, 1, -1, new short[] {188}),
/* NxS[ 188] */ // Shortest string ":DEPTHF"
      new Table(61, 1, -1, new short[] {91}),
/* NxS[ 189] */ // Shortest string ":CUL"
      new Table(69, 1, -1, new short[] {66}),
/* NxS[ 190] */ // Shortest string ":TE"
      new Table(78, 43, -1, new short[] {197, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 196}),
/* NxS[ 191] */ // Shortest string ":TA"
      new Table(72, 1, -1, new short[] {192}),
/* NxS[ 192] */ // Shortest string ":TAN"
      new Table(49, 1, -1, new short[] {193}),
/* NxS[ 193] */ // Shortest string ":TANG"
      new Table(62, 1, -1, new short[] {194}),
/* NxS[ 194] */ // Shortest string ":TANGE"
      new Table(72, 1, -1, new short[] {195}),
/* NxS[ 195] */ // Shortest string ":TANGEN"
      new Table(55, 1, -1, new short[] {112}),
/* NxS[ 196] */ // Shortest string ":TES"
      new Table(30, 1, -1, new short[] {204}),
/* NxS[ 197] */ // Shortest string ":TEX"
      new Table(60, 1, -1, new short[] {198}),
/* NxS[ 198] */ // Shortest string ":TEXC"
      new Table(71, 1, -1, new short[] {199}),
/* NxS[ 199] */ // Shortest string ":TEXCO"
      new Table(71, 1, -1, new short[] {200}),
/* NxS[ 200] */ // Shortest string ":TEXCOO"
      new Table(53, 1, -1, new short[] {201}),
/* NxS[ 201] */ // Shortest string ":TEXCOOR"
      new Table(44, 1, -1, new short[] {202}),
/* NxS[ 202] */ // Shortest string ":TEXCOORD"
      new Table(57, 49, -1, new short[] {203, 60, 60, -1, -1, -1, 
          -1, 60, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
          -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2}),
/* NxS[ 203] */ // Shortest string ":TEXCOORD1"
      new Table(57, 49, -1, new short[] {60, 60, 60, -1, -1, -1, 
          -1, 60, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 60, 60, -1, -1, -1, 60, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
          -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2}),
/* NxS[ 204] */ // Shortest string ":TESS"
      new Table(76, 1, -1, new short[] {205}),
/* NxS[ 205] */ // Shortest string ":TESSF"
      new Table(65, 1, -1, new short[] {206}),
/* NxS[ 206] */ // Shortest string ":TESSFA"
      new Table(60, 1, -1, new short[] {207}),
/* NxS[ 207] */ // Shortest string ":TESSFAC"
      new Table(55, 1, -1, new short[] {208}),
/* NxS[ 208] */ // Shortest string ":TESSFACT"
      new Table(71, 1, -1, new short[] {209}),
/* NxS[ 209] */ // Shortest string ":SPECULA"
      new Table(53, 1, -1, new short[] {112}),
/* NxS[ 210] */ // Shortest string ":RE"
      new Table(49, 24, -1, new short[] {211, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 212}),
/* NxS[ 211] */ // Shortest string ":REG"
      new Table(74, 1, -1, new short[] {230}),
/* NxS[ 212] */ // Shortest string ":REN"
      new Table(44, 1, -1, new short[] {213}),
/* NxS[ 213] */ // Shortest string ":REND"
      new Table(62, 1, -1, new short[] {214}),
/* NxS[ 214] */ // Shortest string ":RENDE"
      new Table(53, 1, -1, new short[] {215}),
/* NxS[ 215] */ // Shortest string ":RENDER"
      new Table(55, 1, -1, new short[] {216}),
/* NxS[ 216] */ // Shortest string ":RENDERT"
      new Table(65, 1, -1, new short[] {217}),
/* NxS[ 217] */ // Shortest string ":RENDERTA"
      new Table(53, 1, -1, new short[] {218}),
/* NxS[ 218] */ // Shortest string ":RENDERTAR"
      new Table(49, 1, -1, new short[] {219}),
/* NxS[ 219] */ // Shortest string ":RENDERTARG"
      new Table(62, 1, -1, new short[] {220}),
/* NxS[ 220] */ // Shortest string ":RENDERTARGE"
      new Table(55, 1, -1, new short[] {221}),
/* NxS[ 221] */ // Shortest string ":RENDERTARGET"
      new Table(73, 1, -1, new short[] {222}),
/* NxS[ 222] */ // Shortest string ":DEPTHW"
      new Table(53, 1, -1, new short[] {223}),
/* NxS[ 223] */ // Shortest string ":DEPTHWR"
      new Table(74, 1, -1, new short[] {224}),
/* NxS[ 224] */ // Shortest string ":DEPTHWRI"
      new Table(55, 1, -1, new short[] {225}),
/* NxS[ 225] */ // Shortest string ":DEPTHWRIT"
      new Table(62, 1, -1, new short[] {226}),
/* NxS[ 226] */ // Shortest string ":DEPTHWRITE"
      new Table(66, 1, -1, new short[] {227}),
/* NxS[ 227] */ // Shortest string ":DEPTHWRITEM"
      new Table(65, 1, -1, new short[] {228}),
/* NxS[ 228] */ // Shortest string ":DEPTHWRITEMA"
      new Table(30, 1, -1, new short[] {229}),
/* NxS[ 229] */ // Shortest string ":DEPTHWRITEMAS"
      new Table(75, 1, -1, new short[] {60}),
/* NxS[ 230] */ // Shortest string ":REGI"
      new Table(30, 1, -1, new short[] {231}),
/* NxS[ 231] */ // Shortest string ":REGIS"
      new Table(55, 1, -1, new short[] {65}),
/* NxS[ 232] */ // Shortest string ":PS"
      new Table(74, 1, -1, new short[] {239}),
/* NxS[ 233] */ // Shortest string ":PO"
      new Table(30, 1, -1, new short[] {234}),
/* NxS[ 234] */ // Shortest string ":POS"
      new Table(74, 1, -1, new short[] {235}),
/* NxS[ 235] */ // Shortest string ":POSI"
      new Table(55, 1, -1, new short[] {236}),
/* NxS[ 236] */ // Shortest string ":POSIT"
      new Table(74, 1, -1, new short[] {237}),
/* NxS[ 237] */ // Shortest string ":POSITI"
      new Table(71, 1, -1, new short[] {238}),
/* NxS[ 238] */ // Shortest string ":POSITIO"
      new Table(72, 1, -1, new short[] {112}),
/* NxS[ 239] */ // Shortest string ":PSI"
      new Table(77, 1, -1, new short[] {240}),
/* NxS[ 240] */ // Shortest string ":PSIZ"
      new Table(62, 1, -1, new short[] {112}),
/* NxS[ 241] */ // Shortest string ":VP"
      new Table(71, 1, -1, new short[] {94}),
/* NxS[ 242] */ // Shortest string ":VF"
      new Table(65, 1, -1, new short[] {243}),
/* NxS[ 243] */ // Shortest string ":VFA"
      new Table(60, 1, -1, new short[] {59}),
/* NxS[ 244] */ // Shortest string ":DE"
      new Table(30, 23, -1, new short[] {249, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          250}),
/* NxS[ 245] */ // Shortest string ":DI"
      new Table(76, 1, -1, new short[] {246}),
/* NxS[ 246] */ // Shortest string ":DIF"
      new Table(76, 1, -1, new short[] {247}),
/* NxS[ 247] */ // Shortest string ":DIFF"
      new Table(61, 1, -1, new short[] {248}),
/* NxS[ 248] */ // Shortest string ":DIFFU"
      new Table(30, 1, -1, new short[] {240}),
/* NxS[ 249] */ // Shortest string ":DES"
      new Table(55, 1, -1, new short[] {261}),
/* NxS[ 250] */ // Shortest string ":DEP"
      new Table(55, 1, -1, new short[] {251}),
/* NxS[ 251] */ // Shortest string ":DEPT"
      new Table(70, 1, -1, new short[] {252}),
/* NxS[ 252] */ // Shortest string ":DEPTH"
      new Table(25, 52, -1, new short[] {253, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 222, -1, -1, 188}),
/* NxS[ 253] */ // Shortest string ":DEPTHB"
      new Table(74, 1, -1, new short[] {254}),
/* NxS[ 254] */ // Shortest string ":DEPTHBI"
      new Table(65, 1, -1, new short[] {255}),
/* NxS[ 255] */ // Shortest string ":DEPTHBIA"
      new Table(30, 1, -1, new short[] {256}),
/* NxS[ 256] */ // Shortest string ":DEPTHBIAS"
      new Table(60, 46, -1, new short[] {257, -1, -1, -1, -1, -1, 
          -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, -1, 
          -1, -1, -1, -1, -1, -1, -1, 2}),
/* NxS[ 257] */ // Shortest string ":DEPTHBIASC"
      new Table(69, 1, -1, new short[] {258}),
/* NxS[ 258] */ // Shortest string ":DEPTHBIASCL"
      new Table(65, 1, -1, new short[] {259}),
/* NxS[ 259] */ // Shortest string ":DEPTHBIASCLA"
      new Table(66, 1, -1, new short[] {260}),
/* NxS[ 260] */ // Shortest string ":DEPTHBIASCLAM"
      new Table(52, 1, -1, new short[] {60}),
/* NxS[ 261] */ // Shortest string ":SRC"
      new Table(25, 1, -1, new short[] {262}),
/* NxS[ 262] */ // Shortest string ":SRCB"
      new Table(69, 1, -1, new short[] {263}),
/* NxS[ 263] */ // Shortest string ":SRCBL"
      new Table(62, 1, -1, new short[] {264}),
/* NxS[ 264] */ // Shortest string ":SRCBLE"
      new Table(72, 1, -1, new short[] {265}),
/* NxS[ 265] */ // Shortest string ":SRCBLEN"
      new Table(44, 1, -1, new short[] {266}),
/* NxS[ 266] */ // Shortest string ":BLENDOP"
      new Table(65, 41, -1, new short[] {267, -1, -1, 2, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
          -1, -1, 2}),
/* NxS[ 267] */ // Shortest string ":BLENDOPA"
      new Table(69, 1, -1, new short[] {268}),
/* NxS[ 268] */ // Shortest string ":BLENDOPAL"
      new Table(52, 1, -1, new short[] {269}),
/* NxS[ 269] */ // Shortest string ":BLENDOPALP"
      new Table(70, 1, -1, new short[] {270}),
/* NxS[ 270] */ // Shortest string ":BLENDOPALPH"
      new Table(65, 1, -1, new short[] {60}),
/* NxS[ 271] */ // Shortest string ":SV"
      new Table(86, 1, -1, new short[] {306}),
/* NxS[ 272] */ // Shortest string ":SP"
      new Table(62, 1, -1, new short[] {302}),
/* NxS[ 273] */ // Shortest string ":SR"
      new Table(60, 1, -1, new short[] {261}),
/* NxS[ 274] */ // Shortest string ":ST"
      new Table(62, 1, -1, new short[] {294}),
/* NxS[ 275] */ // Shortest string ":SC"
      new Table(74, 1, -1, new short[] {290}),
/* NxS[ 276] */ // Shortest string ":SL"
      new Table(71, 1, -1, new short[] {277}),
/* NxS[ 277] */ // Shortest string ":SLO"
      new Table(52, 1, -1, new short[] {278}),
/* NxS[ 278] */ // Shortest string ":SLOP"
      new Table(62, 1, -1, new short[] {279}),
/* NxS[ 279] */ // Shortest string ":SLOPE"
      new Table(30, 1, -1, new short[] {280}),
/* NxS[ 280] */ // Shortest string ":SLOPES"
      new Table(60, 1, -1, new short[] {281}),
/* NxS[ 281] */ // Shortest string ":SLOPESC"
      new Table(65, 1, -1, new short[] {282}),
/* NxS[ 282] */ // Shortest string ":SLOPESCA"
      new Table(69, 1, -1, new short[] {283}),
/* NxS[ 283] */ // Shortest string ":SLOPESCAL"
      new Table(62, 1, -1, new short[] {284}),
/* NxS[ 284] */ // Shortest string ":SLOPESCALE"
      new Table(44, 1, -1, new short[] {285}),
/* NxS[ 285] */ // Shortest string ":SLOPESCALED"
      new Table(44, 1, -1, new short[] {286}),
/* NxS[ 286] */ // Shortest string ":SLOPESCALEDD"
      new Table(62, 1, -1, new short[] {287}),
/* NxS[ 287] */ // Shortest string ":SLOPESCALEDDE"
      new Table(52, 1, -1, new short[] {288}),
/* NxS[ 288] */ // Shortest string ":SLOPESCALEDDEP"
      new Table(55, 1, -1, new short[] {289}),
/* NxS[ 289] */ // Shortest string ":SLOPESCALEDDEPT"
      new Table(70, 1, -1, new short[] {123}),
/* NxS[ 290] */ // Shortest string ":SCI"
      new Table(30, 1, -1, new short[] {291}),
/* NxS[ 291] */ // Shortest string ":SCIS"
      new Table(30, 1, -1, new short[] {292}),
/* NxS[ 292] */ // Shortest string ":SCISS"
      new Table(71, 1, -1, new short[] {293}),
/* NxS[ 293] */ // Shortest string ":SCISSO"
      new Table(53, 1, -1, new short[] {54}),
/* NxS[ 294] */ // Shortest string ":STE"
      new Table(72, 1, -1, new short[] {295}),
/* NxS[ 295] */ // Shortest string ":STEN"
      new Table(60, 1, -1, new short[] {296}),
/* NxS[ 296] */ // Shortest string ":STENC"
      new Table(74, 1, -1, new short[] {297}),
/* NxS[ 297] */ // Shortest string ":STENCI"
      new Table(69, 1, -1, new short[] {298}),
/* NxS[ 298] */ // Shortest string ":STENCIL"
      new Table(53, 21, -1, new short[] {299, -1, -1, -1, -1, -1, 
          -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 222}),
/* NxS[ 299] */ // Shortest string ":STENCILR"
      new Table(62, 1, -1, new short[] {300}),
/* NxS[ 300] */ // Shortest string ":STENCILRE"
      new Table(65, 1, -1, new short[] {301}),
/* NxS[ 301] */ // Shortest string ":STENCILREA"
      new Table(44, 1, -1, new short[] {226}),
/* NxS[ 302] */ // Shortest string ":SPE"
      new Table(60, 1, -1, new short[] {303}),
/* NxS[ 303] */ // Shortest string ":SPEC"
      new Table(61, 1, -1, new short[] {304}),
/* NxS[ 304] */ // Shortest string ":SPECU"
      new Table(69, 1, -1, new short[] {305}),
/* NxS[ 305] */ // Shortest string ":SPECUL"
      new Table(65, 1, -1, new short[] {209}),
/* NxS[ 306] */ // Shortest string ":SV_"
      new Table(30, 45, -1, new short[] {307, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 308, -1, 309, -1, -1, 310, -1, -1, 
          311, 312, -1, 313, -1, -1, -1, -1, 314, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 315, -1, -1, 316}),
/* NxS[ 307] */ // Shortest string ":SV_S"
      new Table(65, 1, -1, new short[] {453}),
/* NxS[ 308] */ // Shortest string ":SV_D"
      new Table(62, 13, -1, new short[] {435, -1, -1, -1, -1, -1, 
          -1, -1, -1, 436, -1, -1, 437}),
/* NxS[ 309] */ // Shortest string ":SV_V"
      new Table(62, 13, -1, new short[] {426, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 427}),
/* NxS[ 310] */ // Shortest string ":SV_G"
      new Table(30, 24, -1, new short[] {412, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 413}),
/* NxS[ 311] */ // Shortest string ":SV_P"
      new Table(53, 19, -1, new short[] {400, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 401}),
/* NxS[ 312] */ // Shortest string ":SV_R"
      new Table(62, 1, -1, new short[] {380}),
/* NxS[ 313] */ // Shortest string ":SV_T"
      new Table(62, 4, -1, new short[] {325, -1, -1, 375}),
/* NxS[ 314] */ // Shortest string ":SV_C"
      new Table(61, 11, -1, new short[] {357, -1, -1, -1, -1, -1, 
          -1, -1, 358, -1, 359}),
/* NxS[ 315] */ // Shortest string ":SV_O"
      new Table(61, 1, -1, new short[] {341}),
/* NxS[ 316] */ // Shortest string ":SV_I"
      new Table(30, 43, -1, new short[] {317, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 318}),
/* NxS[ 317] */ // Shortest string ":SV_IS"
      new Table(76, 1, -1, new short[] {336}),
/* NxS[ 318] */ // Shortest string ":SV_IN"
      new Table(30, 1, -1, new short[] {319}),
/* NxS[ 319] */ // Shortest string ":SV_INS"
      new Table(55, 20, -1, new short[] {320, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 321}),
/* NxS[ 320] */ // Shortest string ":SV_INST"
      new Table(65, 1, -1, new short[] {332}),
/* NxS[ 321] */ // Shortest string ":SV_INSI"
      new Table(44, 1, -1, new short[] {322}),
/* NxS[ 322] */ // Shortest string ":SV_INSID"
      new Table(62, 1, -1, new short[] {323}),
/* NxS[ 323] */ // Shortest string ":SV_INSIDE"
      new Table(55, 1, -1, new short[] {324}),
/* NxS[ 324] */ // Shortest string ":SV_INSIDET"
      new Table(62, 1, -1, new short[] {325}),
/* NxS[ 325] */ // Shortest string ":SV_TE"
      new Table(30, 1, -1, new short[] {326}),
/* NxS[ 326] */ // Shortest string ":SV_TES"
      new Table(30, 1, -1, new short[] {327}),
/* NxS[ 327] */ // Shortest string ":SV_TESS"
      new Table(76, 1, -1, new short[] {328}),
/* NxS[ 328] */ // Shortest string ":SV_TESSF"
      new Table(65, 1, -1, new short[] {329}),
/* NxS[ 329] */ // Shortest string ":SV_TESSFA"
      new Table(60, 1, -1, new short[] {330}),
/* NxS[ 330] */ // Shortest string ":SV_TESSFAC"
      new Table(55, 1, -1, new short[] {331}),
/* NxS[ 331] */ // Shortest string ":BORDERCOL"
      new Table(71, 1, -1, new short[] {69}),
/* NxS[ 332] */ // Shortest string ":SV_INSTA"
      new Table(72, 1, -1, new short[] {333}),
/* NxS[ 333] */ // Shortest string ":SV_INSTAN"
      new Table(60, 1, -1, new short[] {334}),
/* NxS[ 334] */ // Shortest string ":SV_INSTANC"
      new Table(62, 1, -1, new short[] {335}),
/* NxS[ 335] */ // Shortest string ":SV_VERTEX"
      new Table(74, 1, -1, new short[] {120}),
/* NxS[ 336] */ // Shortest string ":SV_ISF"
      new Table(53, 1, -1, new short[] {337}),
/* NxS[ 337] */ // Shortest string ":SV_ISFR"
      new Table(71, 1, -1, new short[] {338}),
/* NxS[ 338] */ // Shortest string ":SV_ISFRO"
      new Table(72, 1, -1, new short[] {339}),
/* NxS[ 339] */ // Shortest string ":SV_ISFRON"
      new Table(55, 1, -1, new short[] {340}),
/* NxS[ 340] */ // Shortest string ":SV_ISFRONT"
      new Table(76, 1, -1, new short[] {242}),
/* NxS[ 341] */ // Shortest string ":SV_OU"
      new Table(55, 1, -1, new short[] {342}),
/* NxS[ 342] */ // Shortest string ":SV_OUT"
      new Table(52, 1, -1, new short[] {343}),
/* NxS[ 343] */ // Shortest string ":SV_OUTP"
      new Table(61, 1, -1, new short[] {344}),
/* NxS[ 344] */ // Shortest string ":SV_OUTPU"
      new Table(55, 1, -1, new short[] {345}),
/* NxS[ 345] */ // Shortest string ":SV_OUTPUT"
      new Table(60, 1, -1, new short[] {346}),
/* NxS[ 346] */ // Shortest string ":SV_OUTPUTC"
      new Table(71, 1, -1, new short[] {347}),
/* NxS[ 347] */ // Shortest string ":SV_OUTPUTCO"
      new Table(72, 1, -1, new short[] {348}),
/* NxS[ 348] */ // Shortest string ":SV_OUTPUTCON"
      new Table(55, 1, -1, new short[] {349}),
/* NxS[ 349] */ // Shortest string ":SV_OUTPUTCONT"
      new Table(53, 1, -1, new short[] {350}),
/* NxS[ 350] */ // Shortest string ":SV_OUTPUTCONTR"
      new Table(71, 1, -1, new short[] {351}),
/* NxS[ 351] */ // Shortest string ":SV_OUTPUTCONTRO"
      new Table(69, 1, -1, new short[] {352}),
/* NxS[ 352] */ // Shortest string ":SV_OUTPUTCONTROL"
      new Table(52, 1, -1, new short[] {353}),
/* NxS[ 353] */ // Shortest string ":SV_OUTPUTCONTROLP"
      new Table(71, 1, -1, new short[] {354}),
/* NxS[ 354] */ // Shortest string ":SV_OUTPUTCONTROLPO"
      new Table(74, 1, -1, new short[] {355}),
/* NxS[ 355] */ // Shortest string ":SV_OUTPUTCONTROLPOI"
      new Table(72, 1, -1, new short[] {356}),
/* NxS[ 356] */ // Shortest string ":SV_OUTPUTCONTROLPOIN"
      new Table(55, 1, -1, new short[] {335}),
/* NxS[ 357] */ // Shortest string ":SV_CU"
      new Table(69, 1, -1, new short[] {374}),
/* NxS[ 358] */ // Shortest string ":SV_CL"
      new Table(74, 1, -1, new short[] {364}),
/* NxS[ 359] */ // Shortest string ":SV_CO"
      new Table(46, 1, -1, new short[] {360}),
/* NxS[ 360] */ // Shortest string ":SV_COV"
      new Table(62, 1, -1, new short[] {361}),
/* NxS[ 361] */ // Shortest string ":SV_COVE"
      new Table(53, 1, -1, new short[] {362}),
/* NxS[ 362] */ // Shortest string ":SV_COVER"
      new Table(65, 1, -1, new short[] {363}),
/* NxS[ 363] */ // Shortest string ":SV_COVERA"
      new Table(49, 1, -1, new short[] {59}),
/* NxS[ 364] */ // Shortest string ":SV_CLI"
      new Table(52, 1, -1, new short[] {365}),
/* NxS[ 365] */ // Shortest string ":SV_CULL"
      new Table(44, 1, -1, new short[] {366}),
/* NxS[ 366] */ // Shortest string ":SV_CULLD"
      new Table(74, 1, -1, new short[] {367}),
/* NxS[ 367] */ // Shortest string ":SV_CULLDI"
      new Table(30, 1, -1, new short[] {368}),
/* NxS[ 368] */ // Shortest string ":SV_CULLDIS"
      new Table(55, 1, -1, new short[] {369}),
/* NxS[ 369] */ // Shortest string ":SV_CULLDIST"
      new Table(65, 1, -1, new short[] {370}),
/* NxS[ 370] */ // Shortest string ":SV_CULLDISTA"
      new Table(72, 1, -1, new short[] {371}),
/* NxS[ 371] */ // Shortest string ":SV_CULLDISTAN"
      new Table(60, 1, -1, new short[] {372}),
/* NxS[ 372] */ // Shortest string ":SV_CULLDISTANC"
      new Table(62, 1, -1, new short[] {373}),
/* NxS[ 373] */ // Shortest string ":SV_CULLDISTANCE"
      new Table(57, 49, -1, new short[] {113, 60, 60, -1, -1, -1, 
          -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
          -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2}),
/* NxS[ 374] */ // Shortest string ":SV_CUL"
      new Table(69, 1, -1, new short[] {365}),
/* NxS[ 375] */ // Shortest string ":SV_TA"
      new Table(53, 1, -1, new short[] {376}),
/* NxS[ 376] */ // Shortest string ":SV_TAR"
      new Table(49, 1, -1, new short[] {377}),
/* NxS[ 377] */ // Shortest string ":SV_TARG"
      new Table(62, 1, -1, new short[] {378}),
/* NxS[ 378] */ // Shortest string ":SV_TARGE"
      new Table(55, 1, -1, new short[] {379}),
/* NxS[ 379] */ // Shortest string ":SV_TARGET"
      new Table(57, 27, -1, new short[] {60, 60, 60, -1, -1, -1, 
          -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 60, 60, 60, 60}),
/* NxS[ 380] */ // Shortest string ":SV_RE"
      new Table(72, 1, -1, new short[] {381}),
/* NxS[ 381] */ // Shortest string ":SV_REN"
      new Table(44, 1, -1, new short[] {382}),
/* NxS[ 382] */ // Shortest string ":SV_REND"
      new Table(62, 1, -1, new short[] {383}),
/* NxS[ 383] */ // Shortest string ":SV_RENDE"
      new Table(53, 1, -1, new short[] {384}),
/* NxS[ 384] */ // Shortest string ":SV_RENDER"
      new Table(55, 1, -1, new short[] {385}),
/* NxS[ 385] */ // Shortest string ":SV_RENDERT"
      new Table(65, 1, -1, new short[] {386}),
/* NxS[ 386] */ // Shortest string ":SV_RENDERTA"
      new Table(53, 1, -1, new short[] {387}),
/* NxS[ 387] */ // Shortest string ":SV_RENDERTAR"
      new Table(49, 1, -1, new short[] {388}),
/* NxS[ 388] */ // Shortest string ":SV_RENDERTARG"
      new Table(62, 1, -1, new short[] {389}),
/* NxS[ 389] */ // Shortest string ":SV_VIEWPOR"
      new Table(55, 1, -1, new short[] {390}),
/* NxS[ 390] */ // Shortest string ":SV_VIEWPORT"
      new Table(65, 1, -1, new short[] {391}),
/* NxS[ 391] */ // Shortest string ":SV_VIEWPORTA"
      new Table(53, 1, -1, new short[] {392}),
/* NxS[ 392] */ // Shortest string ":SV_VIEWPORTAR"
      new Table(53, 1, -1, new short[] {393}),
/* NxS[ 393] */ // Shortest string ":SV_VIEWPORTARR"
      new Table(65, 1, -1, new short[] {394}),
/* NxS[ 394] */ // Shortest string ":SV_VIEWPORTARRA"
      new Table(79, 1, -1, new short[] {395}),
/* NxS[ 395] */ // Shortest string ":SV_SAMPLE"
      new Table(74, 1, -1, new short[] {396}),
/* NxS[ 396] */ // Shortest string ":SV_SAMPLEI"
      new Table(72, 1, -1, new short[] {397}),
/* NxS[ 397] */ // Shortest string ":SV_GROUPIN"
      new Table(44, 1, -1, new short[] {398}),
/* NxS[ 398] */ // Shortest string ":SV_GROUPIND"
      new Table(62, 1, -1, new short[] {399}),
/* NxS[ 399] */ // Shortest string ":SV_GROUPINDE"
      new Table(78, 1, -1, new short[] {60}),
/* NxS[ 400] */ // Shortest string ":SV_PR"
      new Table(74, 1, -1, new short[] {407}),
/* NxS[ 401] */ // Shortest string ":SV_PO"
      new Table(30, 1, -1, new short[] {402}),
/* NxS[ 402] */ // Shortest string ":SV_POS"
      new Table(74, 1, -1, new short[] {403}),
/* NxS[ 403] */ // Shortest string ":SV_POSI"
      new Table(55, 1, -1, new short[] {404}),
/* NxS[ 404] */ // Shortest string ":SV_POSIT"
      new Table(74, 1, -1, new short[] {405}),
/* NxS[ 405] */ // Shortest string ":SV_POSITI"
      new Table(71, 1, -1, new short[] {406}),
/* NxS[ 406] */ // Shortest string ":SV_POSITIO"
      new Table(72, 1, -1, new short[] {60}),
/* NxS[ 407] */ // Shortest string ":SV_PRI"
      new Table(66, 1, -1, new short[] {408}),
/* NxS[ 408] */ // Shortest string ":SV_PRIM"
      new Table(74, 1, -1, new short[] {409}),
/* NxS[ 409] */ // Shortest string ":SV_PRIMI"
      new Table(55, 1, -1, new short[] {410}),
/* NxS[ 410] */ // Shortest string ":SV_PRIMIT"
      new Table(74, 1, -1, new short[] {411}),
/* NxS[ 411] */ // Shortest string ":SV_PRIMITI"
      new Table(46, 1, -1, new short[] {334}),
/* NxS[ 412] */ // Shortest string ":SV_GS"
      new Table(74, 1, -1, new short[] {423}),
/* NxS[ 413] */ // Shortest string ":SV_GR"
      new Table(71, 1, -1, new short[] {414}),
/* NxS[ 414] */ // Shortest string ":SV_GRO"
      new Table(61, 1, -1, new short[] {415}),
/* NxS[ 415] */ // Shortest string ":SV_GROU"
      new Table(52, 1, -1, new short[] {416}),
/* NxS[ 416] */ // Shortest string ":SV_GROUP"
      new Table(55, 20, -1, new short[] {417, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 418}),
/* NxS[ 417] */ // Shortest string ":SV_GROUPT"
      new Table(70, 1, -1, new short[] {419}),
/* NxS[ 418] */ // Shortest string ":SV_GROUPI"
      new Table(44, 29, -1, new short[] {60, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 397}),
/* NxS[ 419] */ // Shortest string ":SV_GROUPTH"
      new Table(53, 1, -1, new short[] {420}),
/* NxS[ 420] */ // Shortest string ":SV_GROUPTHR"
      new Table(62, 1, -1, new short[] {421}),
/* NxS[ 421] */ // Shortest string ":SV_GROUPTHRE"
      new Table(65, 1, -1, new short[] {422}),
/* NxS[ 422] */ // Shortest string ":SV_GROUPTHREA"
      new Table(44, 1, -1, new short[] {335}),
/* NxS[ 423] */ // Shortest string ":SV_GSI"
      new Table(72, 1, -1, new short[] {424}),
/* NxS[ 424] */ // Shortest string ":SV_GSIN"
      new Table(30, 1, -1, new short[] {425}),
/* NxS[ 425] */ // Shortest string ":SV_GSINS"
      new Table(55, 1, -1, new short[] {320}),
/* NxS[ 426] */ // Shortest string ":SV_VE"
      new Table(53, 1, -1, new short[] {432}),
/* NxS[ 427] */ // Shortest string ":SV_VI"
      new Table(62, 1, -1, new short[] {428}),
/* NxS[ 428] */ // Shortest string ":SV_VIE"
      new Table(73, 1, -1, new short[] {429}),
/* NxS[ 429] */ // Shortest string ":SV_VIEW"
      new Table(52, 1, -1, new short[] {430}),
/* NxS[ 430] */ // Shortest string ":SV_VIEWP"
      new Table(71, 1, -1, new short[] {431}),
/* NxS[ 431] */ // Shortest string ":SV_VIEWPO"
      new Table(53, 1, -1, new short[] {389}),
/* NxS[ 432] */ // Shortest string ":SV_VER"
      new Table(55, 1, -1, new short[] {433}),
/* NxS[ 433] */ // Shortest string ":SV_VERT"
      new Table(62, 1, -1, new short[] {434}),
/* NxS[ 434] */ // Shortest string ":SV_VERTE"
      new Table(78, 1, -1, new short[] {335}),
/* NxS[ 435] */ // Shortest string ":SV_DE"
      new Table(52, 1, -1, new short[] {451}),
/* NxS[ 436] */ // Shortest string ":SV_DO"
      new Table(66, 1, -1, new short[] {444}),
/* NxS[ 437] */ // Shortest string ":SV_DI"
      new Table(30, 1, -1, new short[] {438}),
/* NxS[ 438] */ // Shortest string ":SV_DIS"
      new Table(52, 1, -1, new short[] {439}),
/* NxS[ 439] */ // Shortest string ":SV_DISP"
      new Table(65, 1, -1, new short[] {440}),
/* NxS[ 440] */ // Shortest string ":SV_DISPA"
      new Table(55, 1, -1, new short[] {441}),
/* NxS[ 441] */ // Shortest string ":SV_DISPAT"
      new Table(60, 1, -1, new short[] {442}),
/* NxS[ 442] */ // Shortest string ":SV_DISPATC"
      new Table(70, 1, -1, new short[] {443}),
/* NxS[ 443] */ // Shortest string ":SV_DISPATCH"
      new Table(55, 1, -1, new short[] {417}),
/* NxS[ 444] */ // Shortest string ":SV_DOM"
      new Table(65, 1, -1, new short[] {445}),
/* NxS[ 445] */ // Shortest string ":SV_DOMA"
      new Table(74, 1, -1, new short[] {446}),
/* NxS[ 446] */ // Shortest string ":SV_DOMAI"
      new Table(72, 1, -1, new short[] {447}),
/* NxS[ 447] */ // Shortest string ":SV_DOMAIN"
      new Table(69, 1, -1, new short[] {448}),
/* NxS[ 448] */ // Shortest string ":SV_DOMAINL"
      new Table(71, 1, -1, new short[] {449}),
/* NxS[ 449] */ // Shortest string ":SV_DOMAINLO"
      new Table(60, 1, -1, new short[] {450}),
/* NxS[ 450] */ // Shortest string ":SV_DOMAINLOC"
      new Table(65, 1, -1, new short[] {403}),
/* NxS[ 451] */ // Shortest string ":SV_DEP"
      new Table(55, 1, -1, new short[] {452}),
/* NxS[ 452] */ // Shortest string ":SV_DEPT"
      new Table(70, 1, -1, new short[] {60}),
/* NxS[ 453] */ // Shortest string ":SV_SA"
      new Table(66, 1, -1, new short[] {454}),
/* NxS[ 454] */ // Shortest string ":SV_SAM"
      new Table(52, 1, -1, new short[] {455}),
/* NxS[ 455] */ // Shortest string ":SV_SAMP"
      new Table(69, 1, -1, new short[] {456}),
/* NxS[ 456] */ // Shortest string ":SV_SAMPL"
      new Table(62, 1, -1, new short[] {395}),
/* NxS[ 457] */ // Shortest string ":BA"
      new Table(60, 1, -1, new short[] {482}),
/* NxS[ 458] */ // Shortest string ":BL"
      new Table(62, 1, -1, new short[] {467}),
/* NxS[ 459] */ // Shortest string ":BO"
      new Table(53, 1, -1, new short[] {461}),
/* NxS[ 460] */ // Shortest string ":BI"
      new Table(72, 1, -1, new short[] {48}),
/* NxS[ 461] */ // Shortest string ":BOR"
      new Table(44, 1, -1, new short[] {462}),
/* NxS[ 462] */ // Shortest string ":BORD"
      new Table(62, 1, -1, new short[] {463}),
/* NxS[ 463] */ // Shortest string ":BORDE"
      new Table(53, 1, -1, new short[] {464}),
/* NxS[ 464] */ // Shortest string ":BORDER"
      new Table(60, 1, -1, new short[] {465}),
/* NxS[ 465] */ // Shortest string ":BORDERC"
      new Table(71, 1, -1, new short[] {466}),
/* NxS[ 466] */ // Shortest string ":BORDERCO"
      new Table(69, 1, -1, new short[] {331}),
/* NxS[ 467] */ // Shortest string ":BLE"
      new Table(72, 1, -1, new short[] {468}),
/* NxS[ 468] */ // Shortest string ":BLEN"
      new Table(44, 1, -1, new short[] {469}),
/* NxS[ 469] */ // Shortest string ":BLEND"
      new Table(62, 13, -1, new short[] {55, -1, -1, -1, -1, -1, 
          -1, -1, -1, 470, -1, 471, 472}),
/* NxS[ 470] */ // Shortest string ":BLENDO"
      new Table(52, 1, -1, new short[] {266}),
/* NxS[ 471] */ // Shortest string ":BLENDW"
      new Table(62, 1, -1, new short[] {478}),
/* NxS[ 472] */ // Shortest string ":BLENDI"
      new Table(72, 1, -1, new short[] {473}),
/* NxS[ 473] */ // Shortest string ":BLENDIN"
      new Table(44, 1, -1, new short[] {474}),
/* NxS[ 474] */ // Shortest string ":BLENDIND"
      new Table(74, 1, -1, new short[] {475}),
/* NxS[ 475] */ // Shortest string ":BLENDINDI"
      new Table(60, 1, -1, new short[] {476}),
/* NxS[ 476] */ // Shortest string ":BLENDINDIC"
      new Table(62, 1, -1, new short[] {477}),
/* NxS[ 477] */ // Shortest string ":BLENDWEIGHT"
      new Table(30, 1, -1, new short[] {112}),
/* NxS[ 478] */ // Shortest string ":BLENDWE"
      new Table(74, 1, -1, new short[] {479}),
/* NxS[ 479] */ // Shortest string ":BLENDWEI"
      new Table(49, 1, -1, new short[] {480}),
/* NxS[ 480] */ // Shortest string ":BLENDWEIG"
      new Table(70, 1, -1, new short[] {481}),
/* NxS[ 481] */ // Shortest string ":BLENDWEIGH"
      new Table(55, 1, -1, new short[] {477}),
/* NxS[ 482] */ // Shortest string ":BAC"
      new Table(75, 1, -1, new short[] {483}),
/* NxS[ 483] */ // Shortest string ":BACK"
      new Table(76, 1, -1, new short[] {74}),
/* NxS[ 484] */ // Shortest string "Sh"
      new Table(32, 1, -1, new short[] {485}),
/* NxS[ 485] */ // Shortest string "Sha"
      new Table(29, 1, -1, new short[] {486}),
/* NxS[ 486] */ // Shortest string "Shad"
      new Table(27, 1, -1, new short[] {487}),
/* NxS[ 487] */ // Shortest string "Shade"
      new Table(34, 1, -1, new short[] {488}),
/* NxS[ 488] */ // Shortest string "Shader"
      new Table(68, 47, -1, new short[] {4, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          3, 3, -1, 3, -1, -1, 3, 3, 3, 3, 489, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3}),
/* NxS[ 489] */ // Shortest string "Shader|"
      new Table(10, 1, -1, new short[] {3}),
/* NxS[ 490] */ // Shortest string "/B"
      new Table(26, 25, -1, new short[] {1527, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1528, -1, -1, -1, -1, -1, -1, 1529, -1, -1, -1, -1, 
          -1, -1, 905}),
/* NxS[ 491] */ // Shortest string "/l"
      new Table(27, 17, -1, new short[] {1517, -1, 1518, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1519, -1, -1, 1520}),
/* NxS[ 492] */ // Shortest string "/e"
      new Table(26, 23, -1, new short[] {1165, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          1515}),
/* NxS[ 493] */ // Shortest string "/n"
      new Table(32, 9, -1, new short[] {1485, -1, -1, -1, -1, -1, 
          -1, -1, 1486}),
/* NxS[ 494] */ // Shortest string "/d"
      new Table(27, 17, -1, new short[] {1456, -1, 1457, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1079, 1458, -1, -1, 1459}),
/* NxS[ 495] */ // Shortest string "/S"
      new Table(27, 19, -1, new short[] {1376, -1, -1, -1, 1377, 1378, 
          -1, 655, -1, 1379, -1, -1, -1, 1380, -1, 1381, -1, -1, 1382}),
/* NxS[ 496] */ // Shortest string "/t"
      new Table(27, 24, -1, new short[] {1331, -1, -1, -1, -1, 1332, 
          1214, 1333, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 1334}),
/* NxS[ 497] */ // Shortest string "/a"
      new Table(26, 14, -1, new short[] {1168, -1, 1317, -1, -1, 1318, 
          -1, 1027, -1, -1, -1, -1, 1186, 1319}),
/* NxS[ 498] */ // Shortest string "/b"
      new Table(34, 7, -1, new short[] {1312, -1, -1, -1, -1, -1, 
          1313}),
/* NxS[ 499] */ // Shortest string "/r"
      new Table(27, 14, -1, new short[] {1290, -1, -1, -1, -1, 1291, 
          -1, -1, -1, -1, -1, 1193, 1292, 1293}),
/* NxS[ 500] */ // Shortest string "/u"
      new Table(28, 16, -1, new short[] {1283, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1284}),
/* NxS[ 501] */ // Shortest string "/f"
      new Table(26, 34, -1, new short[] {1236, -1, -1, -1, -1, -1, 
          1237, -1, 1238, -1, -1, -1, -1, -1, 978, 1239, -1, 1240, -1, -1, -1, 1241, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1242, -1, 1243}),
/* NxS[ 502] */ // Shortest string "/c"
      new Table(26, 15, -1, new short[] {1212, 1213, -1, -1, -1, -1, 
          -1, 1214, 1215, -1, -1, -1, -1, -1, 1216}),
/* NxS[ 503] */ // Shortest string "/s"
      new Table(31, 33, -1, new short[] {1173, 1174, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1175, -1, 1176, -1, 1177, -1, 1178, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1179}),
/* NxS[ 504] */ // Shortest string "/m"
      new Table(32, 12, -1, new short[] {1167, -1, -1, -1, 1168, -1, 
          -1, -1, 1169, -1, -1, 599}),
/* NxS[ 505] */ // Shortest string "/p"
      new Table(32, 9, -1, new short[] {1158, -1, 1159, -1, -1, -1, 
          -1, -1, 1160}),
/* NxS[ 506] */ // Shortest string "/i"
      new Table(28, 12, -1, new short[] {1140, -1, -1, -1, -1, -1, 
          -1, -1, -1, 881, -1, 1141}),
/* NxS[ 507] */ // Shortest string "/D"
      new Table(27, 45, -1, new short[] {1101, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 646, -1, -1, -1, 1102, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1103, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1104}),
/* NxS[ 508] */ // Shortest string "/h"
      new Table(32, 1, -1, new short[] {1098}),
/* NxS[ 509] */ // Shortest string "/V"
      new Table(27, 1, -1, new short[] {1085}),
/* NxS[ 510] */ // Shortest string "/w"
      new Table(45, 1, -1, new short[] {1041}),
/* NxS[ 511] */ // Shortest string "/G"
      new Table(27, 36, -1, new short[] {1045, -1, -1, -1, -1, -1, 
          -1, 1046, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 627}),
/* NxS[ 512] */ // Shortest string "/v"
      new Table(27, 14, -1, new short[] {1036, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1037}),
/* NxS[ 513] */ // Shortest string "/P"
      new Table(32, 12, -1, new short[] {820, -1, 968, -1, -1, -1, 
          -1, -1, 969, -1, -1, 970}),
/* NxS[ 514] */ // Shortest string "/R"
      new Table(27, 47, -1, new short[] {887, -1, -1, -1, -1, 888, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 889}),
/* NxS[ 515] */ // Shortest string "/T"
      new Table(27, 8, -1, new short[] {857, -1, -1, -1, -1, 858, 
          -1, 859}),
/* NxS[ 516] */ // Shortest string "/2"
      new Table(44, 1, -1, new short[] {572}),
/* NxS[ 517] */ // Shortest string "/C"
      new Table(36, 14, -1, new short[] {832, -1, -1, -1, 833, -1, 
          -1, -1, -1, -1, -1, -1, -1, 834}),
/* NxS[ 518] */ // Shortest string "/U"
      new Table(28, 12, -1, new short[] {816, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 817}),
/* NxS[ 519] */ // Shortest string "/E"
      new Table(41, 32, -1, new short[] {775, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 776, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          628, -1, -1, -1, -1, -1, -1, -1, -1, 777}),
/* NxS[ 520] */ // Shortest string "/A"
      new Table(26, 17, -1, new short[] {719, -1, -1, 561, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 720, 721}),
/* NxS[ 521] */ // Shortest string "/M"
      new Table(32, 12, -1, new short[] {712, -1, -1, -1, -1, -1, 
          -1, -1, 666, -1, -1, 713}),
/* NxS[ 522] */ // Shortest string "/L"
      new Table(27, 45, -1, new short[] {656, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 657, -1, -1, 658, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 627, -1, -1, 
          -1, -1, -1, -1, -1, -1, 659}),
/* NxS[ 523] */ // Shortest string "/O"
      new Table(28, 10, -1, new short[] {632, -1, -1, -1, -1, -1, 
          -1, -1, 633, 634}),
/* NxS[ 524] */ // Shortest string "/N"
      new Table(27, 14, -1, new short[] {623, -1, -1, -1, -1, 624, 
          -1, -1, -1, -1, -1, -1, -1, 625}),
/* NxS[ 525] */ // Shortest string "/W"
      new Table(34, 1, -1, new short[] {616}),
/* NxS[ 526] */ // Shortest string "/I"
      new Table(28, 1, -1, new short[] {573}),
/* NxS[ 527] */ // Shortest string "/F"
      new Table(26, 15, -1, new short[] {551, -1, -1, -1, -1, -1, 
          552, -1, -1, -1, -1, -1, -1, -1, 553}),
/* NxS[ 528] */ // Shortest string "/Z"
      new Table(27, 50, -1, new short[] {537, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 538, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 539, -1, -1, 540}),
/* NxS[ 529] */ // Shortest string "/#"
      new Table(42, 1, -1, new short[] {530}),
/* NxS[ 530] */ // Shortest string "/#p"
      new Table(34, 1, -1, new short[] {531}),
/* NxS[ 531] */ // Shortest string "/#pr"
      new Table(32, 1, -1, new short[] {532}),
/* NxS[ 532] */ // Shortest string "/#pra"
      new Table(56, 1, -1, new short[] {533}),
/* NxS[ 533] */ // Shortest string "/#prag"
      new Table(41, 1, -1, new short[] {534}),
/* NxS[ 534] */ // Shortest string "/#pragm"
      new Table(32, 1, -1, new short[] {535}),
/* NxS[ 535] */ // Shortest string "/#pragma"
      new Table(68, 29, -1, new short[] {6, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          5, -1, -1, -1, -1, -1, 5}),
/* NxS[ 536] */ // Shortest string "/#pragma\x20/"
      new Table(68, 29, 536, new short[] {6, 536, 536, 536, 536, 536, 
          536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 
          5, 536, 536, -1, 536, 536, 6}),
/* NxS[ 537] */ // Shortest string "/Ze"
      new Table(34, 1, -1, new short[] {550}),
/* NxS[ 538] */ // Shortest string "/ZT"
      new Table(27, 1, -1, new short[] {548}),
/* NxS[ 539] */ // Shortest string "/ZW"
      new Table(34, 1, -1, new short[] {545}),
/* NxS[ 540] */ // Shortest string "/ZF"
      new Table(32, 1, -1, new short[] {541}),
/* NxS[ 541] */ // Shortest string "/ZFa"
      new Table(43, 1, -1, new short[] {542}),
/* NxS[ 542] */ // Shortest string "/Cul"
      new Table(26, 1, -1, new short[] {543}),
/* NxS[ 543] */ // Shortest string "/Ref"
      new Table(68, 47, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7}),
/* NxS[ 544] */ // Shortest string "/Sub|"
      new Table(10, 1, -1, new short[] {7}),
/* NxS[ 545] */ // Shortest string "/ZWr"
      new Table(43, 1, -1, new short[] {546}),
/* NxS[ 546] */ // Shortest string "/ZWri"
      new Table(31, 1, -1, new short[] {547}),
/* NxS[ 547] */ // Shortest string "/Mod"
      new Table(27, 1, -1, new short[] {543}),
/* NxS[ 548] */ // Shortest string "/ZTe"
      new Table(39, 1, -1, new short[] {549}),
/* NxS[ 549] */ // Shortest string "/ZTes"
      new Table(31, 1, -1, new short[] {543}),
/* NxS[ 550] */ // Shortest string "/Zer"
      new Table(40, 1, -1, new short[] {543}),
/* NxS[ 551] */ // Shortest string "/Fl"
      new Table(40, 1, -1, new short[] {570}),
/* NxS[ 552] */ // Shortest string "/Fa"
      new Table(26, 18, -1, new short[] {563, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 542}),
/* NxS[ 553] */ // Shortest string "/Fo"
      new Table(34, 23, -1, new short[] {554, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          543}),
/* NxS[ 554] */ // Shortest string "/For"
      new Table(47, 1, -1, new short[] {555}),
/* NxS[ 555] */ // Shortest string "/Forw"
      new Table(32, 1, -1, new short[] {556}),
/* NxS[ 556] */ // Shortest string "/Forwa"
      new Table(34, 1, -1, new short[] {557}),
/* NxS[ 557] */ // Shortest string "/Forwar"
      new Table(29, 1, -1, new short[] {558}),
/* NxS[ 558] */ // Shortest string "/Forward"
      new Table(25, 41, -1, new short[] {559, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 560}),
/* NxS[ 559] */ // Shortest string "/PrepassB"
      new Table(32, 1, -1, new short[] {562}),
/* NxS[ 560] */ // Shortest string "/ForwardA"
      new Table(29, 1, -1, new short[] {561}),
/* NxS[ 561] */ // Shortest string "/Ad"
      new Table(29, 1, -1, new short[] {543}),
/* NxS[ 562] */ // Shortest string "/Diffu"
      new Table(39, 1, -1, new short[] {547}),
/* NxS[ 563] */ // Shortest string "/Fal"
      new Table(26, 1, -1, new short[] {564}),
/* NxS[ 564] */ // Shortest string "/Fall"
      new Table(25, 1, -1, new short[] {565}),
/* NxS[ 565] */ // Shortest string "/FallB"
      new Table(32, 1, -1, new short[] {566}),
/* NxS[ 566] */ // Shortest string "/FallBa"
      new Table(38, 1, -1, new short[] {567}),
/* NxS[ 567] */ // Shortest string "/FallBac"
      new Table(35, 1, -1, new short[] {568}),
/* NxS[ 568] */ // Shortest string "/Pass"
      new Table(68, 47, -1, new short[] {10, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          9, 9, -1, 9, -1, -1, 9, 9, 9, 9, 569, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9}),
/* NxS[ 569] */ // Shortest string "/Pass|"
      new Table(10, 1, -1, new short[] {9}),
/* NxS[ 570] */ // Shortest string "/Flo"
      new Table(32, 1, -1, new short[] {571}),
/* NxS[ 571] */ // Shortest string "/Rec"
      new Table(31, 1, -1, new short[] {572}),
/* NxS[ 572] */ // Shortest string "/2D"
      new Table(68, 45, -1, new short[] {11, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 12, 12}),
/* NxS[ 573] */ // Shortest string "/In"
      new Table(31, 12, -1, new short[] {574, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 575}),
/* NxS[ 574] */ // Shortest string "/Int"
      new Table(27, 1, -1, new short[] {583}),
/* NxS[ 575] */ // Shortest string "/Inp"
      new Table(36, 1, -1, new short[] {576}),
/* NxS[ 576] */ // Shortest string "/Inpu"
      new Table(31, 1, -1, new short[] {577}),
/* NxS[ 577] */ // Shortest string "/Input"
      new Table(52, 1, -1, new short[] {578}),
/* NxS[ 578] */ // Shortest string "/InputP"
      new Table(32, 1, -1, new short[] {579}),
/* NxS[ 579] */ // Shortest string "/InputPa"
      new Table(31, 1, -1, new short[] {580}),
/* NxS[ 580] */ // Shortest string "/InputPat"
      new Table(38, 1, -1, new short[] {581}),
/* NxS[ 581] */ // Shortest string "/InputPatc"
      new Table(45, 1, -1, new short[] {582}),
/* NxS[ 582] */ // Shortest string "/int2"
      new Table(68, 45, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          13, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 14, 14}),
/* NxS[ 583] */ // Shortest string "/Inte"
      new Table(34, 1, -1, new short[] {584}),
/* NxS[ 584] */ // Shortest string "/Inter"
      new Table(26, 1, -1, new short[] {585}),
/* NxS[ 585] */ // Shortest string "/Interl"
      new Table(40, 1, -1, new short[] {586}),
/* NxS[ 586] */ // Shortest string "/Interlo"
      new Table(38, 1, -1, new short[] {587}),
/* NxS[ 587] */ // Shortest string "/Interloc"
      new Table(35, 1, -1, new short[] {588}),
/* NxS[ 588] */ // Shortest string "/Interlock"
      new Table(27, 1, -1, new short[] {589}),
/* NxS[ 589] */ // Shortest string "/Interlocke"
      new Table(29, 1, -1, new short[] {590}),
/* NxS[ 590] */ // Shortest string "/Interlocked"
      new Table(60, 19, -1, new short[] {591, -1, 592, -1, -1, 593, 
          594, -1, -1, -1, -1, 596, -1, -1, -1, -1, -1, -1, 595}),
/* NxS[ 591] */ // Shortest string "/InterlockedC"
      new Table(40, 1, -1, new short[] {607}),
/* NxS[ 592] */ // Shortest string "/InterlockedE"
      new Table(48, 1, -1, new short[] {601}),
/* NxS[ 593] */ // Shortest string "/InterlockedA"
      new Table(28, 2, -1, new short[] {600, 600}),
/* NxS[ 594] */ // Shortest string "/InterlockedM"
      new Table(32, 12, -1, new short[] {598, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 599}),
/* NxS[ 595] */ // Shortest string "/InterlockedX"
      new Table(40, 1, -1, new short[] {596}),
/* NxS[ 596] */ // Shortest string "/floo"
      new Table(34, 1, -1, new short[] {597}),
/* NxS[ 597] */ // Shortest string "/lit"
      new Table(68, 44, -1, new short[] {597, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 15}),
/* NxS[ 598] */ // Shortest string "/InterlockedMa"
      new Table(48, 1, -1, new short[] {597}),
/* NxS[ 599] */ // Shortest string "/mi"
      new Table(28, 1, -1, new short[] {597}),
/* NxS[ 600] */ // Shortest string "/fmo"
      new Table(29, 1, -1, new short[] {597}),
/* NxS[ 601] */ // Shortest string "/InterlockedEx"
      new Table(38, 1, -1, new short[] {602}),
/* NxS[ 602] */ // Shortest string "/InterlockedExc"
      new Table(45, 1, -1, new short[] {603}),
/* NxS[ 603] */ // Shortest string "/InterlockedExch"
      new Table(32, 1, -1, new short[] {604}),
/* NxS[ 604] */ // Shortest string "/InterlockedExcha"
      new Table(28, 1, -1, new short[] {605}),
/* NxS[ 605] */ // Shortest string "/InterlockedExchan"
      new Table(56, 1, -1, new short[] {606}),
/* NxS[ 606] */ // Shortest string "/nois"
      new Table(27, 1, -1, new short[] {597}),
/* NxS[ 607] */ // Shortest string "/InterlockedCo"
      new Table(41, 1, -1, new short[] {608}),
/* NxS[ 608] */ // Shortest string "/InterlockedCom"
      new Table(42, 1, -1, new short[] {609}),
/* NxS[ 609] */ // Shortest string "/InterlockedComp"
      new Table(32, 1, -1, new short[] {610}),
/* NxS[ 610] */ // Shortest string "/InterlockedCompa"
      new Table(34, 1, -1, new short[] {611}),
/* NxS[ 611] */ // Shortest string "/InterlockedCompar"
      new Table(27, 1, -1, new short[] {612}),
/* NxS[ 612] */ // Shortest string "/InterlockedCompare"
      new Table(30, 33, -1, new short[] {613, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 592}),
/* NxS[ 613] */ // Shortest string "/InterlockedCompareS"
      new Table(31, 1, -1, new short[] {614}),
/* NxS[ 614] */ // Shortest string "/InterlockedCompareSt"
      new Table(40, 1, -1, new short[] {615}),
/* NxS[ 615] */ // Shortest string "/InterlockedCompareSto"
      new Table(34, 1, -1, new short[] {606}),
/* NxS[ 616] */ // Shortest string "/Wr"
      new Table(43, 1, -1, new short[] {617}),
/* NxS[ 617] */ // Shortest string "/Wri"
      new Table(31, 1, -1, new short[] {618}),
/* NxS[ 618] */ // Shortest string "/Writ"
      new Table(27, 1, -1, new short[] {619}),
/* NxS[ 619] */ // Shortest string "/Read"
      new Table(66, 1, -1, new short[] {620}),
/* NxS[ 620] */ // Shortest string "/ReadM"
      new Table(32, 1, -1, new short[] {621}),
/* NxS[ 621] */ // Shortest string "/ReadMa"
      new Table(39, 1, -1, new short[] {622}),
/* NxS[ 622] */ // Shortest string "/ReadMas"
      new Table(35, 1, -1, new short[] {543}),
/* NxS[ 623] */ // Shortest string "/Ne"
      new Table(51, 1, -1, new short[] {630}),
/* NxS[ 624] */ // Shortest string "/Na"
      new Table(41, 1, -1, new short[] {547}),
/* NxS[ 625] */ // Shortest string "/No"
      new Table(31, 1, -1, new short[] {626}),
/* NxS[ 626] */ // Shortest string "/Not"
      new Table(62, 1, -1, new short[] {627}),
/* NxS[ 627] */ // Shortest string "/GE"
      new Table(63, 1, -1, new short[] {628}),
/* NxS[ 628] */ // Shortest string "/Eq"
      new Table(36, 1, -1, new short[] {629}),
/* NxS[ 629] */ // Shortest string "/Equ"
      new Table(32, 1, -1, new short[] {542}),
/* NxS[ 630] */ // Shortest string "/Nev"
      new Table(27, 1, -1, new short[] {631}),
/* NxS[ 631] */ // Shortest string "/Neve"
      new Table(34, 1, -1, new short[] {543}),
/* NxS[ 632] */ // Shortest string "/On"
      new Table(27, 1, -1, new short[] {638}),
/* NxS[ 633] */ // Shortest string "/Ou"
      new Table(31, 1, -1, new short[] {637}),
/* NxS[ 634] */ // Shortest string "/Of"
      new Table(37, 1, -1, new short[] {635}),
/* NxS[ 635] */ // Shortest string "/Off"
      new Table(39, 1, -1, new short[] {636}),
/* NxS[ 636] */ // Shortest string "/Offs"
      new Table(27, 1, -1, new short[] {549}),
/* NxS[ 637] */ // Shortest string "/Out"
      new Table(42, 1, -1, new short[] {575}),
/* NxS[ 638] */ // Shortest string "/One"
      new Table(66, 49, -1, new short[] {639, -1, 8, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}),
/* NxS[ 639] */ // Shortest string "/OneM"
      new Table(43, 1, -1, new short[] {640}),
/* NxS[ 640] */ // Shortest string "/OneMi"
      new Table(28, 1, -1, new short[] {641}),
/* NxS[ 641] */ // Shortest string "/OneMin"
      new Table(36, 1, -1, new short[] {642}),
/* NxS[ 642] */ // Shortest string "/OneMinu"
      new Table(39, 1, -1, new short[] {643}),
/* NxS[ 643] */ // Shortest string "/OneMinus"
      new Table(30, 15, -1, new short[] {644, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 645}),
/* NxS[ 644] */ // Shortest string "/OneMinusS"
      new Table(34, 1, -1, new short[] {655}),
/* NxS[ 645] */ // Shortest string "/OneMinusD"
      new Table(39, 1, -1, new short[] {646}),
/* NxS[ 646] */ // Shortest string "/Ds"
      new Table(31, 1, -1, new short[] {647}),
/* NxS[ 647] */ // Shortest string "/Src"
      new Table(60, 6, -1, new short[] {648, -1, -1, -1, -1, 649}),
/* NxS[ 648] */ // Shortest string "/SrcC"
      new Table(40, 1, -1, new short[] {653}),
/* NxS[ 649] */ // Shortest string "/SrcA"
      new Table(26, 1, -1, new short[] {650}),
/* NxS[ 650] */ // Shortest string "/SrcAl"
      new Table(42, 1, -1, new short[] {651}),
/* NxS[ 651] */ // Shortest string "/SrcAlp"
      new Table(45, 1, -1, new short[] {652}),
/* NxS[ 652] */ // Shortest string "/SrcAlph"
      new Table(32, 1, -1, new short[] {543}),
/* NxS[ 653] */ // Shortest string "/SrcCo"
      new Table(26, 1, -1, new short[] {654}),
/* NxS[ 654] */ // Shortest string "/SrcCol"
      new Table(40, 1, -1, new short[] {631}),
/* NxS[ 655] */ // Shortest string "/Sr"
      new Table(38, 1, -1, new short[] {647}),
/* NxS[ 656] */ // Shortest string "/Le"
      new Table(39, 1, -1, new short[] {711}),
/* NxS[ 657] */ // Shortest string "/Lo"
      new Table(56, 1, -1, new short[] {674}),
/* NxS[ 658] */ // Shortest string "/Li"
      new Table(28, 29, -1, new short[] {660, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 661}),
/* NxS[ 659] */ // Shortest string "/LO"
      new Table(44, 1, -1, new short[] {543}),
/* NxS[ 660] */ // Shortest string "/Lin"
      new Table(27, 1, -1, new short[] {668}),
/* NxS[ 661] */ // Shortest string "/Lig"
      new Table(45, 1, -1, new short[] {662}),
/* NxS[ 662] */ // Shortest string "/Ligh"
      new Table(31, 1, -1, new short[] {663}),
/* NxS[ 663] */ // Shortest string "/Light"
      new Table(43, 24, -1, new short[] {664, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 665}),
/* NxS[ 664] */ // Shortest string "/Lighti"
      new Table(28, 1, -1, new short[] {667}),
/* NxS[ 665] */ // Shortest string "/LightM"
      new Table(40, 1, -1, new short[] {666}),
/* NxS[ 666] */ // Shortest string "/Mo"
      new Table(29, 1, -1, new short[] {547}),
/* NxS[ 667] */ // Shortest string "/Lightin"
      new Table(56, 1, -1, new short[] {543}),
/* NxS[ 668] */ // Shortest string "/Line"
      new Table(30, 1, -1, new short[] {669}),
/* NxS[ 669] */ // Shortest string "/LineS"
      new Table(31, 1, -1, new short[] {670}),
/* NxS[ 670] */ // Shortest string "/LineSt"
      new Table(34, 1, -1, new short[] {671}),
/* NxS[ 671] */ // Shortest string "/LineStr"
      new Table(27, 1, -1, new short[] {672}),
/* NxS[ 672] */ // Shortest string "/LineStre"
      new Table(32, 1, -1, new short[] {673}),
/* NxS[ 673] */ // Shortest string "/LineStrea"
      new Table(41, 1, -1, new short[] {582}),
/* NxS[ 674] */ // Shortest string "/Log"
      new Table(43, 1, -1, new short[] {675}),
/* NxS[ 675] */ // Shortest string "/Logi"
      new Table(38, 1, -1, new short[] {676}),
/* NxS[ 676] */ // Shortest string "/Logic"
      new Table(32, 1, -1, new short[] {677}),
/* NxS[ 677] */ // Shortest string "/Logica"
      new Table(26, 1, -1, new short[] {678}),
/* NxS[ 678] */ // Shortest string "/Logical"
      new Table(30, 49, -1, new short[] {636, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 679, -1, 680, -1, -1, 681, -1, -1, 
          -1, -1, -1, 682, 683, -1, 684, -1, -1, -1, 654}),
/* NxS[ 679] */ // Shortest string "/LogicalC"
      new Table(26, 15, -1, new short[] {706, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 707}),
/* NxS[ 680] */ // Shortest string "/LogicalE"
      new Table(63, 1, -1, new short[] {703}),
/* NxS[ 681] */ // Shortest string "/LogicalA"
      new Table(28, 1, -1, new short[] {702}),
/* NxS[ 682] */ // Shortest string "/LogicalO"
      new Table(34, 1, -1, new short[] {691}),
/* NxS[ 683] */ // Shortest string "/LogicalN"
      new Table(32, 9, -1, new short[] {688, -1, -1, -1, -1, -1, 
          -1, -1, 689}),
/* NxS[ 684] */ // Shortest string "/LogicalI"
      new Table(28, 1, -1, new short[] {685}),
/* NxS[ 685] */ // Shortest string "/LogicalIn"
      new Table(51, 1, -1, new short[] {686}),
/* NxS[ 686] */ // Shortest string "/LogicalInv"
      new Table(27, 1, -1, new short[] {687}),
/* NxS[ 687] */ // Shortest string "/LogicalInve"
      new Table(34, 1, -1, new short[] {549}),
/* NxS[ 688] */ // Shortest string "/LogicalNa"
      new Table(28, 1, -1, new short[] {561}),
/* NxS[ 689] */ // Shortest string "/LogicalNo"
      new Table(34, 7, -1, new short[] {543, -1, -1, -1, -1, -1, 
          690}),
/* NxS[ 690] */ // Shortest string "/LogicalNoo"
      new Table(42, 1, -1, new short[] {543}),
/* NxS[ 691] */ // Shortest string "/LogicalOr"
      new Table(53, 62, -1, new short[] {692, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, 693, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
          7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7}),
/* NxS[ 692] */ // Shortest string "/LogicalOrR"
      new Table(27, 1, -1, new short[] {699}),
/* NxS[ 693] */ // Shortest string "/LogicalOrI"
      new Table(28, 1, -1, new short[] {694}),
/* NxS[ 694] */ // Shortest string "/LogicalOrIn"
      new Table(51, 1, -1, new short[] {695}),
/* NxS[ 695] */ // Shortest string "/LogicalOrInv"
      new Table(27, 1, -1, new short[] {696}),
/* NxS[ 696] */ // Shortest string "/LogicalOrInve"
      new Table(34, 1, -1, new short[] {697}),
/* NxS[ 697] */ // Shortest string "/LogicalOrInver"
      new Table(31, 1, -1, new short[] {698}),
/* NxS[ 698] */ // Shortest string "/LogicalOrInvert"
      new Table(27, 1, -1, new short[] {561}),
/* NxS[ 699] */ // Shortest string "/LogicalOrRe"
      new Table(51, 1, -1, new short[] {700}),
/* NxS[ 700] */ // Shortest string "/LogicalOrRev"
      new Table(27, 1, -1, new short[] {701}),
/* NxS[ 701] */ // Shortest string "/LogicalOrReve"
      new Table(34, 1, -1, new short[] {562}),
/* NxS[ 702] */ // Shortest string "/LogicalAn"
      new Table(29, 1, -1, new short[] {691}),
/* NxS[ 703] */ // Shortest string "/LogicalEq"
      new Table(36, 1, -1, new short[] {704}),
/* NxS[ 704] */ // Shortest string "/LogicalEqu"
      new Table(43, 1, -1, new short[] {705}),
/* NxS[ 705] */ // Shortest string "/LogicalEqui"
      new Table(51, 1, -1, new short[] {543}),
/* NxS[ 706] */ // Shortest string "/LogicalCl"
      new Table(27, 1, -1, new short[] {710}),
/* NxS[ 707] */ // Shortest string "/LogicalCo"
      new Table(42, 1, -1, new short[] {708}),
/* NxS[ 708] */ // Shortest string "/LogicalCop"
      new Table(50, 1, -1, new short[] {709}),
/* NxS[ 709] */ // Shortest string "/LogicalCopy"
      new Table(68, 47, -1, new short[] {8, -1, -1, -1, -1, -1, 
          693, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7}),
/* NxS[ 710] */ // Shortest string "/Specul"
      new Table(32, 1, -1, new short[] {631}),
/* NxS[ 711] */ // Shortest string "/Les"
      new Table(39, 1, -1, new short[] {543}),
/* NxS[ 712] */ // Shortest string "/Ma"
      new Table(31, 18, -1, new short[] {714, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 543}),
/* NxS[ 713] */ // Shortest string "/Mi"
      new Table(28, 1, -1, new short[] {543}),
/* NxS[ 714] */ // Shortest string "/Mat"
      new Table(27, 1, -1, new short[] {715}),
/* NxS[ 715] */ // Shortest string "/Mate"
      new Table(34, 1, -1, new short[] {716}),
/* NxS[ 716] */ // Shortest string "/Mater"
      new Table(43, 1, -1, new short[] {717}),
/* NxS[ 717] */ // Shortest string "/Materi"
      new Table(32, 1, -1, new short[] {718}),
/* NxS[ 718] */ // Shortest string "/Stenci"
      new Table(26, 1, -1, new short[] {568}),
/* NxS[ 719] */ // Shortest string "/Al"
      new Table(26, 22, -1, new short[] {744, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 745, -1, -1, -1, -1, 746}),
/* NxS[ 720] */ // Shortest string "/Am"
      new Table(33, 1, -1, new short[] {741}),
/* NxS[ 721] */ // Shortest string "/Ap"
      new Table(42, 1, -1, new short[] {722}),
/* NxS[ 722] */ // Shortest string "/App"
      new Table(27, 1, -1, new short[] {723}),
/* NxS[ 723] */ // Shortest string "/Appe"
      new Table(28, 1, -1, new short[] {724}),
/* NxS[ 724] */ // Shortest string "/Appen"
      new Table(29, 1, -1, new short[] {725}),
/* NxS[ 725] */ // Shortest string "/Append"
      new Table(30, 1, -1, new short[] {726}),
/* NxS[ 726] */ // Shortest string "/RWS"
      new Table(31, 1, -1, new short[] {727}),
/* NxS[ 727] */ // Shortest string "/RWSt"
      new Table(34, 1, -1, new short[] {728}),
/* NxS[ 728] */ // Shortest string "/Str"
      new Table(36, 1, -1, new short[] {729}),
/* NxS[ 729] */ // Shortest string "/Stru"
      new Table(38, 1, -1, new short[] {730}),
/* NxS[ 730] */ // Shortest string "/Struc"
      new Table(31, 1, -1, new short[] {731}),
/* NxS[ 731] */ // Shortest string "/Struct"
      new Table(36, 1, -1, new short[] {732}),
/* NxS[ 732] */ // Shortest string "/Structu"
      new Table(34, 1, -1, new short[] {733}),
/* NxS[ 733] */ // Shortest string "/Structur"
      new Table(27, 1, -1, new short[] {734}),
/* NxS[ 734] */ // Shortest string "/Structure"
      new Table(29, 1, -1, new short[] {735}),
/* NxS[ 735] */ // Shortest string "/Structured"
      new Table(25, 1, -1, new short[] {736}),
/* NxS[ 736] */ // Shortest string "/StructuredB"
      new Table(36, 1, -1, new short[] {737}),
/* NxS[ 737] */ // Shortest string "/RWBu"
      new Table(37, 1, -1, new short[] {738}),
/* NxS[ 738] */ // Shortest string "/RWBuf"
      new Table(37, 1, -1, new short[] {739}),
/* NxS[ 739] */ // Shortest string "/RWBuff"
      new Table(27, 1, -1, new short[] {740}),
/* NxS[ 740] */ // Shortest string "/vecto"
      new Table(34, 1, -1, new short[] {582}),
/* NxS[ 741] */ // Shortest string "/Amb"
      new Table(43, 1, -1, new short[] {742}),
/* NxS[ 742] */ // Shortest string "/Ambi"
      new Table(27, 1, -1, new short[] {743}),
/* NxS[ 743] */ // Shortest string "/Ambie"
      new Table(28, 1, -1, new short[] {549}),
/* NxS[ 744] */ // Shortest string "/All"
      new Table(66, 1, -1, new short[] {750}),
/* NxS[ 745] */ // Shortest string "/Alp"
      new Table(45, 1, -1, new short[] {748}),
/* NxS[ 746] */ // Shortest string "/Alw"
      new Table(32, 1, -1, new short[] {747}),
/* NxS[ 747] */ // Shortest string "/Alwa"
      new Table(50, 1, -1, new short[] {711}),
/* NxS[ 748] */ // Shortest string "/Alph"
      new Table(32, 1, -1, new short[] {749}),
/* NxS[ 749] */ // Shortest string "/Alpha"
      new Table(55, 1, -1, new short[] {538}),
/* NxS[ 750] */ // Shortest string "/AllM"
      new Table(27, 1, -1, new short[] {751}),
/* NxS[ 751] */ // Shortest string "/AllMe"
      new Table(41, 1, -1, new short[] {752}),
/* NxS[ 752] */ // Shortest string "/AllMem"
      new Table(40, 1, -1, new short[] {753}),
/* NxS[ 753] */ // Shortest string "/AllMemo"
      new Table(34, 1, -1, new short[] {754}),
/* NxS[ 754] */ // Shortest string "/AllMemor"
      new Table(50, 1, -1, new short[] {755}),
/* NxS[ 755] */ // Shortest string "/AllMemory"
      new Table(25, 1, -1, new short[] {756}),
/* NxS[ 756] */ // Shortest string "/AllMemoryB"
      new Table(32, 1, -1, new short[] {757}),
/* NxS[ 757] */ // Shortest string "/AllMemoryBa"
      new Table(34, 1, -1, new short[] {758}),
/* NxS[ 758] */ // Shortest string "/AllMemoryBar"
      new Table(34, 1, -1, new short[] {759}),
/* NxS[ 759] */ // Shortest string "/AllMemoryBarr"
      new Table(43, 1, -1, new short[] {760}),
/* NxS[ 760] */ // Shortest string "/AllMemoryBarri"
      new Table(27, 1, -1, new short[] {761}),
/* NxS[ 761] */ // Shortest string "/AllMemoryBarrie"
      new Table(34, 1, -1, new short[] {762}),
/* NxS[ 762] */ // Shortest string "/AllMemoryBarrier"
      new Table(68, 44, -1, new short[] {597, -1, -1, -1, -1, 763, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 15}),
/* NxS[ 763] */ // Shortest string "/AllMemoryBarrierW"
      new Table(43, 1, -1, new short[] {764}),
/* NxS[ 764] */ // Shortest string "/AllMemoryBarrierWi"
      new Table(31, 1, -1, new short[] {765}),
/* NxS[ 765] */ // Shortest string "/AllMemoryBarrierWit"
      new Table(45, 1, -1, new short[] {766}),
/* NxS[ 766] */ // Shortest string "/AllMemoryBarrierWith"
      new Table(49, 1, -1, new short[] {767}),
/* NxS[ 767] */ // Shortest string "/AllMemoryBarrierWithG"
      new Table(34, 1, -1, new short[] {768}),
/* NxS[ 768] */ // Shortest string "/AllMemoryBarrierWithGr"
      new Table(40, 1, -1, new short[] {769}),
/* NxS[ 769] */ // Shortest string "/AllMemoryBarrierWithGro"
      new Table(36, 1, -1, new short[] {770}),
/* NxS[ 770] */ // Shortest string "/AllMemoryBarrierWithGrou"
      new Table(42, 1, -1, new short[] {771}),
/* NxS[ 771] */ // Shortest string "/AllMemoryBarrierWithGroup"
      new Table(30, 1, -1, new short[] {772}),
/* NxS[ 772] */ // Shortest string "/AllMemoryBarrierWithGroupS"
      new Table(50, 1, -1, new short[] {773}),
/* NxS[ 773] */ // Shortest string "/AllMemoryBarrierWithGroupSy"
      new Table(28, 1, -1, new short[] {774}),
/* NxS[ 774] */ // Shortest string "/fra"
      new Table(38, 1, -1, new short[] {597}),
/* NxS[ 775] */ // Shortest string "/Em"
      new Table(43, 1, -1, new short[] {812}),
/* NxS[ 776] */ // Shortest string "/Ev"
      new Table(32, 1, -1, new short[] {780}),
/* NxS[ 777] */ // Shortest string "/EN"
      new Table(44, 1, -1, new short[] {778}),
/* NxS[ 778] */ // Shortest string "/END"
      new Table(60, 1, -1, new short[] {779}),
/* NxS[ 779] */ // Shortest string "/ENDC"
      new Table(49, 1, -1, new short[] {568}),
/* NxS[ 780] */ // Shortest string "/Eva"
      new Table(26, 1, -1, new short[] {781}),
/* NxS[ 781] */ // Shortest string "/Eval"
      new Table(36, 1, -1, new short[] {782}),
/* NxS[ 782] */ // Shortest string "/Evalu"
      new Table(32, 1, -1, new short[] {783}),
/* NxS[ 783] */ // Shortest string "/Evalua"
      new Table(31, 1, -1, new short[] {784}),
/* NxS[ 784] */ // Shortest string "/Evaluat"
      new Table(27, 1, -1, new short[] {785}),
/* NxS[ 785] */ // Shortest string "/Evaluate"
      new Table(65, 1, -1, new short[] {786}),
/* NxS[ 786] */ // Shortest string "/EvaluateA"
      new Table(31, 1, -1, new short[] {787}),
/* NxS[ 787] */ // Shortest string "/EvaluateAt"
      new Table(31, 1, -1, new short[] {788}),
/* NxS[ 788] */ // Shortest string "/EvaluateAtt"
      new Table(34, 1, -1, new short[] {789}),
/* NxS[ 789] */ // Shortest string "/EvaluateAttr"
      new Table(43, 1, -1, new short[] {790}),
/* NxS[ 790] */ // Shortest string "/EvaluateAttri"
      new Table(33, 1, -1, new short[] {791}),
/* NxS[ 791] */ // Shortest string "/EvaluateAttrib"
      new Table(36, 1, -1, new short[] {792}),
/* NxS[ 792] */ // Shortest string "/EvaluateAttribu"
      new Table(31, 1, -1, new short[] {793}),
/* NxS[ 793] */ // Shortest string "/EvaluateAttribut"
      new Table(27, 1, -1, new short[] {794}),
/* NxS[ 794] */ // Shortest string "/EvaluateAttribute"
      new Table(30, 36, -1, new short[] {795, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 796}),
/* NxS[ 795] */ // Shortest string "/EvaluateAttributeS"
      new Table(28, 1, -1, new short[] {808}),
/* NxS[ 796] */ // Shortest string "/EvaluateAttributeA"
      new Table(31, 1, -1, new short[] {797}),
/* NxS[ 797] */ // Shortest string "/EvaluateAttributeAt"
      new Table(30, 31, -1, new short[] {798, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 799}),
/* NxS[ 798] */ // Shortest string "/EvaluateAttributeAtS"
      new Table(32, 1, -1, new short[] {805}),
/* NxS[ 799] */ // Shortest string "/EvaluateAttributeAtC"
      new Table(27, 1, -1, new short[] {800}),
/* NxS[ 800] */ // Shortest string "/EvaluateAttributeAtCe"
      new Table(28, 1, -1, new short[] {801}),
/* NxS[ 801] */ // Shortest string "/EvaluateAttributeAtCen"
      new Table(31, 1, -1, new short[] {802}),
/* NxS[ 802] */ // Shortest string "/EvaluateAttributeAtCent"
      new Table(34, 1, -1, new short[] {803}),
/* NxS[ 803] */ // Shortest string "/EvaluateAttributeAtCentr"
      new Table(40, 1, -1, new short[] {804}),
/* NxS[ 804] */ // Shortest string "/EvaluateAttributeAtCentro"
      new Table(43, 1, -1, new short[] {600}),
/* NxS[ 805] */ // Shortest string "/EvaluateAttributeAtSa"
      new Table(41, 1, -1, new short[] {806}),
/* NxS[ 806] */ // Shortest string "/EvaluateAttributeAtSam"
      new Table(42, 1, -1, new short[] {807}),
/* NxS[ 807] */ // Shortest string "/asdoub"
      new Table(26, 1, -1, new short[] {606}),
/* NxS[ 808] */ // Shortest string "/EvaluateAttributeSn"
      new Table(32, 1, -1, new short[] {809}),
/* NxS[ 809] */ // Shortest string "/EvaluateAttributeSna"
      new Table(42, 1, -1, new short[] {810}),
/* NxS[ 810] */ // Shortest string "/EvaluateAttributeSnap"
      new Table(42, 1, -1, new short[] {811}),
/* NxS[ 811] */ // Shortest string "/EvaluateAttributeSnapp"
      new Table(27, 1, -1, new short[] {600}),
/* NxS[ 812] */ // Shortest string "/Emi"
      new Table(39, 1, -1, new short[] {813}),
/* NxS[ 813] */ // Shortest string "/Emis"
      new Table(39, 1, -1, new short[] {814}),
/* NxS[ 814] */ // Shortest string "/Emiss"
      new Table(43, 1, -1, new short[] {815}),
/* NxS[ 815] */ // Shortest string "/Emissi"
      new Table(40, 1, -1, new short[] {713}),
/* NxS[ 816] */ // Shortest string "/Un"
      new Table(42, 1, -1, new short[] {822}),
/* NxS[ 817] */ // Shortest string "/Us"
      new Table(27, 1, -1, new short[] {818}),
/* NxS[ 818] */ // Shortest string "/Use"
      new Table(52, 1, -1, new short[] {819}),
/* NxS[ 819] */ // Shortest string "/UseP"
      new Table(32, 1, -1, new short[] {820}),
/* NxS[ 820] */ // Shortest string "/Pa"
      new Table(39, 1, -1, new short[] {821}),
/* NxS[ 821] */ // Shortest string "/Pas"
      new Table(39, 1, -1, new short[] {568}),
/* NxS[ 822] */ // Shortest string "/Unp"
      new Table(32, 1, -1, new short[] {823}),
/* NxS[ 823] */ // Shortest string "/Unpa"
      new Table(38, 1, -1, new short[] {824}),
/* NxS[ 824] */ // Shortest string "/Unpac"
      new Table(35, 1, -1, new short[] {825}),
/* NxS[ 825] */ // Shortest string "/Unpack"
      new Table(72, 1, -1, new short[] {826}),
/* NxS[ 826] */ // Shortest string "/UnpackN"
      new Table(40, 1, -1, new short[] {827}),
/* NxS[ 827] */ // Shortest string "/UnpackNo"
      new Table(34, 1, -1, new short[] {828}),
/* NxS[ 828] */ // Shortest string "/UnpackNor"
      new Table(41, 1, -1, new short[] {829}),
/* NxS[ 829] */ // Shortest string "/UnpackNorm"
      new Table(32, 1, -1, new short[] {830}),
/* NxS[ 830] */ // Shortest string "/UnpackNorma"
      new Table(26, 1, -1, new short[] {831}),
/* NxS[ 831] */ // Shortest string "/UnpackNormal"
      new Table(68, 44, -1, new short[] {831, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 16}),
/* NxS[ 832] */ // Shortest string "/Cu"
      new Table(26, 8, -1, new short[] {542, -1, -1, -1, -1, -1, 
          -1, 856}),
/* NxS[ 833] */ // Shortest string "/Co"
      new Table(26, 16, -1, new short[] {841, -1, 842, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 843}),
/* NxS[ 834] */ // Shortest string "/CG"
      new Table(52, 1, -1, new short[] {835}),
/* NxS[ 835] */ // Shortest string "/CGP"
      new Table(53, 1, -1, new short[] {836}),
/* NxS[ 836] */ // Shortest string "/CGPR"
      new Table(71, 1, -1, new short[] {837}),
/* NxS[ 837] */ // Shortest string "/CGPRO"
      new Table(49, 1, -1, new short[] {838}),
/* NxS[ 838] */ // Shortest string "/CGPROG"
      new Table(53, 1, -1, new short[] {839}),
/* NxS[ 839] */ // Shortest string "/CGPROGR"
      new Table(65, 1, -1, new short[] {840}),
/* NxS[ 840] */ // Shortest string "/CGPROGRA"
      new Table(66, 1, -1, new short[] {568}),
/* NxS[ 841] */ // Shortest string "/Col"
      new Table(40, 1, -1, new short[] {849}),
/* NxS[ 842] */ // Shortest string "/Con"
      new Table(39, 1, -1, new short[] {846}),
/* NxS[ 843] */ // Shortest string "/Com"
      new Table(33, 10, -1, new short[] {844, -1, -1, -1, -1, -1, 
          -1, -1, -1, 543}),
/* NxS[ 844] */ // Shortest string "/comb"
      new Table(43, 1, -1, new short[] {845}),
/* NxS[ 845] */ // Shortest string "/combi"
      new Table(28, 1, -1, new short[] {547}),
/* NxS[ 846] */ // Shortest string "/Cons"
      new Table(36, 1, -1, new short[] {847}),
/* NxS[ 847] */ // Shortest string "/Consu"
      new Table(41, 1, -1, new short[] {848}),
/* NxS[ 848] */ // Shortest string "/Consum"
      new Table(27, 1, -1, new short[] {725}),
/* NxS[ 849] */ // Shortest string "/Colo"
      new Table(34, 1, -1, new short[] {850}),
/* NxS[ 850] */ // Shortest string "/Color"
      new Table(66, 47, -1, new short[] {851, -1, 11, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 12, 12}),
/* NxS[ 851] */ // Shortest string "/ColorM"
      new Table(32, 1, -1, new short[] {852}),
/* NxS[ 852] */ // Shortest string "/ColorMa"
      new Table(31, 9, -1, new short[] {853, -1, -1, -1, -1, -1, 
          -1, -1, 622}),
/* NxS[ 853] */ // Shortest string "/ColorMat"
      new Table(27, 1, -1, new short[] {854}),
/* NxS[ 854] */ // Shortest string "/ColorMate"
      new Table(34, 1, -1, new short[] {855}),
/* NxS[ 855] */ // Shortest string "/ColorMater"
      new Table(43, 1, -1, new short[] {629}),
/* NxS[ 856] */ // Shortest string "/Cub"
      new Table(27, 1, -1, new short[] {572}),
/* NxS[ 857] */ // Shortest string "/Te"
      new Table(48, 1, -1, new short[] {864}),
/* NxS[ 858] */ // Shortest string "/Ta"
      new Table(56, 1, -1, new short[] {821}),
/* NxS[ 859] */ // Shortest string "/Tr"
      new Table(43, 1, -1, new short[] {860}),
/* NxS[ 860] */ // Shortest string "/Tri"
      new Table(32, 1, -1, new short[] {861}),
/* NxS[ 861] */ // Shortest string "/Tria"
      new Table(28, 1, -1, new short[] {862}),
/* NxS[ 862] */ // Shortest string "/Trian"
      new Table(56, 1, -1, new short[] {863}),
/* NxS[ 863] */ // Shortest string "/Triang"
      new Table(26, 1, -1, new short[] {660}),
/* NxS[ 864] */ // Shortest string "/Tex"
      new Table(31, 1, -1, new short[] {865}),
/* NxS[ 865] */ // Shortest string "/Text"
      new Table(36, 1, -1, new short[] {866}),
/* NxS[ 866] */ // Shortest string "/Textu"
      new Table(34, 1, -1, new short[] {867}),
/* NxS[ 867] */ // Shortest string "/Textur"
      new Table(27, 1, -1, new short[] {868}),
/* NxS[ 868] */ // Shortest string "/Texture"
      new Table(57, 4, -1, new short[] {869, 870, 871, 872}),
/* NxS[ 869] */ // Shortest string "/Texture1"
      new Table(44, 1, -1, new short[] {885}),
/* NxS[ 870] */ // Shortest string "/Texture2"
      new Table(44, 1, -1, new short[] {883}),
/* NxS[ 871] */ // Shortest string "/Texture3"
      new Table(44, 1, -1, new short[] {882}),
/* NxS[ 872] */ // Shortest string "/TextureC"
      new Table(36, 1, -1, new short[] {873}),
/* NxS[ 873] */ // Shortest string "/TextureCu"
      new Table(33, 1, -1, new short[] {874}),
/* NxS[ 874] */ // Shortest string "/TextureCub"
      new Table(27, 1, -1, new short[] {875}),
/* NxS[ 875] */ // Shortest string "/TextureCube"
      new Table(65, 50, -1, new short[] {877, -1, -1, 17, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 17, 17, -1, 17, -1, -1, 17, 17, 17, 17, 876, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 876] */ // Shortest string "/do|"
      new Table(10, 1, -1, new short[] {17}),
/* NxS[ 877] */ // Shortest string "/Texture1DA"
      new Table(34, 1, -1, new short[] {878}),
/* NxS[ 878] */ // Shortest string "/Texture1DAr"
      new Table(34, 1, -1, new short[] {879}),
/* NxS[ 879] */ // Shortest string "/Texture1DArr"
      new Table(32, 1, -1, new short[] {880}),
/* NxS[ 880] */ // Shortest string "/Texture1DArra"
      new Table(50, 1, -1, new short[] {881}),
/* NxS[ 881] */ // Shortest string "/if"
      new Table(68, 47, -1, new short[] {17, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          17, 17, -1, 17, -1, -1, 17, 17, 17, 17, 876, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 882] */ // Shortest string "/Buffer"
      new Table(68, 47, -1, new short[] {18, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          18, 17, -1, 17, -1, -1, 18, 17, 17, 17, 876, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 883] */ // Shortest string "/Texture2D"
      new Table(65, 50, -1, new short[] {877, 884, -1, 18, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 18, 17, -1, 17, -1, -1, 18, 17, 17, 17, 876, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 884] */ // Shortest string "/Texture2DM"
      new Table(30, 1, -1, new short[] {885}),
/* NxS[ 885] */ // Shortest string "/Texture1D"
      new Table(65, 50, -1, new short[] {877, -1, -1, 18, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 18, 17, -1, 17, -1, -1, 18, 17, 17, 17, 876, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 886] */ // Shortest string ""
      new Table(50, 1, -1, new short[] {882}),
/* NxS[ 887] */ // Shortest string "/Re"
      new Table(28, 36, -1, new short[] {941, -1, -1, -1, 942, -1, 
          -1, -1, -1, 543, 571, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 943, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 944}),
/* NxS[ 888] */ // Shortest string "/Ra"
      new Table(28, 12, -1, new short[] {914, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 915}),
/* NxS[ 889] */ // Shortest string "/RW"
      new Table(25, 31, -1, new short[] {890, -1, -1, -1, -1, 726, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 891}),
/* NxS[ 890] */ // Shortest string "/RWB"
      new Table(36, 15, -1, new short[] {737, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 905}),
/* NxS[ 891] */ // Shortest string "/RWT"
      new Table(27, 1, -1, new short[] {892}),
/* NxS[ 892] */ // Shortest string "/RWTe"
      new Table(48, 1, -1, new short[] {893}),
/* NxS[ 893] */ // Shortest string "/RWTex"
      new Table(31, 1, -1, new short[] {894}),
/* NxS[ 894] */ // Shortest string "/RWText"
      new Table(36, 1, -1, new short[] {895}),
/* NxS[ 895] */ // Shortest string "/RWTextu"
      new Table(34, 1, -1, new short[] {896}),
/* NxS[ 896] */ // Shortest string "/RWTextur"
      new Table(27, 1, -1, new short[] {897}),
/* NxS[ 897] */ // Shortest string "/RWTexture"
      new Table(57, 3, -1, new short[] {898, 898, 899}),
/* NxS[ 898] */ // Shortest string "/RWTexture1"
      new Table(44, 1, -1, new short[] {900}),
/* NxS[ 899] */ // Shortest string "/sampler2"
      new Table(44, 1, -1, new short[] {582}),
/* NxS[ 900] */ // Shortest string "/RWTexture1D"
      new Table(65, 48, -1, new short[] {901, -1, -1, 13, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 13, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 14, 14}),
/* NxS[ 901] */ // Shortest string "/RWTexture1DA"
      new Table(34, 1, -1, new short[] {902}),
/* NxS[ 902] */ // Shortest string "/RWTexture1DAr"
      new Table(34, 1, -1, new short[] {903}),
/* NxS[ 903] */ // Shortest string "/RWTexture1DArr"
      new Table(32, 1, -1, new short[] {904}),
/* NxS[ 904] */ // Shortest string "/RWTexture1DArra"
      new Table(50, 1, -1, new short[] {582}),
/* NxS[ 905] */ // Shortest string "/By"
      new Table(31, 1, -1, new short[] {906}),
/* NxS[ 906] */ // Shortest string "/Byt"
      new Table(27, 1, -1, new short[] {907}),
/* NxS[ 907] */ // Shortest string "/Byte"
      new Table(65, 1, -1, new short[] {908}),
/* NxS[ 908] */ // Shortest string "/ByteA"
      new Table(29, 1, -1, new short[] {909}),
/* NxS[ 909] */ // Shortest string "/ByteAd"
      new Table(29, 1, -1, new short[] {910}),
/* NxS[ 910] */ // Shortest string "/ByteAdd"
      new Table(34, 1, -1, new short[] {911}),
/* NxS[ 911] */ // Shortest string "/ByteAddr"
      new Table(27, 1, -1, new short[] {912}),
/* NxS[ 912] */ // Shortest string "/ByteAddre"
      new Table(39, 1, -1, new short[] {913}),
/* NxS[ 913] */ // Shortest string "/ByteAddres"
      new Table(39, 1, -1, new short[] {735}),
/* NxS[ 914] */ // Shortest string "/Ran"
      new Table(56, 1, -1, new short[] {927}),
/* NxS[ 915] */ // Shortest string "/Ras"
      new Table(31, 1, -1, new short[] {916}),
/* NxS[ 916] */ // Shortest string "/Rast"
      new Table(27, 1, -1, new short[] {917}),
/* NxS[ 917] */ // Shortest string "/Raste"
      new Table(34, 1, -1, new short[] {918}),
/* NxS[ 918] */ // Shortest string "/Raster"
      new Table(43, 1, -1, new short[] {919}),
/* NxS[ 919] */ // Shortest string "/Rasteri"
      new Table(54, 1, -1, new short[] {920}),
/* NxS[ 920] */ // Shortest string "/Rasteriz"
      new Table(27, 1, -1, new short[] {921}),
/* NxS[ 921] */ // Shortest string "/Rasterize"
      new Table(34, 1, -1, new short[] {922}),
/* NxS[ 922] */ // Shortest string "/Rasterizer"
      new Table(30, 1, -1, new short[] {923}),
/* NxS[ 923] */ // Shortest string "/BlendS"
      new Table(31, 1, -1, new short[] {924}),
/* NxS[ 924] */ // Shortest string "/BlendSt"
      new Table(32, 1, -1, new short[] {925}),
/* NxS[ 925] */ // Shortest string "/BlendSta"
      new Table(31, 1, -1, new short[] {926}),
/* NxS[ 926] */ // Shortest string "/els"
      new Table(27, 1, -1, new short[] {881}),
/* NxS[ 927] */ // Shortest string "/Rang"
      new Table(27, 1, -1, new short[] {928}),
/* NxS[ 928] */ // Shortest string "/Range"
      new Table(68, 47, -1, new short[] {20, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 19, 7, 7, 7}),
/* NxS[ 929] */ // Shortest string "/Range(+"
      new Table(57, 51, -1, new short[] {930, 930, 930, -1, -1, -1, 
          -1, 930, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 930, 930, 930, 930, 930, 930, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 933}),
/* NxS[ 930] */ // Shortest string "/Range(1"
      new Table(57, 51, -1, new short[] {930, 930, 930, -1, -1, -1, 
          -1, 930, -1, -1, -1, 934, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 930, 930, 930, 930, 930, 930, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 932, 933}),
/* NxS[ 931] */ // Shortest string "/Range(\x20"
      new Table(57, 51, -1, new short[] {930, 930, 930, -1, -1, -1, 
          -1, 930, -1, -1, -1, 931, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 930, 930, 930, 930, 930, 930, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 929, 929, -1, -1, -1, -1, -1, -1, -1, -1, 933}),
/* NxS[ 932] */ // Shortest string "/Range(1,"
      new Table(57, 51, -1, new short[] {937, 937, 937, -1, -1, -1, 
          -1, 937, -1, -1, -1, 932, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 937, 937, 937, 937, 937, 937, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 936, 936, -1, -1, -1, -1, -1, -1, -1, -1, 938}),
/* NxS[ 933] */ // Shortest string "/Range(."
      new Table(57, 29, -1, new short[] {935, 935, 935, -1, -1, -1, 
          -1, 935, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 935, 935, 935, 935, 935, 935}),
/* NxS[ 934] */ // Shortest string "/Range(1\x20"
      new Table(68, 39, -1, new short[] {934, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          932}),
/* NxS[ 935] */ // Shortest string "/Range(.1"
      new Table(37, 70, -1, new short[] {934, -1, -1, -1, -1, -1, 
          -1, -1, 934, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 935, 935, 
          935, -1, -1, -1, -1, 935, -1, -1, -1, 934, -1, 934, -1, -1, -1, -1, 
          -1, 934, -1, -1, -1, 935, 935, 935, 935, 935, 935, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 932}),
/* NxS[ 936] */ // Shortest string "/Range(1,+"
      new Table(57, 51, -1, new short[] {937, 937, 937, -1, -1, -1, 
          -1, 937, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 937, 937, 937, 937, 937, 937, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 938}),
/* NxS[ 937] */ // Shortest string "/Range(1,1"
      new Table(57, 56, -1, new short[] {937, 937, 937, -1, -1, -1, 
          -1, 937, -1, -1, -1, 939, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 937, 937, 937, 937, 937, 937, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 938, -1, -1, -1, 
          -1, 572}),
/* NxS[ 938] */ // Shortest string "/Range(1,."
      new Table(57, 29, -1, new short[] {940, 940, 940, -1, -1, -1, 
          -1, 940, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 940, 940, 940, 940, 940, 940}),
/* NxS[ 939] */ // Shortest string "/Range(1,1\x20"
      new Table(68, 45, -1, new short[] {939, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 572}),
/* NxS[ 940] */ // Shortest string "/Range(1,.1"
      new Table(22, 64, -1, new short[] {572, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 939, -1, -1, -1, -1, -1, -1, 
          -1, 939, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 940, 940, 940, 
          -1, -1, -1, -1, 940, -1, -1, -1, 939, -1, 939, -1, -1, -1, -1, -1, 
          939, -1, -1, -1, 940, 940, 940, 940, 940, 940}),
/* NxS[ 941] */ // Shortest string "/Ren"
      new Table(29, 1, -1, new short[] {956}),
/* NxS[ 942] */ // Shortest string "/Rea"
      new Table(29, 1, -1, new short[] {619}),
/* NxS[ 943] */ // Shortest string "/Rev"
      new Table(30, 1, -1, new short[] {954}),
/* NxS[ 944] */ // Shortest string "/Req"
      new Table(36, 1, -1, new short[] {945}),
/* NxS[ 945] */ // Shortest string "/Requ"
      new Table(43, 1, -1, new short[] {946}),
/* NxS[ 946] */ // Shortest string "/Requi"
      new Table(34, 1, -1, new short[] {947}),
/* NxS[ 947] */ // Shortest string "/Requir"
      new Table(27, 1, -1, new short[] {948}),
/* NxS[ 948] */ // Shortest string "/Require"
      new Table(71, 1, -1, new short[] {949}),
/* NxS[ 949] */ // Shortest string "/RequireO"
      new Table(42, 1, -1, new short[] {950}),
/* NxS[ 950] */ // Shortest string "/RequireOp"
      new Table(31, 1, -1, new short[] {951}),
/* NxS[ 951] */ // Shortest string "/RequireOpt"
      new Table(43, 1, -1, new short[] {952}),
/* NxS[ 952] */ // Shortest string "/RequireOpti"
      new Table(40, 1, -1, new short[] {953}),
/* NxS[ 953] */ // Shortest string "/RequireOptio"
      new Table(28, 1, -1, new short[] {711}),
/* NxS[ 954] */ // Shortest string "/RevS"
      new Table(36, 1, -1, new short[] {955}),
/* NxS[ 955] */ // Shortest string "/RevSu"
      new Table(33, 1, -1, new short[] {543}),
/* NxS[ 956] */ // Shortest string "/Rend"
      new Table(27, 1, -1, new short[] {957}),
/* NxS[ 957] */ // Shortest string "/Rende"
      new Table(34, 1, -1, new short[] {958}),
/* NxS[ 958] */ // Shortest string "/Render"
      new Table(55, 1, -1, new short[] {959}),
/* NxS[ 959] */ // Shortest string "/RenderT"
      new Table(32, 1, -1, new short[] {960}),
/* NxS[ 960] */ // Shortest string "/RenderTa"
      new Table(34, 1, -1, new short[] {961}),
/* NxS[ 961] */ // Shortest string "/RenderTar"
      new Table(56, 1, -1, new short[] {962}),
/* NxS[ 962] */ // Shortest string "/RenderTarg"
      new Table(27, 1, -1, new short[] {963}),
/* NxS[ 963] */ // Shortest string "/RenderTarge"
      new Table(31, 1, -1, new short[] {964}),
/* NxS[ 964] */ // Shortest string "/RenderTarget"
      new Table(46, 1, -1, new short[] {965}),
/* NxS[ 965] */ // Shortest string "/DepthStencilV"
      new Table(43, 1, -1, new short[] {966}),
/* NxS[ 966] */ // Shortest string "/DepthStencilVi"
      new Table(27, 1, -1, new short[] {967}),
/* NxS[ 967] */ // Shortest string "/DepthStencilVie"
      new Table(47, 1, -1, new short[] {881}),
/* NxS[ 968] */ // Shortest string "/Pr"
      new Table(27, 14, -1, new short[] {981, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 982}),
/* NxS[ 969] */ // Shortest string "/Po"
      new Table(43, 1, -1, new short[] {979}),
/* NxS[ 970] */ // Shortest string "/Pi"
      new Table(48, 1, -1, new short[] {971}),
/* NxS[ 971] */ // Shortest string "/Pix"
      new Table(27, 1, -1, new short[] {972}),
/* NxS[ 972] */ // Shortest string "/Pixe"
      new Table(26, 1, -1, new short[] {973}),
/* NxS[ 973] */ // Shortest string "/Pixel"
      new Table(30, 1, -1, new short[] {974}),
/* NxS[ 974] */ // Shortest string "/PixelS"
      new Table(45, 1, -1, new short[] {975}),
/* NxS[ 975] */ // Shortest string "/PixelSh"
      new Table(32, 1, -1, new short[] {976}),
/* NxS[ 976] */ // Shortest string "/PixelSha"
      new Table(29, 1, -1, new short[] {977}),
/* NxS[ 977] */ // Shortest string "/tbuff"
      new Table(27, 1, -1, new short[] {978}),
/* NxS[ 978] */ // Shortest string "/fo"
      new Table(34, 1, -1, new short[] {881}),
/* NxS[ 979] */ // Shortest string "/Poi"
      new Table(28, 1, -1, new short[] {980}),
/* NxS[ 980] */ // Shortest string "/Poin"
      new Table(31, 1, -1, new short[] {668}),
/* NxS[ 981] */ // Shortest string "/Pre"
      new Table(42, 1, -1, new short[] {1030}),
/* NxS[ 982] */ // Shortest string "/Pro"
      new Table(38, 5, -1, new short[] {983, -1, -1, -1, 984}),
/* NxS[ 983] */ // Shortest string "/Proc"
      new Table(27, 1, -1, new short[] {989}),
/* NxS[ 984] */ // Shortest string "/Prop"
      new Table(27, 1, -1, new short[] {985}),
/* NxS[ 985] */ // Shortest string "/Prope"
      new Table(34, 1, -1, new short[] {986}),
/* NxS[ 986] */ // Shortest string "/Proper"
      new Table(31, 1, -1, new short[] {987}),
/* NxS[ 987] */ // Shortest string "/Propert"
      new Table(43, 1, -1, new short[] {988}),
/* NxS[ 988] */ // Shortest string "/Properti"
      new Table(27, 1, -1, new short[] {821}),
/* NxS[ 989] */ // Shortest string "/Proce"
      new Table(39, 1, -1, new short[] {990}),
/* NxS[ 990] */ // Shortest string "/Proces"
      new Table(39, 1, -1, new short[] {991}),
/* NxS[ 991] */ // Shortest string "/Process"
      new Table(55, 35, -1, new short[] {992, -1, -1, 993, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 994, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 995}),
/* NxS[ 992] */ // Shortest string "/ProcessT"
      new Table(34, 1, -1, new short[] {1029}),
/* NxS[ 993] */ // Shortest string "/Process2"
      new Table(44, 1, -1, new short[] {1028}),
/* NxS[ 994] */ // Shortest string "/ProcessI"
      new Table(39, 1, -1, new short[] {1012}),
/* NxS[ 995] */ // Shortest string "/ProcessQ"
      new Table(36, 1, -1, new short[] {996}),
/* NxS[ 996] */ // Shortest string "/ProcessQu"
      new Table(32, 1, -1, new short[] {997}),
/* NxS[ 997] */ // Shortest string "/ProcessQua"
      new Table(29, 1, -1, new short[] {998}),
/* NxS[ 998] */ // Shortest string "/ProcessTri"
      new Table(55, 1, -1, new short[] {999}),
/* NxS[ 999] */ // Shortest string "/ProcessTriT"
      new Table(27, 1, -1, new short[] {1000}),
/* NxS[1000] */ // Shortest string "/ProcessTriTe"
      new Table(39, 1, -1, new short[] {1001}),
/* NxS[1001] */ // Shortest string "/ProcessTriTes"
      new Table(39, 1, -1, new short[] {1002}),
/* NxS[1002] */ // Shortest string "/ProcessTriTess"
      new Table(76, 1, -1, new short[] {1003}),
/* NxS[1003] */ // Shortest string "/ProcessTriTessF"
      new Table(32, 1, -1, new short[] {1004}),
/* NxS[1004] */ // Shortest string "/ProcessTriTessFa"
      new Table(38, 1, -1, new short[] {1005}),
/* NxS[1005] */ // Shortest string "/ProcessTriTessFac"
      new Table(31, 1, -1, new short[] {1006}),
/* NxS[1006] */ // Shortest string "/ProcessTriTessFact"
      new Table(40, 1, -1, new short[] {1007}),
/* NxS[1007] */ // Shortest string "/ProcessTriTessFacto"
      new Table(34, 1, -1, new short[] {1008}),
/* NxS[1008] */ // Shortest string "/ProcessTriTessFactor"
      new Table(39, 1, -1, new short[] {1009}),
/* NxS[1009] */ // Shortest string "/ProcessTriTessFactors"
      new Table(65, 2, -1, new short[] {1010, 594}),
/* NxS[1010] */ // Shortest string "/ProcessTriTessFactorsA"
      new Table(51, 1, -1, new short[] {1011}),
/* NxS[1011] */ // Shortest string "/ProcessTriTessFactorsAv"
      new Table(56, 1, -1, new short[] {597}),
/* NxS[1012] */ // Shortest string "/ProcessIs"
      new Table(40, 1, -1, new short[] {1013}),
/* NxS[1013] */ // Shortest string "/ProcessIso"
      new Table(26, 1, -1, new short[] {1014}),
/* NxS[1014] */ // Shortest string "/ProcessIsol"
      new Table(43, 1, -1, new short[] {1015}),
/* NxS[1015] */ // Shortest string "/ProcessIsoli"
      new Table(28, 1, -1, new short[] {1016}),
/* NxS[1016] */ // Shortest string "/ProcessIsolin"
      new Table(27, 1, -1, new short[] {1017}),
/* NxS[1017] */ // Shortest string "/ProcessIsoline"
      new Table(55, 1, -1, new short[] {1018}),
/* NxS[1018] */ // Shortest string "/ProcessIsolineT"
      new Table(27, 1, -1, new short[] {1019}),
/* NxS[1019] */ // Shortest string "/ProcessIsolineTe"
      new Table(39, 1, -1, new short[] {1020}),
/* NxS[1020] */ // Shortest string "/ProcessIsolineTes"
      new Table(39, 1, -1, new short[] {1021}),
/* NxS[1021] */ // Shortest string "/ProcessIsolineTess"
      new Table(76, 1, -1, new short[] {1022}),
/* NxS[1022] */ // Shortest string "/ProcessIsolineTessF"
      new Table(32, 1, -1, new short[] {1023}),
/* NxS[1023] */ // Shortest string "/ProcessIsolineTessFa"
      new Table(38, 1, -1, new short[] {1024}),
/* NxS[1024] */ // Shortest string "/ProcessIsolineTessFac"
      new Table(31, 1, -1, new short[] {1025}),
/* NxS[1025] */ // Shortest string "/ProcessIsolineTessFact"
      new Table(40, 1, -1, new short[] {1026}),
/* NxS[1026] */ // Shortest string "/ProcessIsolineTessFacto"
      new Table(34, 1, -1, new short[] {1027}),
/* NxS[1027] */ // Shortest string "/ab"
      new Table(39, 1, -1, new short[] {597}),
/* NxS[1028] */ // Shortest string "/Process2D"
      new Table(89, 1, -1, new short[] {995}),
/* NxS[1029] */ // Shortest string "/ProcessTr"
      new Table(43, 1, -1, new short[] {998}),
/* NxS[1030] */ // Shortest string "/Prep"
      new Table(32, 1, -1, new short[] {1031}),
/* NxS[1031] */ // Shortest string "/Prepa"
      new Table(39, 1, -1, new short[] {1032}),
/* NxS[1032] */ // Shortest string "/Prepas"
      new Table(39, 1, -1, new short[] {1033}),
/* NxS[1033] */ // Shortest string "/Prepass"
      new Table(76, 40, -1, new short[] {1034, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 559}),
/* NxS[1034] */ // Shortest string "/PrepassF"
      new Table(43, 1, -1, new short[] {1035}),
/* NxS[1035] */ // Shortest string "/PrepassFi"
      new Table(28, 1, -1, new short[] {629}),
/* NxS[1036] */ // Shortest string "/ve"
      new Table(38, 1, -1, new short[] {1043}),
/* NxS[1037] */ // Shortest string "/vo"
      new Table(26, 18, -1, new short[] {1038, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1039}),
/* NxS[1038] */ // Shortest string "/vol"
      new Table(32, 1, -1, new short[] {1040}),
/* NxS[1039] */ // Shortest string "/voi"
      new Table(29, 1, -1, new short[] {881}),
/* NxS[1040] */ // Shortest string "/vola"
      new Table(31, 1, -1, new short[] {1041}),
/* NxS[1041] */ // Shortest string "/wh"
      new Table(43, 1, -1, new short[] {1042}),
/* NxS[1042] */ // Shortest string "/whi"
      new Table(26, 1, -1, new short[] {926}),
/* NxS[1043] */ // Shortest string "/vec"
      new Table(31, 1, -1, new short[] {1044}),
/* NxS[1044] */ // Shortest string "/vect"
      new Table(40, 1, -1, new short[] {740}),
/* NxS[1045] */ // Shortest string "/Ge"
      new Table(31, 10, -1, new short[] {1051, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1052}),
/* NxS[1046] */ // Shortest string "/Gr"
      new Table(27, 14, -1, new short[] {1047, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1048}),
/* NxS[1047] */ // Shortest string "/Gre"
      new Table(32, 1, -1, new short[] {1050}),
/* NxS[1048] */ // Shortest string "/Gro"
      new Table(36, 1, -1, new short[] {1049}),
/* NxS[1049] */ // Shortest string "/Grou"
      new Table(42, 1, -1, new short[] {744}),
/* NxS[1050] */ // Shortest string "/Grea"
      new Table(31, 1, -1, new short[] {630}),
/* NxS[1051] */ // Shortest string "/Get"
      new Table(53, 1, -1, new short[] {1057}),
/* NxS[1052] */ // Shortest string "/Geo"
      new Table(41, 1, -1, new short[] {1053}),
/* NxS[1053] */ // Shortest string "/Geom"
      new Table(27, 1, -1, new short[] {1054}),
/* NxS[1054] */ // Shortest string "/Geome"
      new Table(31, 1, -1, new short[] {1055}),
/* NxS[1055] */ // Shortest string "/Geomet"
      new Table(34, 1, -1, new short[] {1056}),
/* NxS[1056] */ // Shortest string "/Geometr"
      new Table(50, 1, -1, new short[] {973}),
/* NxS[1057] */ // Shortest string "/GetR"
      new Table(27, 1, -1, new short[] {1058}),
/* NxS[1058] */ // Shortest string "/GetRe"
      new Table(28, 1, -1, new short[] {1059}),
/* NxS[1059] */ // Shortest string "/GetRen"
      new Table(29, 1, -1, new short[] {1060}),
/* NxS[1060] */ // Shortest string "/GetRend"
      new Table(27, 1, -1, new short[] {1061}),
/* NxS[1061] */ // Shortest string "/GetRende"
      new Table(34, 1, -1, new short[] {1062}),
/* NxS[1062] */ // Shortest string "/GetRender"
      new Table(55, 1, -1, new short[] {1063}),
/* NxS[1063] */ // Shortest string "/GetRenderT"
      new Table(32, 1, -1, new short[] {1064}),
/* NxS[1064] */ // Shortest string "/GetRenderTa"
      new Table(34, 1, -1, new short[] {1065}),
/* NxS[1065] */ // Shortest string "/GetRenderTar"
      new Table(56, 1, -1, new short[] {1066}),
/* NxS[1066] */ // Shortest string "/GetRenderTarg"
      new Table(27, 1, -1, new short[] {1067}),
/* NxS[1067] */ // Shortest string "/GetRenderTarge"
      new Table(31, 1, -1, new short[] {1068}),
/* NxS[1068] */ // Shortest string "/GetRenderTarget"
      new Table(30, 1, -1, new short[] {1069}),
/* NxS[1069] */ // Shortest string "/GetRenderTargetS"
      new Table(32, 1, -1, new short[] {1070}),
/* NxS[1070] */ // Shortest string "/GetRenderTargetSa"
      new Table(41, 1, -1, new short[] {1071}),
/* NxS[1071] */ // Shortest string "/GetRenderTargetSam"
      new Table(42, 1, -1, new short[] {1072}),
/* NxS[1072] */ // Shortest string "/GetRenderTargetSamp"
      new Table(26, 1, -1, new short[] {1073}),
/* NxS[1073] */ // Shortest string "/GetRenderTargetSampl"
      new Table(27, 1, -1, new short[] {1074}),
/* NxS[1074] */ // Shortest string "/GetRenderTargetSample"
      new Table(52, 9, -1, new short[] {1075, -1, -1, -1, -1, -1, 
          -1, -1, 1076}),
/* NxS[1075] */ // Shortest string "/GetRenderTargetSampleP"
      new Table(40, 1, -1, new short[] {1080}),
/* NxS[1076] */ // Shortest string "/GetRenderTargetSampleC"
      new Table(40, 1, -1, new short[] {1077}),
/* NxS[1077] */ // Shortest string "/GetRenderTargetSampleCo"
      new Table(36, 1, -1, new short[] {1078}),
/* NxS[1078] */ // Shortest string "/asui"
      new Table(28, 1, -1, new short[] {1079}),
/* NxS[1079] */ // Shortest string "/ds"
      new Table(31, 1, -1, new short[] {597}),
/* NxS[1080] */ // Shortest string "/GetRenderTargetSamplePo"
      new Table(39, 1, -1, new short[] {1081}),
/* NxS[1081] */ // Shortest string "/GetRenderTargetSamplePos"
      new Table(43, 1, -1, new short[] {1082}),
/* NxS[1082] */ // Shortest string "/GetRenderTargetSamplePosi"
      new Table(31, 1, -1, new short[] {1083}),
/* NxS[1083] */ // Shortest string "/GetRenderTargetSamplePosit"
      new Table(43, 1, -1, new short[] {1084}),
/* NxS[1084] */ // Shortest string "/GetRenderTargetSamplePositi"
      new Table(40, 1, -1, new short[] {599}),
/* NxS[1085] */ // Shortest string "/Ve"
      new Table(34, 5, -1, new short[] {1086, -1, -1, -1, 1087}),
/* NxS[1086] */ // Shortest string "/Ver"
      new Table(31, 1, -1, new short[] {1090}),
/* NxS[1087] */ // Shortest string "/Vec"
      new Table(31, 1, -1, new short[] {1088}),
/* NxS[1088] */ // Shortest string "/Vect"
      new Table(40, 1, -1, new short[] {1089}),
/* NxS[1089] */ // Shortest string "/Vecto"
      new Table(34, 1, -1, new short[] {572}),
/* NxS[1090] */ // Shortest string "/Vert"
      new Table(27, 1, -1, new short[] {1091}),
/* NxS[1091] */ // Shortest string "/Verte"
      new Table(48, 1, -1, new short[] {1092}),
/* NxS[1092] */ // Shortest string "/Vertex"
      new Table(68, 53, -1, new short[] {8, 1093, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 974}),
/* NxS[1093] */ // Shortest string "/VertexL"
      new Table(66, 1, -1, new short[] {1094}),
/* NxS[1094] */ // Shortest string "/VertexLM"
      new Table(53, 62, -1, new short[] {1095, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
          7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7}),
/* NxS[1095] */ // Shortest string "/VertexLMR"
      new Table(49, 1, -1, new short[] {1096}),
/* NxS[1096] */ // Shortest string "/VertexLMRG"
      new Table(25, 1, -1, new short[] {1097}),
/* NxS[1097] */ // Shortest string "/VertexLMRGB"
      new Table(66, 1, -1, new short[] {543}),
/* NxS[1098] */ // Shortest string "/ha"
      new Table(26, 1, -1, new short[] {1099}),
/* NxS[1099] */ // Shortest string "/hal"
      new Table(37, 1, -1, new short[] {1100}),
/* NxS[1100] */ // Shortest string "/bool"
      new Table(58, 55, -1, new short[] {582, 582, -1, -1, -1, -1, 
          -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          582, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 
          13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 
          14}),
/* NxS[1101] */ // Shortest string "/De"
      new Table(28, 24, -1, new short[] {1123, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1124, -1, -1, -1, -1, -1, -1, -1, 
          -1, 1125}),
/* NxS[1102] */ // Shortest string "/Di"
      new Table(37, 1, -1, new short[] {1121}),
/* NxS[1103] */ // Shortest string "/D3"
      new Table(44, 1, -1, new short[] {1108}),
/* NxS[1104] */ // Shortest string "/DO"
      new Table(61, 1, -1, new short[] {1105}),
/* NxS[1105] */ // Shortest string "/DOU"
      new Table(25, 1, -1, new short[] {1106}),
/* NxS[1106] */ // Shortest string "/DOUB"
      new Table(69, 1, -1, new short[] {1107}),
/* NxS[1107] */ // Shortest string "/DOUBL"
      new Table(62, 1, -1, new short[] {543}),
/* NxS[1108] */ // Shortest string "/D3D"
      new Table(60, 1, -1, new short[] {1109}),
/* NxS[1109] */ // Shortest string "/D3DC"
      new Table(71, 1, -1, new short[] {1110}),
/* NxS[1110] */ // Shortest string "/D3DCO"
      new Table(69, 1, -1, new short[] {1111}),
/* NxS[1111] */ // Shortest string "/D3DCOL"
      new Table(71, 1, -1, new short[] {1112}),
/* NxS[1112] */ // Shortest string "/D3DCOLO"
      new Table(53, 1, -1, new short[] {1113}),
/* NxS[1113] */ // Shortest string "/D3DCOLOR"
      new Table(31, 1, -1, new short[] {1114}),
/* NxS[1114] */ // Shortest string "/D3DCOLORt"
      new Table(40, 1, -1, new short[] {1115}),
/* NxS[1115] */ // Shortest string "/D3DCOLORto"
      new Table(61, 1, -1, new short[] {1116}),
/* NxS[1116] */ // Shortest string "/D3DCOLORtoU"
      new Table(25, 1, -1, new short[] {1117}),
/* NxS[1117] */ // Shortest string "/D3DCOLORtoUB"
      new Table(79, 1, -1, new short[] {1118}),
/* NxS[1118] */ // Shortest string "/D3DCOLORtoUBY"
      new Table(55, 1, -1, new short[] {1119}),
/* NxS[1119] */ // Shortest string "/D3DCOLORtoUBYT"
      new Table(62, 1, -1, new short[] {1120}),
/* NxS[1120] */ // Shortest string "/D3DCOLORtoUBYTE"
      new Table(80, 1, -1, new short[] {597}),
/* NxS[1121] */ // Shortest string "/Dif"
      new Table(37, 1, -1, new short[] {1122}),
/* NxS[1122] */ // Shortest string "/Diff"
      new Table(36, 1, -1, new short[] {562}),
/* NxS[1123] */ // Shortest string "/Den"
      new Table(39, 1, -1, new short[] {1137}),
/* NxS[1124] */ // Shortest string "/Dep"
      new Table(31, 1, -1, new short[] {1128}),
/* NxS[1125] */ // Shortest string "/Dev"
      new Table(43, 1, -1, new short[] {1126}),
/* NxS[1126] */ // Shortest string "/Devi"
      new Table(38, 1, -1, new short[] {1127}),
/* NxS[1127] */ // Shortest string "/Devic"
      new Table(27, 1, -1, new short[] {744}),
/* NxS[1128] */ // Shortest string "/Dept"
      new Table(45, 1, -1, new short[] {1129}),
/* NxS[1129] */ // Shortest string "/Depth"
      new Table(30, 1, -1, new short[] {1130}),
/* NxS[1130] */ // Shortest string "/DepthS"
      new Table(31, 1, -1, new short[] {1131}),
/* NxS[1131] */ // Shortest string "/DepthSt"
      new Table(27, 1, -1, new short[] {1132}),
/* NxS[1132] */ // Shortest string "/DepthSte"
      new Table(28, 1, -1, new short[] {1133}),
/* NxS[1133] */ // Shortest string "/DepthSten"
      new Table(38, 1, -1, new short[] {1134}),
/* NxS[1134] */ // Shortest string "/DepthStenc"
      new Table(43, 1, -1, new short[] {1135}),
/* NxS[1135] */ // Shortest string "/DepthStenci"
      new Table(26, 1, -1, new short[] {1136}),
/* NxS[1136] */ // Shortest string "/DepthStencil"
      new Table(30, 17, -1, new short[] {923, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 965}),
/* NxS[1137] */ // Shortest string "/Dens"
      new Table(43, 1, -1, new short[] {1138}),
/* NxS[1138] */ // Shortest string "/Densi"
      new Table(31, 1, -1, new short[] {1139}),
/* NxS[1139] */ // Shortest string "/Densit"
      new Table(50, 1, -1, new short[] {543}),
/* NxS[1140] */ // Shortest string "/in"
      new Table(68, 63, -1, new short[] {17, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          17, 17, -1, 17, -1, -1, 17, 17, 17, 17, 876, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, -1, 1149, -1, -1, -1, -1, 1150, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1151}),
/* NxS[1141] */ // Shortest string "/is"
      new Table(28, 16, -1, new short[] {1142, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1143, -1, -1, -1, -1, -1, 1144}),
/* NxS[1142] */ // Shortest string "/isn"
      new Table(32, 1, -1, new short[] {599}),
/* NxS[1143] */ // Shortest string "/isf"
      new Table(43, 1, -1, new short[] {1146}),
/* NxS[1144] */ // Shortest string "/isi"
      new Table(28, 1, -1, new short[] {1145}),
/* NxS[1145] */ // Shortest string "/mod"
      new Table(37, 1, -1, new short[] {597}),
/* NxS[1146] */ // Shortest string "/isfi"
      new Table(28, 1, -1, new short[] {1147}),
/* NxS[1147] */ // Shortest string "/isfin"
      new Table(43, 1, -1, new short[] {1148}),
/* NxS[1148] */ // Shortest string "/satura"
      new Table(31, 1, -1, new short[] {606}),
/* NxS[1149] */ // Shortest string "/inl"
      new Table(43, 1, -1, new short[] {1157}),
/* NxS[1150] */ // Shortest string "/int"
      new Table(58, 60, -1, new short[] {582, 582, -1, -1, -1, -1, 
          -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          582, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 
          13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 
          14, -1, -1, -1, -1, 1153}),
/* NxS[1151] */ // Shortest string "/o"
      new Table(36, 1, -1, new short[] {1152}),
/* NxS[1152] */ // Shortest string "/ou"
      new Table(31, 1, -1, new short[] {881}),
/* NxS[1153] */ // Shortest string "/inte"
      new Table(34, 1, -1, new short[] {1154}),
/* NxS[1154] */ // Shortest string "/inter"
      new Table(37, 1, -1, new short[] {1155}),
/* NxS[1155] */ // Shortest string "/namesp"
      new Table(32, 1, -1, new short[] {1156}),
/* NxS[1156] */ // Shortest string "/namespa"
      new Table(38, 1, -1, new short[] {926}),
/* NxS[1157] */ // Shortest string "/inli"
      new Table(28, 1, -1, new short[] {926}),
/* NxS[1158] */ // Shortest string "/pa"
      new Table(39, 1, -1, new short[] {1166}),
/* NxS[1159] */ // Shortest string "/pr"
      new Table(27, 1, -1, new short[] {1163}),
/* NxS[1160] */ // Shortest string "/po"
      new Table(43, 5, -1, new short[] {1161, -1, -1, -1, 597}),
/* NxS[1161] */ // Shortest string "/poi"
      new Table(28, 1, -1, new short[] {1162}),
/* NxS[1162] */ // Shortest string "/poin"
      new Table(31, 1, -1, new short[] {582}),
/* NxS[1163] */ // Shortest string "/pre"
      new Table(38, 1, -1, new short[] {1164}),
/* NxS[1164] */ // Shortest string "/prec"
      new Table(43, 1, -1, new short[] {1165}),
/* NxS[1165] */ // Shortest string "/el"
      new Table(39, 1, -1, new short[] {926}),
/* NxS[1166] */ // Shortest string "/pas"
      new Table(39, 1, -1, new short[] {881}),
/* NxS[1167] */ // Shortest string "/ma"
      new Table(29, 20, -1, new short[] {597, -1, 1170, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 597}),
/* NxS[1168] */ // Shortest string "/al"
      new Table(26, 1, -1, new short[] {597}),
/* NxS[1169] */ // Shortest string "/mo"
      new Table(29, 1, -1, new short[] {1145}),
/* NxS[1170] */ // Shortest string "/mat"
      new Table(34, 1, -1, new short[] {1171}),
/* NxS[1171] */ // Shortest string "/matr"
      new Table(43, 1, -1, new short[] {1172}),
/* NxS[1172] */ // Shortest string "/matri"
      new Table(48, 1, -1, new short[] {582}),
/* NxS[1173] */ // Shortest string "/st"
      new Table(27, 8, -1, new short[] {1193, -1, -1, -1, -1, 1205, 
          -1, 1206}),
/* NxS[1174] */ // Shortest string "/sa"
      new Table(31, 11, -1, new short[] {1194, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1195}),
/* NxS[1175] */ // Shortest string "/sm"
      new Table(40, 1, -1, new short[] {1187}),
/* NxS[1176] */ // Shortest string "/si"
      new Table(28, 29, -1, new short[] {1185, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 599}),
/* NxS[1177] */ // Shortest string "/sh"
      new Table(32, 1, -1, new short[] {1183}),
/* NxS[1178] */ // Shortest string "/sw"
      new Table(43, 1, -1, new short[] {1180}),
/* NxS[1179] */ // Shortest string "/sq"
      new Table(34, 1, -1, new short[] {1079}),
/* NxS[1180] */ // Shortest string "/swi"
      new Table(31, 1, -1, new short[] {1181}),
/* NxS[1181] */ // Shortest string "/swit"
      new Table(38, 1, -1, new short[] {1182}),
/* NxS[1182] */ // Shortest string "/switc"
      new Table(45, 1, -1, new short[] {881}),
/* NxS[1183] */ // Shortest string "/sha"
      new Table(34, 1, -1, new short[] {1184}),
/* NxS[1184] */ // Shortest string "/shar"
      new Table(27, 1, -1, new short[] {1039}),
/* NxS[1185] */ // Shortest string "/sin"
      new Table(21, 48, -1, new short[] {15, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1186, -1, -1, -1, -1, 
          -1, -1, 597, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 597}),
/* NxS[1186] */ // Shortest string "/ac"
      new Table(40, 1, -1, new short[] {1027}),
/* NxS[1187] */ // Shortest string "/smo"
      new Table(40, 1, -1, new short[] {1188}),
/* NxS[1188] */ // Shortest string "/smoo"
      new Table(31, 1, -1, new short[] {1189}),
/* NxS[1189] */ // Shortest string "/smoot"
      new Table(45, 1, -1, new short[] {1190}),
/* NxS[1190] */ // Shortest string "/smooth"
      new Table(39, 1, -1, new short[] {1191}),
/* NxS[1191] */ // Shortest string "/smooths"
      new Table(31, 1, -1, new short[] {1192}),
/* NxS[1192] */ // Shortest string "/smoothst"
      new Table(27, 1, -1, new short[] {1193}),
/* NxS[1193] */ // Shortest string "/rc"
      new Table(42, 1, -1, new short[] {597}),
/* NxS[1194] */ // Shortest string "/sat"
      new Table(36, 1, -1, new short[] {1203}),
/* NxS[1195] */ // Shortest string "/sam"
      new Table(42, 1, -1, new short[] {1196}),
/* NxS[1196] */ // Shortest string "/samp"
      new Table(26, 1, -1, new short[] {1197}),
/* NxS[1197] */ // Shortest string "/sampl"
      new Table(27, 1, -1, new short[] {1198}),
/* NxS[1198] */ // Shortest string "/sample"
      new Table(68, 57, -1, new short[] {17, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          17, 17, -1, 17, -1, -1, 17, 17, 17, 17, 876, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 1199}),
/* NxS[1199] */ // Shortest string "/sampler"
      new Table(58, 55, -1, new short[] {899, 899, 1200, -1, -1, -1, 
          -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 
          13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 
          14}),
/* NxS[1200] */ // Shortest string "/samplerC"
      new Table(61, 1, -1, new short[] {1201}),
/* NxS[1201] */ // Shortest string "/samplerCU"
      new Table(25, 1, -1, new short[] {1202}),
/* NxS[1202] */ // Shortest string "/samplerCUB"
      new Table(62, 1, -1, new short[] {582}),
/* NxS[1203] */ // Shortest string "/satu"
      new Table(34, 1, -1, new short[] {1204}),
/* NxS[1204] */ // Shortest string "/satur"
      new Table(32, 1, -1, new short[] {1148}),
/* NxS[1205] */ // Shortest string "/sta"
      new Table(31, 1, -1, new short[] {1210}),
/* NxS[1206] */ // Shortest string "/str"
      new Table(36, 8, -1, new short[] {1207, -1, -1, -1, -1, -1, 
          -1, 1208}),
/* NxS[1207] */ // Shortest string "/stru"
      new Table(38, 1, -1, new short[] {1152}),
/* NxS[1208] */ // Shortest string "/stri"
      new Table(28, 1, -1, new short[] {1209}),
/* NxS[1209] */ // Shortest string "/strin"
      new Table(56, 1, -1, new short[] {582}),
/* NxS[1210] */ // Shortest string "/stat"
      new Table(43, 1, -1, new short[] {1211}),
/* NxS[1211] */ // Shortest string "/stati"
      new Table(38, 1, -1, new short[] {881}),
/* NxS[1212] */ // Shortest string "/cl"
      new Table(32, 12, -1, new short[] {1235, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1193}),
/* NxS[1213] */ // Shortest string "/ce"
      new Table(28, 16, -1, new short[] {1231, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 1168}),
/* NxS[1214] */ // Shortest string "/tb"
      new Table(36, 1, -1, new short[] {1229}),
/* NxS[1215] */ // Shortest string "/cr"
      new Table(40, 1, -1, new short[] {1228}),
/* NxS[1216] */ // Shortest string "/co"
      new Table(28, 14, -1, new short[] {1217, -1, -1, -1, -1, -1, 
          -1, -1, 1218, -1, -1, 1219, -1, 1220}),
/* NxS[1217] */ // Shortest string "/con"
      new Table(31, 9, -1, new short[] {1225, -1, -1, -1, -1, -1, 
          -1, -1, 1152}),
/* NxS[1218] */ // Shortest string "/cou"
      new Table(28, 1, -1, new short[] {1221}),
/* NxS[1219] */ // Shortest string "/tan"
      new Table(21, 48, -1, new short[] {15, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 597, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 597}),
/* NxS[1220] */ // Shortest string "/com"
      new Table(33, 10, -1, new short[] {844, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1041}),
/* NxS[1221] */ // Shortest string "/coun"
      new Table(31, 1, -1, new short[] {1222}),
/* NxS[1222] */ // Shortest string "/count"
      new Table(33, 1, -1, new short[] {1223}),
/* NxS[1223] */ // Shortest string "/countb"
      new Table(43, 1, -1, new short[] {1224}),
/* NxS[1224] */ // Shortest string "/countbi"
      new Table(31, 1, -1, new short[] {1027}),
/* NxS[1225] */ // Shortest string "/cont"
      new Table(43, 1, -1, new short[] {1226}),
/* NxS[1226] */ // Shortest string "/conti"
      new Table(28, 1, -1, new short[] {1227}),
/* NxS[1227] */ // Shortest string "/contin"
      new Table(36, 1, -1, new short[] {926}),
/* NxS[1228] */ // Shortest string "/cro"
      new Table(39, 1, -1, new short[] {1027}),
/* NxS[1229] */ // Shortest string "/tbu"
      new Table(37, 1, -1, new short[] {1230}),
/* NxS[1230] */ // Shortest string "/tbuf"
      new Table(37, 1, -1, new short[] {977}),
/* NxS[1231] */ // Shortest string "/cen"
      new Table(31, 1, -1, new short[] {1232}),
/* NxS[1232] */ // Shortest string "/cent"
      new Table(34, 1, -1, new short[] {1233}),
/* NxS[1233] */ // Shortest string "/centr"
      new Table(40, 1, -1, new short[] {1234}),
/* NxS[1234] */ // Shortest string "/centro"
      new Table(43, 1, -1, new short[] {1039}),
/* NxS[1235] */ // Shortest string "/cla"
      new Table(39, 3, -1, new short[] {1166, -1, 1193}),
/* NxS[1236] */ // Shortest string "/fl"
      new Table(40, 1, -1, new short[] {1277}),
/* NxS[1237] */ // Shortest string "/fa"
      new Table(26, 13, -1, new short[] {1165, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 1270}),
/* NxS[1238] */ // Shortest string "/fr"
      new Table(27, 6, -1, new short[] {1269, -1, -1, -1, -1, 774}),
/* NxS[1239] */ // Shortest string "/fm"
      new Table(40, 1, -1, new short[] {600}),
/* NxS[1240] */ // Shortest string "/fi"
      new Table(34, 15, -1, new short[] {1257, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 1258}),
/* NxS[1241] */ // Shortest string "/fw"
      new Table(43, 1, -1, new short[] {1254}),
/* NxS[1242] */ // Shortest string "/f1"
      new Table(82, 1, -1, new short[] {1249}),
/* NxS[1243] */ // Shortest string "/f3"
      new Table(58, 1, -1, new short[] {1244}),
/* NxS[1244] */ // Shortest string "/f32"
      new Table(31, 1, -1, new short[] {1245}),
/* NxS[1245] */ // Shortest string "/f32t"
      new Table(40, 1, -1, new short[] {1246}),
/* NxS[1246] */ // Shortest string "/f32to"
      new Table(37, 1, -1, new short[] {1247}),
/* NxS[1247] */ // Shortest string "/f32tof"
      new Table(57, 1, -1, new short[] {1248}),
/* NxS[1248] */ // Shortest string "/f32tof1"
      new Table(82, 1, -1, new short[] {597}),
/* NxS[1249] */ // Shortest string "/f16"
      new Table(31, 1, -1, new short[] {1250}),
/* NxS[1250] */ // Shortest string "/f16t"
      new Table(40, 1, -1, new short[] {1251}),
/* NxS[1251] */ // Shortest string "/f16to"
      new Table(37, 1, -1, new short[] {1252}),
/* NxS[1252] */ // Shortest string "/f16tof"
      new Table(59, 1, -1, new short[] {1253}),
/* NxS[1253] */ // Shortest string "/f16tof3"
      new Table(58, 1, -1, new short[] {597}),
/* NxS[1254] */ // Shortest string "/fwi"
      new Table(29, 1, -1, new short[] {1255}),
/* NxS[1255] */ // Shortest string "/leng"
      new Table(31, 1, -1, new short[] {1256}),
/* NxS[1256] */ // Shortest string "/lengt"
      new Table(45, 1, -1, new short[] {597}),
/* NxS[1257] */ // Shortest string "/fir"
      new Table(39, 1, -1, new short[] {1260}),
/* NxS[1258] */ // Shortest string "/fix"
      new Table(27, 1, -1, new short[] {1259}),
/* NxS[1259] */ // Shortest string "/fixe"
      new Table(29, 1, -1, new short[] {1100}),
/* NxS[1260] */ // Shortest string "/firs"
      new Table(31, 1, -1, new short[] {1261}),
/* NxS[1261] */ // Shortest string "/first"
      new Table(33, 1, -1, new short[] {1262}),
/* NxS[1262] */ // Shortest string "/firstb"
      new Table(43, 1, -1, new short[] {1263}),
/* NxS[1263] */ // Shortest string "/firstbi"
      new Table(31, 1, -1, new short[] {1264}),
/* NxS[1264] */ // Shortest string "/firstbit"
      new Table(26, 20, -1, new short[] {1265, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1266}),
/* NxS[1265] */ // Shortest string "/firstbitl"
      new Table(40, 1, -1, new short[] {1268}),
/* NxS[1266] */ // Shortest string "/firstbith"
      new Table(43, 1, -1, new short[] {1267}),
/* NxS[1267] */ // Shortest string "/firstbithi"
      new Table(56, 1, -1, new short[] {1256}),
/* NxS[1268] */ // Shortest string "/firstbitlo"
      new Table(47, 1, -1, new short[] {597}),
/* NxS[1269] */ // Shortest string "/lde"
      new Table(48, 1, -1, new short[] {1193}),
/* NxS[1270] */ // Shortest string "/fac"
      new Table(27, 1, -1, new short[] {1271}),
/* NxS[1271] */ // Shortest string "/face"
      new Table(37, 1, -1, new short[] {1272}),
/* NxS[1272] */ // Shortest string "/facef"
      new Table(40, 1, -1, new short[] {1273}),
/* NxS[1273] */ // Shortest string "/facefo"
      new Table(34, 1, -1, new short[] {1274}),
/* NxS[1274] */ // Shortest string "/facefor"
      new Table(47, 1, -1, new short[] {1275}),
/* NxS[1275] */ // Shortest string "/faceforw"
      new Table(32, 1, -1, new short[] {1276}),
/* NxS[1276] */ // Shortest string "/faceforwa"
      new Table(34, 1, -1, new short[] {600}),
/* NxS[1277] */ // Shortest string "/flo"
      new Table(32, 9, -1, new short[] {1278, -1, -1, -1, -1, -1, 
          -1, -1, 596}),
/* NxS[1278] */ // Shortest string "/floa"
      new Table(31, 1, -1, new short[] {1279}),
/* NxS[1279] */ // Shortest string "/float"
      new Table(57, 56, -1, new short[] {1280, 1281, 1281, -1, -1, -1, 
          -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 1281, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, 
          -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          14, 14}),
/* NxS[1280] */ // Shortest string "/float1"
      new Table(48, 1, -1, new short[] {1282}),
/* NxS[1281] */ // Shortest string "/float2"
      new Table(48, 65, -1, new short[] {1282, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 14}),
/* NxS[1282] */ // Shortest string "/float1x"
      new Table(57, 24, -1, new short[] {582, 582, 582, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 582}),
/* NxS[1283] */ // Shortest string "/un"
      new Table(43, 1, -1, new short[] {1286}),
/* NxS[1284] */ // Shortest string "/ui"
      new Table(28, 1, -1, new short[] {1285}),
/* NxS[1285] */ // Shortest string "/uin"
      new Table(31, 1, -1, new short[] {1100}),
/* NxS[1286] */ // Shortest string "/uni"
      new Table(37, 1, -1, new short[] {1287}),
/* NxS[1287] */ // Shortest string "/unif"
      new Table(40, 1, -1, new short[] {1288}),
/* NxS[1288] */ // Shortest string "/unifo"
      new Table(34, 1, -1, new short[] {1289}),
/* NxS[1289] */ // Shortest string "/unifor"
      new Table(41, 1, -1, new short[] {881}),
/* NxS[1290] */ // Shortest string "/re"
      new Table(31, 26, -1, new short[] {1298, -1, -1, -1, -1, -1, 
          1299, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1300, -1, 
          -1, -1, -1, 1301}),
/* NxS[1291] */ // Shortest string "/ra"
      new Table(29, 1, -1, new short[] {1295}),
/* NxS[1292] */ // Shortest string "/rs"
      new Table(63, 1, -1, new short[] {1179}),
/* NxS[1293] */ // Shortest string "/ro"
      new Table(36, 1, -1, new short[] {1294}),
/* NxS[1294] */ // Shortest string "/rou"
      new Table(28, 1, -1, new short[] {600}),
/* NxS[1295] */ // Shortest string "/rad"
      new Table(43, 1, -1, new short[] {1296}),
/* NxS[1296] */ // Shortest string "/radi"
      new Table(32, 1, -1, new short[] {1297}),
/* NxS[1297] */ // Shortest string "/radia"
      new Table(28, 1, -1, new short[] {1027}),
/* NxS[1298] */ // Shortest string "/ret"
      new Table(36, 1, -1, new short[] {1310}),
/* NxS[1299] */ // Shortest string "/ref"
      new Table(26, 9, -1, new short[] {1307, -1, -1, -1, -1, -1, 
          -1, -1, 1308}),
/* NxS[1300] */ // Shortest string "/rev"
      new Table(27, 1, -1, new short[] {1304}),
/* NxS[1301] */ // Shortest string "/reg"
      new Table(43, 1, -1, new short[] {1302}),
/* NxS[1302] */ // Shortest string "/regi"
      new Table(39, 1, -1, new short[] {1303}),
/* NxS[1303] */ // Shortest string "/regis"
      new Table(31, 1, -1, new short[] {977}),
/* NxS[1304] */ // Shortest string "/reve"
      new Table(34, 1, -1, new short[] {1305}),
/* NxS[1305] */ // Shortest string "/rever"
      new Table(39, 1, -1, new short[] {1306}),
/* NxS[1306] */ // Shortest string "/revers"
      new Table(27, 1, -1, new short[] {1222}),
/* NxS[1307] */ // Shortest string "/refl"
      new Table(27, 1, -1, new short[] {1309}),
/* NxS[1308] */ // Shortest string "/refr"
      new Table(32, 1, -1, new short[] {1309}),
/* NxS[1309] */ // Shortest string "/refle"
      new Table(38, 1, -1, new short[] {1079}),
/* NxS[1310] */ // Shortest string "/exte"
      new Table(34, 1, -1, new short[] {1311}),
/* NxS[1311] */ // Shortest string "/exter"
      new Table(28, 1, -1, new short[] {881}),
/* NxS[1312] */ // Shortest string "/br"
      new Table(27, 1, -1, new short[] {1315}),
/* NxS[1313] */ // Shortest string "/bo"
      new Table(40, 1, -1, new short[] {1314}),
/* NxS[1314] */ // Shortest string "/boo"
      new Table(26, 1, -1, new short[] {1100}),
/* NxS[1315] */ // Shortest string "/bre"
      new Table(32, 1, -1, new short[] {1316}),
/* NxS[1316] */ // Shortest string "/brea"
      new Table(35, 1, -1, new short[] {881}),
/* NxS[1317] */ // Shortest string "/an"
      new Table(50, 1, -1, new short[] {597}),
/* NxS[1318] */ // Shortest string "/at"
      new Table(32, 1, -1, new short[] {1329}),
/* NxS[1319] */ // Shortest string "/as"
      new Table(29, 15, -1, new short[] {1320, -1, -1, -1, -1, -1, 
          -1, 1321, 1322, -1, -1, -1, -1, -1, 1323}),
/* NxS[1320] */ // Shortest string "/asd"
      new Table(40, 1, -1, new short[] {1327}),
/* NxS[1321] */ // Shortest string "/asu"
      new Table(43, 1, -1, new short[] {1078}),
/* NxS[1322] */ // Shortest string "/asf"
      new Table(26, 1, -1, new short[] {1325}),
/* NxS[1323] */ // Shortest string "/asi"
      new Table(28, 1, -1, new short[] {1324}),
/* NxS[1324] */ // Shortest string "/asin"
      new Table(21, 48, -1, new short[] {15, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 597, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 597}),
/* NxS[1325] */ // Shortest string "/asfl"
      new Table(40, 1, -1, new short[] {1326}),
/* NxS[1326] */ // Shortest string "/asflo"
      new Table(32, 1, -1, new short[] {1079}),
/* NxS[1327] */ // Shortest string "/asdo"
      new Table(36, 1, -1, new short[] {1328}),
/* NxS[1328] */ // Shortest string "/asdou"
      new Table(33, 1, -1, new short[] {807}),
/* NxS[1329] */ // Shortest string "/ata"
      new Table(28, 1, -1, new short[] {1330}),
/* NxS[1330] */ // Shortest string "/exp"
      new Table(21, 48, -1, new short[] {15, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 597, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 597}),
/* NxS[1331] */ // Shortest string "/te"
      new Table(38, 11, -1, new short[] {1353, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1354}),
/* NxS[1332] */ // Shortest string "/ta"
      new Table(28, 1, -1, new short[] {1219}),
/* NxS[1333] */ // Shortest string "/tr"
      new Table(32, 12, -1, new short[] {1339, -1, -1, -1, 1340, -1, 
          -1, -1, -1, -1, -1, 1341}),
/* NxS[1334] */ // Shortest string "/ty"
      new Table(42, 1, -1, new short[] {1335}),
/* NxS[1335] */ // Shortest string "/typ"
      new Table(27, 1, -1, new short[] {1336}),
/* NxS[1336] */ // Shortest string "/type"
      new Table(29, 1, -1, new short[] {1337}),
/* NxS[1337] */ // Shortest string "/typed"
      new Table(27, 1, -1, new short[] {1338}),
/* NxS[1338] */ // Shortest string "/typede"
      new Table(37, 1, -1, new short[] {881}),
/* NxS[1339] */ // Shortest string "/tra"
      new Table(28, 1, -1, new short[] {1349}),
/* NxS[1340] */ // Shortest string "/tru"
      new Table(27, 2, -1, new short[] {881, 774}),
/* NxS[1341] */ // Shortest string "/tri"
      new Table(32, 1, -1, new short[] {1342}),
/* NxS[1342] */ // Shortest string "/tria"
      new Table(28, 1, -1, new short[] {1343}),
/* NxS[1343] */ // Shortest string "/trian"
      new Table(56, 1, -1, new short[] {1344}),
/* NxS[1344] */ // Shortest string "/triang"
      new Table(26, 1, -1, new short[] {1345}),
/* NxS[1345] */ // Shortest string "/triangl"
      new Table(27, 1, -1, new short[] {1346}),
/* NxS[1346] */ // Shortest string "/triangle"
      new Table(68, 55, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          13, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 14, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          1347}),
/* NxS[1347] */ // Shortest string "/trianglea"
      new Table(29, 1, -1, new short[] {1348}),
/* NxS[1348] */ // Shortest string "/linead"
      new Table(88, 1, -1, new short[] {582}),
/* NxS[1349] */ // Shortest string "/tran"
      new Table(39, 1, -1, new short[] {1350}),
/* NxS[1350] */ // Shortest string "/trans"
      new Table(42, 1, -1, new short[] {1351}),
/* NxS[1351] */ // Shortest string "/transp"
      new Table(40, 1, -1, new short[] {1352}),
/* NxS[1352] */ // Shortest string "/transpo"
      new Table(39, 1, -1, new short[] {606}),
/* NxS[1353] */ // Shortest string "/tec"
      new Table(45, 1, -1, new short[] {1369}),
/* NxS[1354] */ // Shortest string "/tex"
      new Table(31, 30, -1, new short[] {1355, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 1356, 1356, 1356, 1357}),
/* NxS[1355] */ // Shortest string "/text"
      new Table(36, 1, -1, new short[] {1368}),
/* NxS[1356] */ // Shortest string "/tex1"
      new Table(44, 1, -1, new short[] {1360}),
/* NxS[1357] */ // Shortest string "/texC"
      new Table(61, 1, -1, new short[] {1358}),
/* NxS[1358] */ // Shortest string "/texCU"
      new Table(25, 1, -1, new short[] {1359}),
/* NxS[1359] */ // Shortest string "/texCUB"
      new Table(62, 1, -1, new short[] {1360}),
/* NxS[1360] */ // Shortest string "/tex1D"
      new Table(21, 48, -1, new short[] {15, -1, -1, -1, -1, 1239, 
          -1, -1, -1, -1, -1, -1, 1361, -1, -1, -1, -1, -1, -1, -1, -1, 1362, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1363, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 597}),
/* NxS[1361] */ // Shortest string "/tex1Db"
      new Table(43, 1, -1, new short[] {1367}),
/* NxS[1362] */ // Shortest string "/tex1Dp"
      new Table(34, 1, -1, new short[] {1365}),
/* NxS[1363] */ // Shortest string "/tex1Dg"
      new Table(34, 1, -1, new short[] {1364}),
/* NxS[1364] */ // Shortest string "/tex1Dgr"
      new Table(32, 1, -1, new short[] {600}),
/* NxS[1365] */ // Shortest string "/tex1Dpr"
      new Table(40, 1, -1, new short[] {1366}),
/* NxS[1366] */ // Shortest string "/tex1Dpro"
      new Table(88, 1, -1, new short[] {597}),
/* NxS[1367] */ // Shortest string "/tex1Dbi"
      new Table(32, 1, -1, new short[] {1027}),
/* NxS[1368] */ // Shortest string "/textu"
      new Table(34, 1, -1, new short[] {926}),
/* NxS[1369] */ // Shortest string "/tech"
      new Table(28, 1, -1, new short[] {1370}),
/* NxS[1370] */ // Shortest string "/techn"
      new Table(43, 1, -1, new short[] {1371}),
/* NxS[1371] */ // Shortest string "/techni"
      new Table(63, 1, -1, new short[] {1372}),
/* NxS[1372] */ // Shortest string "/techniq"
      new Table(36, 1, -1, new short[] {1373}),
/* NxS[1373] */ // Shortest string "/techniqu"
      new Table(27, 1, -1, new short[] {1374}),
/* NxS[1374] */ // Shortest string "/technique"
      new Table(57, 58, -1, new short[] {1375, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, -1, 17, -1, 
          -1, 17, 17, 17, 17, 876, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17}),
/* NxS[1375] */ // Shortest string "/technique1"
      new Table(57, 8, -1, new short[] {881, -1, -1, -1, -1, -1, 
          -1, 881}),
/* NxS[1376] */ // Shortest string "/Se"
      new Table(31, 12, -1, new short[] {1443, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1444}),
/* NxS[1377] */ // Shortest string "/St"
      new Table(27, 8, -1, new short[] {1432, -1, -1, -1, -1, 1433, 
          -1, 728}),
/* NxS[1378] */ // Shortest string "/Sa"
      new Table(41, 1, -1, new short[] {1415}),
/* NxS[1379] */ // Shortest string "/Su"
      new Table(33, 1, -1, new short[] {1410}),
/* NxS[1380] */ // Shortest string "/So"
      new Table(37, 1, -1, new short[] {1402}),
/* NxS[1381] */ // Shortest string "/Sp"
      new Table(27, 1, -1, new short[] {1399}),
/* NxS[1382] */ // Shortest string "/Sh"
      new Table(32, 12, -1, new short[] {1383, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1384}),
/* NxS[1383] */ // Shortest string "/Sha"
      new Table(29, 1, -1, new short[] {1388}),
/* NxS[1384] */ // Shortest string "/Shi"
      new Table(28, 1, -1, new short[] {1385}),
/* NxS[1385] */ // Shortest string "/Shin"
      new Table(43, 1, -1, new short[] {1386}),
/* NxS[1386] */ // Shortest string "/Shini"
      new Table(28, 1, -1, new short[] {1387}),
/* NxS[1387] */ // Shortest string "/Shinin"
      new Table(27, 1, -1, new short[] {656}),
/* NxS[1388] */ // Shortest string "/Shad"
      new Table(27, 14, -1, new short[] {1389, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 1390}),
/* NxS[1389] */ // Shortest string "/Shade"
      new Table(34, 1, -1, new short[] {568}),
/* NxS[1390] */ // Shortest string "/Shado"
      new Table(47, 1, -1, new short[] {1391}),
/* NxS[1391] */ // Shortest string "/Shadow"
      new Table(60, 1, -1, new short[] {1392}),
/* NxS[1392] */ // Shortest string "/ShadowC"
      new Table(32, 9, -1, new short[] {1393, -1, -1, -1, -1, -1, 
          -1, -1, 1394}),
/* NxS[1393] */ // Shortest string "/ShadowCa"
      new Table(39, 1, -1, new short[] {1050}),
/* NxS[1394] */ // Shortest string "/ShadowCo"
      new Table(26, 1, -1, new short[] {1395}),
/* NxS[1395] */ // Shortest string "/ShadowCol"
      new Table(26, 1, -1, new short[] {1396}),
/* NxS[1396] */ // Shortest string "/ShadowColl"
      new Table(27, 1, -1, new short[] {1397}),
/* NxS[1397] */ // Shortest string "/ShadowColle"
      new Table(38, 1, -1, new short[] {1398}),
/* NxS[1398] */ // Shortest string "/ShadowCollec"
      new Table(31, 1, -1, new short[] {654}),
/* NxS[1399] */ // Shortest string "/Spe"
      new Table(38, 1, -1, new short[] {1400}),
/* NxS[1400] */ // Shortest string "/Spec"
      new Table(36, 1, -1, new short[] {1401}),
/* NxS[1401] */ // Shortest string "/Specu"
      new Table(26, 1, -1, new short[] {710}),
/* NxS[1402] */ // Shortest string "/Sof"
      new Table(31, 1, -1, new short[] {1403}),
/* NxS[1403] */ // Shortest string "/Soft"
      new Table(46, 1, -1, new short[] {1404}),
/* NxS[1404] */ // Shortest string "/SoftV"
      new Table(27, 1, -1, new short[] {1405}),
/* NxS[1405] */ // Shortest string "/SoftVe"
      new Table(56, 1, -1, new short[] {1406}),
/* NxS[1406] */ // Shortest string "/SoftVeg"
      new Table(27, 1, -1, new short[] {1407}),
/* NxS[1407] */ // Shortest string "/SoftVege"
      new Table(31, 1, -1, new short[] {1408}),
/* NxS[1408] */ // Shortest string "/SoftVeget"
      new Table(32, 1, -1, new short[] {1409}),
/* NxS[1409] */ // Shortest string "/SoftVegeta"
      new Table(31, 1, -1, new short[] {814}),
/* NxS[1410] */ // Shortest string "/Sub"
      new Table(68, 53, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 1411}),
/* NxS[1411] */ // Shortest string "/SubS"
      new Table(45, 1, -1, new short[] {1412}),
/* NxS[1412] */ // Shortest string "/SubSh"
      new Table(32, 1, -1, new short[] {1413}),
/* NxS[1413] */ // Shortest string "/SubSha"
      new Table(29, 1, -1, new short[] {1414}),
/* NxS[1414] */ // Shortest string "/SubShad"
      new Table(27, 1, -1, new short[] {1389}),
/* NxS[1415] */ // Shortest string "/Sam"
      new Table(42, 1, -1, new short[] {1416}),
/* NxS[1416] */ // Shortest string "/Samp"
      new Table(26, 1, -1, new short[] {1417}),
/* NxS[1417] */ // Shortest string "/Sampl"
      new Table(27, 1, -1, new short[] {1418}),
/* NxS[1418] */ // Shortest string "/Sample"
      new Table(34, 1, -1, new short[] {1419}),
/* NxS[1419] */ // Shortest string "/Sampler"
      new Table(57, 64, -1, new short[] {1420, 1420, 1420, 1421, -1, -1, 
          -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, -1, 17, -1, 
          -1, 17, 17, 17, 17, 876, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, 923}),
/* NxS[1420] */ // Shortest string "/Sampler1"
      new Table(44, 1, -1, new short[] {881}),
/* NxS[1421] */ // Shortest string "/SamplerC"
      new Table(40, 22, -1, new short[] {1422, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1423}),
/* NxS[1422] */ // Shortest string "/SamplerCo"
      new Table(41, 1, -1, new short[] {1425}),
/* NxS[1423] */ // Shortest string "/SamplerCU"
      new Table(25, 1, -1, new short[] {1424}),
/* NxS[1424] */ // Shortest string "/SamplerCUB"
      new Table(62, 1, -1, new short[] {881}),
/* NxS[1425] */ // Shortest string "/SamplerCom"
      new Table(42, 1, -1, new short[] {1426}),
/* NxS[1426] */ // Shortest string "/SamplerComp"
      new Table(32, 1, -1, new short[] {1427}),
/* NxS[1427] */ // Shortest string "/SamplerCompa"
      new Table(34, 1, -1, new short[] {1428}),
/* NxS[1428] */ // Shortest string "/SamplerCompar"
      new Table(43, 1, -1, new short[] {1429}),
/* NxS[1429] */ // Shortest string "/SamplerCompari"
      new Table(39, 1, -1, new short[] {1430}),
/* NxS[1430] */ // Shortest string "/SamplerComparis"
      new Table(40, 1, -1, new short[] {1431}),
/* NxS[1431] */ // Shortest string "/SamplerCompariso"
      new Table(28, 1, -1, new short[] {922}),
/* NxS[1432] */ // Shortest string "/Ste"
      new Table(28, 1, -1, new short[] {1441}),
/* NxS[1433] */ // Shortest string "/Sta"
      new Table(31, 1, -1, new short[] {1434}),
/* NxS[1434] */ // Shortest string "/Stat"
      new Table(27, 1, -1, new short[] {1435}),
/* NxS[1435] */ // Shortest string "/State"
      new Table(33, 1, -1, new short[] {1436}),
/* NxS[1436] */ // Shortest string "/Stateb"
      new Table(26, 1, -1, new short[] {1437}),
/* NxS[1437] */ // Shortest string "/Statebl"
      new Table(40, 1, -1, new short[] {1438}),
/* NxS[1438] */ // Shortest string "/Stateblo"
      new Table(38, 1, -1, new short[] {1439}),
/* NxS[1439] */ // Shortest string "/Statebloc"
      new Table(35, 1, -1, new short[] {1440}),
/* NxS[1440] */ // Shortest string "/Stateblock"
      new Table(68, 53, -1, new short[] {17, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          17, 17, -1, 17, -1, -1, 17, 17, 17, 17, 876, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, 923}),
/* NxS[1441] */ // Shortest string "/Sten"
      new Table(38, 1, -1, new short[] {1442}),
/* NxS[1442] */ // Shortest string "/Stenc"
      new Table(43, 1, -1, new short[] {718}),
/* NxS[1443] */ // Shortest string "/Set"
      new Table(55, 1, -1, new short[] {1451}),
/* NxS[1444] */ // Shortest string "/Sep"
      new Table(32, 1, -1, new short[] {1445}),
/* NxS[1445] */ // Shortest string "/Sepa"
      new Table(34, 1, -1, new short[] {1446}),
/* NxS[1446] */ // Shortest string "/Separ"
      new Table(32, 1, -1, new short[] {1447}),
/* NxS[1447] */ // Shortest string "/Separa"
      new Table(31, 1, -1, new short[] {1448}),
/* NxS[1448] */ // Shortest string "/Separat"
      new Table(27, 1, -1, new short[] {1449}),
/* NxS[1449] */ // Shortest string "/Separate"
      new Table(30, 1, -1, new short[] {1450}),
/* NxS[1450] */ // Shortest string "/SeparateS"
      new Table(42, 1, -1, new short[] {1381}),
/* NxS[1451] */ // Shortest string "/SetT"
      new Table(27, 1, -1, new short[] {1452}),
/* NxS[1452] */ // Shortest string "/SetTe"
      new Table(48, 1, -1, new short[] {1453}),
/* NxS[1453] */ // Shortest string "/SetTex"
      new Table(31, 1, -1, new short[] {1454}),
/* NxS[1454] */ // Shortest string "/SetText"
      new Table(36, 1, -1, new short[] {1455}),
/* NxS[1455] */ // Shortest string "/SetTextu"
      new Table(34, 1, -1, new short[] {547}),
/* NxS[1456] */ // Shortest string "/de"
      new Table(31, 26, -1, new short[] {1476, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 1477}),
/* NxS[1457] */ // Shortest string "/dd"
      new Table(48, 3, -1, new short[] {1469, -1, 1469}),
/* NxS[1458] */ // Shortest string "/do"
      new Table(68, 59, -1, new short[] {17, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          17, 17, -1, 17, -1, -1, 17, 17, 17, 17, 876, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, 597, 
          -1, -1, -1, -1, 1466}),
/* NxS[1459] */ // Shortest string "/di"
      new Table(39, 1, -1, new short[] {1460}),
/* NxS[1460] */ // Shortest string "/dis"
      new Table(31, 8, -1, new short[] {1461, -1, -1, -1, -1, -1, 
          -1, 1462}),
/* NxS[1461] */ // Shortest string "/dist"
      new Table(32, 1, -1, new short[] {1464}),
/* NxS[1462] */ // Shortest string "/disc"
      new Table(32, 1, -1, new short[] {1463}),
/* NxS[1463] */ // Shortest string "/disca"
      new Table(34, 1, -1, new short[] {1039}),
/* NxS[1464] */ // Shortest string "/dista"
      new Table(28, 1, -1, new short[] {1465}),
/* NxS[1465] */ // Shortest string "/distan"
      new Table(38, 1, -1, new short[] {606}),
/* NxS[1466] */ // Shortest string "/dou"
      new Table(33, 1, -1, new short[] {1467}),
/* NxS[1467] */ // Shortest string "/doub"
      new Table(26, 1, -1, new short[] {1468}),
/* NxS[1468] */ // Shortest string "/doubl"
      new Table(27, 1, -1, new short[] {1100}),
/* NxS[1469] */ // Shortest string "/ddx"
      new Table(68, 44, -1, new short[] {597, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1470, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 15}),
/* NxS[1470] */ // Shortest string "/ddx_"
      new Table(37, 2, -1, new short[] {1471, 1472}),
/* NxS[1471] */ // Shortest string "/ddx_f"
      new Table(43, 1, -1, new short[] {1475}),
/* NxS[1472] */ // Shortest string "/ddx_c"
      new Table(40, 1, -1, new short[] {1473}),
/* NxS[1473] */ // Shortest string "/ddx_co"
      new Table(32, 1, -1, new short[] {1474}),
/* NxS[1474] */ // Shortest string "/ddx_coa"
      new Table(34, 1, -1, new short[] {1352}),
/* NxS[1475] */ // Shortest string "/ddx_fi"
      new Table(28, 1, -1, new short[] {606}),
/* NxS[1476] */ // Shortest string "/det"
      new Table(27, 1, -1, new short[] {1480}),
/* NxS[1477] */ // Shortest string "/deg"
      new Table(34, 1, -1, new short[] {1478}),
/* NxS[1478] */ // Shortest string "/degr"
      new Table(27, 1, -1, new short[] {1479}),
/* NxS[1479] */ // Shortest string "/degre"
      new Table(27, 1, -1, new short[] {1027}),
/* NxS[1480] */ // Shortest string "/dete"
      new Table(34, 1, -1, new short[] {1481}),
/* NxS[1481] */ // Shortest string "/deter"
      new Table(41, 1, -1, new short[] {1482}),
/* NxS[1482] */ // Shortest string "/determ"
      new Table(43, 1, -1, new short[] {1483}),
/* NxS[1483] */ // Shortest string "/determi"
      new Table(28, 1, -1, new short[] {1484}),
/* NxS[1484] */ // Shortest string "/determin"
      new Table(32, 1, -1, new short[] {1078}),
/* NxS[1485] */ // Shortest string "/na"
      new Table(41, 1, -1, new short[] {1512}),
/* NxS[1486] */ // Shortest string "/no"
      new Table(34, 10, -1, new short[] {1487, -1, -1, -1, -1, -1, 
          -1, -1, 1488, 1489}),
/* NxS[1487] */ // Shortest string "/nor"
      new Table(41, 1, -1, new short[] {1508}),
/* NxS[1488] */ // Shortest string "/nop"
      new Table(27, 1, -1, new short[] {1500}),
/* NxS[1489] */ // Shortest string "/noi"
      new Table(28, 12, -1, new short[] {1490, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 606}),
/* NxS[1490] */ // Shortest string "/noin"
      new Table(31, 1, -1, new short[] {1491}),
/* NxS[1491] */ // Shortest string "/noint"
      new Table(27, 1, -1, new short[] {1492}),
/* NxS[1492] */ // Shortest string "/nointe"
      new Table(34, 1, -1, new short[] {1493}),
/* NxS[1493] */ // Shortest string "/nointer"
      new Table(42, 1, -1, new short[] {1494}),
/* NxS[1494] */ // Shortest string "/nointerp"
      new Table(40, 1, -1, new short[] {1495}),
/* NxS[1495] */ // Shortest string "/nointerpo"
      new Table(26, 1, -1, new short[] {1496}),
/* NxS[1496] */ // Shortest string "/nointerpol"
      new Table(32, 1, -1, new short[] {1497}),
/* NxS[1497] */ // Shortest string "/nointerpola"
      new Table(31, 1, -1, new short[] {1498}),
/* NxS[1498] */ // Shortest string "/nointerpolat"
      new Table(43, 1, -1, new short[] {1499}),
/* NxS[1499] */ // Shortest string "/nointerpolati"
      new Table(40, 1, -1, new short[] {1311}),
/* NxS[1500] */ // Shortest string "/nope"
      new Table(34, 1, -1, new short[] {1501}),
/* NxS[1501] */ // Shortest string "/noper"
      new Table(39, 1, -1, new short[] {1502}),
/* NxS[1502] */ // Shortest string "/nopers"
      new Table(42, 1, -1, new short[] {1503}),
/* NxS[1503] */ // Shortest string "/nopersp"
      new Table(27, 1, -1, new short[] {1504}),
/* NxS[1504] */ // Shortest string "/noperspe"
      new Table(38, 1, -1, new short[] {1505}),
/* NxS[1505] */ // Shortest string "/noperspec"
      new Table(31, 1, -1, new short[] {1506}),
/* NxS[1506] */ // Shortest string "/noperspect"
      new Table(43, 1, -1, new short[] {1507}),
/* NxS[1507] */ // Shortest string "/noperspecti"
      new Table(51, 1, -1, new short[] {926}),
/* NxS[1508] */ // Shortest string "/norm"
      new Table(32, 1, -1, new short[] {1509}),
/* NxS[1509] */ // Shortest string "/norma"
      new Table(26, 1, -1, new short[] {1510}),
/* NxS[1510] */ // Shortest string "/normal"
      new Table(43, 1, -1, new short[] {1511}),
/* NxS[1511] */ // Shortest string "/normali"
      new Table(54, 1, -1, new short[] {606}),
/* NxS[1512] */ // Shortest string "/nam"
      new Table(27, 1, -1, new short[] {1513}),
/* NxS[1513] */ // Shortest string "/name"
      new Table(39, 1, -1, new short[] {1514}),
/* NxS[1514] */ // Shortest string "/names"
      new Table(42, 1, -1, new short[] {1155}),
/* NxS[1515] */ // Shortest string "/ex"
      new Table(31, 12, -1, new short[] {1516, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 1330}),
/* NxS[1516] */ // Shortest string "/ext"
      new Table(27, 1, -1, new short[] {1310}),
/* NxS[1517] */ // Shortest string "/le"
      new Table(28, 7, -1, new short[] {1526, -1, -1, -1, -1, -1, 
          1193}),
/* NxS[1518] */ // Shortest string "/ld"
      new Table(27, 1, -1, new short[] {1269}),
/* NxS[1519] */ // Shortest string "/lo"
      new Table(56, 1, -1, new short[] {1524}),
/* NxS[1520] */ // Shortest string "/li"
      new Table(28, 4, -1, new short[] {1521, -1, -1, 597}),
/* NxS[1521] */ // Shortest string "/lin"
      new Table(27, 1, -1, new short[] {1522}),
/* NxS[1522] */ // Shortest string "/line"
      new Table(68, 55, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          13, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 14, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          1523}),
/* NxS[1523] */ // Shortest string "/linea"
      new Table(29, 6, -1, new short[] {1348, -1, -1, -1, -1, 881}),
/* NxS[1524] */ // Shortest string "/log"
      new Table(21, 48, -1, new short[] {15, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1525, 597, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 597}),
/* NxS[1525] */ // Shortest string "/log1"
      new Table(64, 1, -1, new short[] {597}),
/* NxS[1526] */ // Shortest string "/len"
      new Table(56, 1, -1, new short[] {1255}),
/* NxS[1527] */ // Shortest string "/Bl"
      new Table(27, 1, -1, new short[] {1541}),
/* NxS[1528] */ // Shortest string "/Bu"
      new Table(37, 1, -1, new short[] {1538}),
/* NxS[1529] */ // Shortest string "/Bi"
      new Table(28, 1, -1, new short[] {1530}),
/* NxS[1530] */ // Shortest string "/Bin"
      new Table(29, 1, -1, new short[] {1531}),
/* NxS[1531] */ // Shortest string "/Bind"
      new Table(60, 55, -1, new short[] {1532, -1, -1, -1, -1, -1, 
          -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, 7, -1, -1, 7, 7, 
          7, 7, 544, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
          7}),
/* NxS[1532] */ // Shortest string "/BindC"
      new Table(45, 1, -1, new short[] {1533}),
/* NxS[1533] */ // Shortest string "/BindCh"
      new Table(32, 1, -1, new short[] {1534}),
/* NxS[1534] */ // Shortest string "/BindCha"
      new Table(28, 1, -1, new short[] {1535}),
/* NxS[1535] */ // Shortest string "/BindChan"
      new Table(28, 1, -1, new short[] {1536}),
/* NxS[1536] */ // Shortest string "/BindChann"
      new Table(27, 1, -1, new short[] {1537}),
/* NxS[1537] */ // Shortest string "/BindChanne"
      new Table(26, 1, -1, new short[] {821}),
/* NxS[1538] */ // Shortest string "/Buf"
      new Table(37, 1, -1, new short[] {1539}),
/* NxS[1539] */ // Shortest string "/Buff"
      new Table(27, 1, -1, new short[] {1540}),
/* NxS[1540] */ // Shortest string "/Buffe"
      new Table(34, 1, -1, new short[] {882}),
/* NxS[1541] */ // Shortest string "/Ble"
      new Table(28, 1, -1, new short[] {1542}),
/* NxS[1542] */ // Shortest string "/Blen"
      new Table(29, 1, -1, new short[] {1543}),
/* NxS[1543] */ // Shortest string "/Blend"
      new Table(68, 53, -1, new short[] {8, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          7, 7, -1, 7, -1, -1, 7, 7, 7, 7, 544, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 923}),
/* NxS[1544] */ // Shortest string "\"\\"
      new Table(0, 1, 34, new short[] {-1}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = MapC(code) - NxS[state].min;
            if (idx < 0) idx += 90;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '{white_space}',	Shortest string "\t"
/* Ignore */
            break;
        case 2: // Recognized ':({blank})*{keywordsSpeical}({white_space}|;)',	Shortest string ":FOG\t"
return (int)ShaderlabToken.KEYWORDSPECIAL;
            break;
        case 3: // Recognized '"Shader"{blank}*({white_space}|{symbol})',	Shortest string "Shader/"
        case 4: // Recognized '"Shader"{blank}*({white_space}|{symbol})',	Shortest string "Shader\x20"
return (int)ShaderlabToken.UNITYBLOCKKEYWORD;
            break;
        case 5: // Recognized '({white_space}|{symbol}){unityKeywordsWithPara}({blank}+{words})*{white_space}',	Shortest string "/#pragma\t"
        case 6: // Recognized '({white_space}|{symbol}){unityKeywordsWithPara}({blank}+{words})*{white_space}',	Shortest string "/#pragma\x20"
return (int)ShaderlabToken.UNITYNONBLOCKKEYWORD;
            break;
        case 7: // Recognized '({white_space}|{symbol}){unityNonBlockKeywords}{blank}*({white_space}|{symbol})',	Shortest string "/Sub/"
        case 8: // Recognized '({white_space}|{symbol}){unityNonBlockKeywords}{blank}*({white_space}|{symbol})',	Shortest string "/Sub\x20"
        case 19: // Recognized '({white_space}|{symbol}){unityNonBlockKeywords}{blank}*({white_space}|{symbol})',	Shortest string "/Range("
        case 20: // Recognized '({white_space}|{symbol}){unityNonBlockKeywords}{blank}*({white_space}|{symbol})',	Shortest string "/Range\x20"
return (int)ShaderlabToken.UNITYNONBLOCKKEYWORD;
            break;
        case 9: // Recognized '({white_space}|{symbol}){unityBlockKeywords}{blank}*({white_space}|{symbol})',	Shortest string "/Pass/"
        case 10: // Recognized '({white_space}|{symbol}){unityBlockKeywords}{blank}*({white_space}|{symbol})',	Shortest string "/Pass\x20"
return (int)ShaderlabToken.UNITYBLOCKKEYWORD;
            break;
        case 11: // Recognized '({white_space}|{symbol}){unityDataType}({white_space}+|\(|\))',	Shortest string "/2D\t"
        case 12: // Recognized '({white_space}|{symbol}){unityDataType}({white_space}+|\(|\))',	Shortest string "/2D("
return (int)ShaderlabToken.DATATYPE;
            break;
        case 13: // Recognized '({white_space}|{symbol}){datatype}({white_space}+|\(|\))',	Shortest string "/int\t"
        case 14: // Recognized '({white_space}|{symbol}){datatype}({white_space}+|\(|\))',	Shortest string "/int("
return (int)ShaderlabToken.DATATYPE;
            break;
        case 15: // Recognized '({white_space}|{symbol}){function}{blank}*\(',	Shortest string "/log("
return (int)ShaderlabToken.FUNCTION;
            break;
        case 16: // Recognized '({white_space}|{symbol}){unityFunction}{blank}*\(',	Shortest string "/UnpackNormal("
return (int)ShaderlabToken.UNITYFUNCTION;
            break;
        case 17: // Recognized '({white_space}|{symbol}){keyword}({white_space}|{symbol})',	Shortest string "/do/"
        case 18: // Recognized '({white_space}|{symbol}){keyword}({white_space}|{symbol})',	Shortest string "/Buffer\t"
return (int)ShaderlabToken.KEYWORD;
            break;
        case 21: // Recognized '\"(\\.|[^\\"])*\"',	Shortest string "\"\""
return (int)ShaderlabToken.STRING_LITERAL;
            break;
        case 22: // Recognized '"//"(.)*',	Shortest string "//"
return (int)ShaderlabToken.COMMENT_LINE;
            break;
        case 23: // Recognized '{CmntStart}{words}\**',	Shortest string "/*"
        case 24: // Recognized '{CmntStart}{words}\**',	Shortest string "/**"
BEGIN(COMMENT); return (int)ShaderlabToken.COMMENT;
            break;
        case 25: // Recognized '{CmntStart}{words}\**{CmntEnd}',	Shortest string "/**/"
return (int)ShaderlabToken.COMMENT;
            break;
        case 26: // In <COMMENT> Recognized '{words}\**',	Shortest string ""
        case 27: // In <COMMENT> Recognized '\n',	Shortest string ""
        case 28: // In <COMMENT> Recognized '{words}\**',	Shortest string "/"
        case 29: // In <COMMENT> Recognized '{words}\**',	Shortest string "*"
return (int)ShaderlabToken.COMMENT;
            break;
        case 30: // In <COMMENT> Recognized '{words}\**{CmntEnd}',	Shortest string "*/"
BEGIN(INITIAL); return (int)ShaderlabToken.COMMENT;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner

// ==============================================================
// <auto-generated>
// This code automatically produced from an embedded resource.
// Do not edit this file, or it will become incompatible with 
// the specification from which it was generated.
// </auto-generated>
// ==============================================================

// Code copied from GPLEX embedded resource
    [Serializable]
    public class BufferException : Exception
    {
        public BufferException() { }
        public BufferException(string message) : base(message) { }
        public BufferException(string message, Exception innerException)
            : base(message, innerException) { }
        protected BufferException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }

    public abstract class ScanBuff
    {
        private string fileNm;

        public const int EndOfFile = -1;
        public const int UnicodeReplacementChar = 0xFFFD;

        public bool IsFile { get { return (fileNm != null); } }
        public string FileName { get { return fileNm; } set { fileNm = value; } }

        public abstract int Pos { get; set; }
        public abstract int Read();
        public virtual void Mark() { }

        public abstract string GetString(int begin, int limit);

        public static ScanBuff GetBuffer(string source)
        {
            return new StringBuffer(source);
        }

        public static ScanBuff GetBuffer(IList<string> source)
        {
            return new LineBuffer(source);
        }

#if (!NOFILES)
        public static ScanBuff GetBuffer(Stream source)
        {
            return new BuildBuffer(source);
        }

#if (!BYTEMODE)
        public static ScanBuff GetBuffer(Stream source, int fallbackCodePage)
        {
            return new BuildBuffer(source, fallbackCodePage);
        }
#endif // !BYTEMODE
#endif // !NOFILES
    }

    #region Buffer classes

    // ==============================================================
    // =====  Definitions for various ScanBuff derived classes   ====
    // ==============================================================
    // ===============         String input          ================
    // ==============================================================

    /// <summary>
    /// This class reads characters from a single string as
    /// required, for example, by Visual Studio language services
    /// </summary>
    sealed class StringBuffer : ScanBuff
    {
        string str;        // input buffer
        int bPos;          // current position in buffer
        int sLen;

        public StringBuffer(string source)
        {
            this.str = source;
            this.sLen = source.Length;
            this.FileName = null;
        }

        public override int Read()
        {
            if (bPos < sLen) return str[bPos++];
            else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see new line
            else { bPos++; return EndOfFile; }                // two strikes and you're out!
        }

        public override string GetString(int begin, int limit)
        {
            //  "limit" can be greater than sLen with the BABEL
            //  option set.  Read returns a "virtual" EOL if
            //  an attempt is made to read past the end of the
            //  string buffer.  Without the guard any attempt 
            //  to fetch yytext for a token that includes the 
            //  EOL will throw an index exception.
            if (limit > sLen) limit = sLen;
            if (limit <= begin) return "";
            else return str.Substring(begin, limit - begin);
        }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }

        public override string ToString() { return "StringBuffer"; }
    }

    // ==============================================================
    //  The LineBuff class contributed by Nigel Horspool, 
    //  nigelh@cs.uvic.cs
    // ==============================================================

    sealed class LineBuffer : ScanBuff
    {
        IList<string> line;    // list of source lines from a file
        int numLines;          // number of strings in line list
        string curLine;        // current line in that list
        int cLine;             // index of current line in the list
        int curLen;            // length of current line
        int curLineStart;      // position of line start in whole file
        int curLineEnd;        // position of line end in whole file
        int maxPos;            // max position ever visited in whole file
        int cPos;              // ordinal number of code in source

        // Constructed from a list of strings, one per source line.
        // The lines have had trailing '\n' characters removed.
        public LineBuffer(IList<string> lineList)
        {
            line = lineList;
            numLines = line.Count;
            cPos = curLineStart = 0;
            curLine = (numLines > 0 ? line[0] : "");
            maxPos = curLineEnd = curLen = curLine.Length;
            cLine = 1;
            FileName = null;
        }

        public override int Read()
        {
            if (cPos < curLineEnd)
                return curLine[cPos++ - curLineStart];
            if (cPos++ == curLineEnd)
                return '\n';
            if (cLine >= numLines)
                return EndOfFile;
            curLine = line[cLine];
            curLen = curLine.Length;
            curLineStart = curLineEnd + 1;
            curLineEnd = curLineStart + curLen;
            if (curLineEnd > maxPos)
                maxPos = curLineEnd;
            cLine++;
            return curLen > 0 ? curLine[0] : '\n';
        }

        // To speed up searches for the line containing a position
        private int cachedPosition;
        private int cachedIxdex;
        private int cachedLineStart;

        // Given a position pos within the entire source, the results are
        //   ix     -- the index of the containing line
        //   lstart -- the position of the first character on that line
        private void findIndex(int pos, out int ix, out int lstart)
        {
            if (pos >= cachedPosition)
            {
                ix = cachedIxdex; lstart = cachedLineStart;
            }
            else
            {
                ix = lstart = 0;
            }
            while (ix < numLines)
            {
                int len = line[ix].Length + 1;
                if (pos < lstart + len) break;
                lstart += len;
                ix++;
            }
            cachedPosition = pos;
            cachedIxdex = ix;
            cachedLineStart = lstart;
        }

        public override string GetString(int begin, int limit)
        {
            if (begin >= maxPos || limit <= begin) return "";
            int endIx, begIx, endLineStart, begLineStart;
            findIndex(begin, out begIx, out begLineStart);
            int begCol = begin - begLineStart;
            findIndex(limit, out endIx, out endLineStart);
            int endCol = limit - endLineStart;
            string s = line[begIx];
            if (begIx == endIx)
            {
                // the usual case, substring all on one line
                return (endCol <= s.Length) ?
                    s.Substring(begCol, endCol - begCol)
                    : s.Substring(begCol) + "\n";
            }
            // the string spans multiple lines, yuk!
            StringBuilder sb = new StringBuilder();
            if (begCol < s.Length)
                sb.Append(s.Substring(begCol));
            for (; ; )
            {
                sb.Append("\n");
                s = line[++begIx];
                if (begIx >= endIx) break;
                sb.Append(s);
            }
            if (endCol <= s.Length)
            {
                sb.Append(s.Substring(0, endCol));
            }
            else
            {
                sb.Append(s);
                sb.Append("\n");
            }
            return sb.ToString();
        }

        public override int Pos
        {
            get { return cPos; }
            set
            {
                cPos = value;
                findIndex(cPos, out cLine, out curLineStart);
                // cLine should be the *next* line after curLine.
                curLine = (cLine < numLines ? line[cLine++] : "");
                curLineEnd = curLineStart + curLine.Length;
            }
        }

        public override string ToString() { return "LineBuffer"; }
    }

#if (!NOFILES)
    // ==============================================================
    // =====     class BuildBuff : for unicode text files    ========
    // ==============================================================

    class BuildBuffer : ScanBuff
    {
        // Double buffer for char stream.
        class BufferElement
        {
            StringBuilder bldr = new StringBuilder();
            StringBuilder next = new StringBuilder();
            int minIx;
            int maxIx;
            int brkIx;
            bool appendToNext;

            internal BufferElement() { }

            internal int MaxIndex { get { return maxIx; } }
            // internal int MinIndex { get { return minIx; } }

            internal char this[int index]
            {
                get
                {
                    if (index < minIx || index >= maxIx)
                        throw new BufferException("Index was outside data buffer");
                    else if (index < brkIx)
                        return bldr[index - minIx];
                    else
                        return next[index - brkIx];
                }
            }

            internal void Append(char[] block, int count)
            {
                maxIx += count;
                if (appendToNext)
                    this.next.Append(block, 0, count);
                else
                {
                    this.bldr.Append(block, 0, count);
                    brkIx = maxIx;
                    appendToNext = true;
                }
            }

            internal string GetString(int start, int limit)
            {
                if (limit <= start)
                    return "";
                if (start >= minIx && limit <= maxIx)
                    if (limit < brkIx) // String entirely in bldr builder
                        return bldr.ToString(start - minIx, limit - start);
                    else if (start >= brkIx) // String entirely in next builder
                        return next.ToString(start - brkIx, limit - start);
                    else // Must do a string-concatenation
                        return
                            bldr.ToString(start - minIx, brkIx - start) +
                            next.ToString(0, limit - brkIx);
                else
                    throw new BufferException("String was outside data buffer");
            }

            internal void Mark(int limit)
            {
                if (limit > brkIx + 16) // Rotate blocks
                {
                    StringBuilder temp = bldr;
                    bldr = next;
                    next = temp;
                    next.Length = 0;
                    minIx = brkIx;
                    brkIx = maxIx;
                }
            }
        }

        BufferElement data = new BufferElement();

        int bPos;            // Postion index in the StringBuilder
        BlockReader NextBlk; // Delegate that serves char-arrays;

        private string EncodingName
        {
            get
            {
                StreamReader rdr = NextBlk.Target as StreamReader;
                return (rdr == null ? "raw-bytes" : rdr.CurrentEncoding.BodyName);
            }
        }

        public BuildBuffer(Stream stream)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Raw(stream);
        }

#if (!BYTEMODE)
        public BuildBuffer(Stream stream, int fallbackCodePage)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Get(stream, fallbackCodePage);
        }
#endif

        /// <summary>
        /// Marks a conservative lower bound for the buffer,
        /// allowing space to be reclaimed.  If an application 
        /// needs to call GetString at arbitrary past locations 
        /// in the input stream, Mark() is not called.
        /// </summary>
        public override void Mark() { data.Mark(bPos - 2); }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }


        /// <summary>
        /// Read returns the ordinal number of the next char, or 
        /// EOF (-1) for an end of stream.  Note that the next
        /// code point may require *two* calls of Read().
        /// </summary>
        /// <returns></returns>
        public override int Read()
        {
            //
            //  Characters at positions 
            //  [data.offset, data.offset + data.bldr.Length)
            //  are available in data.bldr.
            //
            if (bPos < data.MaxIndex)
            {
                // ch0 cannot be EOF
                return (int)data[bPos++];
            }
            else // Read from underlying stream
            {
                // Experimental code, blocks of page size
                char[] chrs = new char[4096];
                int count = NextBlk(chrs, 0, 4096);
                if (count == 0)
                    return EndOfFile;
                else
                {
                    data.Append(chrs, count);
                    return (int)data[bPos++];
                }
            }
        }

        public override string GetString(int begin, int limit)
        {
            return data.GetString(begin, limit);
        }

        public override string ToString()
        {
            return "StringBuilder buffer, encoding: " + this.EncodingName;
        }
    }

    // =============== End ScanBuff-derived classes ==================

    public delegate int BlockReader(char[] block, int index, int number);

    // A delegate factory, serving up a delegate that
    // reads a block of characters from the underlying
    // encoded stream, via a StreamReader object.
    //
    public static class BlockReaderFactory
    {
        public static BlockReader Raw(Stream stream)
        {
            return delegate(char[] block, int index, int number)
            {
                byte[] b = new byte[number];
                int count = stream.Read(b, 0, number);
                int i = 0;
                int j = index;
                for (; i < count; i++, j++)
                    block[j] = (char)b[i];
                return count;
            };
        }

#if (!BYTEMODE)
        public static BlockReader Get(Stream stream, int fallbackCodePage)
        {
            Encoding encoding;
            int preamble = Preamble(stream);

            if (preamble != 0)  // There is a valid BOM here!
                encoding = Encoding.GetEncoding(preamble);
            else if (fallbackCodePage == -1) // Fallback is "raw" bytes
                return Raw(stream);
            else if (fallbackCodePage != -2) // Anything but "guess"
                encoding = Encoding.GetEncoding(fallbackCodePage);
            else // This is the "guess" option
            {
                int guess = new Guesser(stream).GuessCodePage();
                stream.Seek(0, SeekOrigin.Begin);
                if (guess == -1) // ==> this is a 7-bit file
                    encoding = Encoding.ASCII;
                else if (guess == 65001)
                    encoding = Encoding.UTF8;
                else             // ==> use the machine default
                    encoding = Encoding.Default;
            }
            StreamReader reader = new StreamReader(stream, encoding);
            return reader.Read;
        }

        static int Preamble(Stream stream)
        {
            int b0 = stream.ReadByte();
            int b1 = stream.ReadByte();

            if (b0 == 0xfe && b1 == 0xff)
                return 1201; // UTF16BE
            if (b0 == 0xff && b1 == 0xfe)
                return 1200; // UTF16LE

            int b2 = stream.ReadByte();
            if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                return 65001; // UTF8
            //
            // There is no unicode preamble, so we
            // return denoter for the machine default.
            //
            stream.Seek(0, SeekOrigin.Begin);
            return 0;
        }
#endif // !BYTEMODE
    }
#endif // !NOFILES
    #endregion Buffer classes

    // ==============================================================
    // ============      class CodePageHandling         =============
    // ==============================================================
#if (!NOFILES)
    public static class CodePageHandling
    {
        public static int GetCodePage(string option)
        {
            string command = option.ToUpperInvariant();
            if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
                command = command.Substring(9);
            try
            {
                if (command.Equals("RAW"))
                    return -1;
                else if (command.Equals("GUESS"))
                    return -2;
                else if (command.Equals("DEFAULT"))
                    return 0;
                else if (char.IsDigit(command[0]))
                    return int.Parse(command, CultureInfo.InvariantCulture);
                else
                {
                    Encoding enc = Encoding.GetEncoding(command);
                    return enc.CodePage;
                }
            }
            catch (FormatException)
            {
                Console.Error.WriteLine(
                    "Invalid format \"{0}\", using machine default", option);
            }
            catch (ArgumentException)
            {
                Console.Error.WriteLine(
                    "Unknown code page \"{0}\", using machine default", option);
            }
            return 0;
        }
    }
#region guesser
#if (!BYTEMODE)
    // ==============================================================
    // ============          Encoding Guesser           =============
    // ==============================================================

    /// <summary>
    /// This class provides a simple finite state automaton that
    /// scans the file looking for (1) valid UTF-8 byte patterns,
    /// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
    /// The method then guesses whether it is UTF-8 or maybe some 
    /// local machine default encoding.  This works well for the
    /// various Latin encodings.
    /// </summary>
    internal class Guesser
    {
        ScanBuff buffer;

        public int GuessCodePage() { return Scan(); }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int EndToken = 0;

        #region user code
        /* 
         *  Reads the bytes of a file to determine if it is 
         *  UTF-8 or a single-byte code page file.
         */
        public long utfX;
        public long uppr;
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;

        #region ScannerTables
        static int[] startState = new int[] { 11, 0 };

        #region CharacterMap
        static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
        #endregion

        static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };


        [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        // Reason for suppression: cannot have self-reference in array initializer.
        static Guesser()
        {
            nextState[7] = nextState[2];
            nextState[9] = nextState[2];
            nextState[10] = nextState[2];
        }

        int NextState()
        {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                return nextState[state][map[code]];
        }
        #endregion

        public Guesser(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source)
        {
            this.buffer = new BuildBuffer(source);
            code = buffer.Read();
        }

        int Scan()
        {
            for (; ; )
            {
                int next;
                state = currentStart;
                while ((next = NextState()) == goStart)
                    code = buffer.Read();

                state = next;
                code = buffer.Read();

                while ((next = NextState()) > eofNum)
                {
                    state = next;
                    code = buffer.Read();
                }
                if (state <= maxAccept)
                {
                    #region ActionSwitch
#pragma warning disable 162
                    switch (state)
                    {
                        case eofNum:
                            switch (currentStart)
                            {
                                case 11:
                                    if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                                    else if (uppr * 10 > utfX) return 0;   /* default code page */
                                    else return 65001;                     /* UTF-8 encoding */
                                    break;
                            }
                            return EndToken;
                        case 1: // Recognized '{Upper128}',	Shortest string "\xC0"
                        case 2: // Recognized '{Upper128}',	Shortest string "\x80"
                        case 3: // Recognized '{Upper128}',	Shortest string "\xE0"
                        case 4: // Recognized '{Upper128}',	Shortest string "\xF0"
                            uppr++;
                            break;
                        case 5: // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                            uppr += 2;
                            break;
                        case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                            uppr += 3;
                            break;
                        case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                            utfX += 3;
                            break;
                        case 8: // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                            uppr += 2;
                            break;
                        case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                            utfX += 2;
                            break;
                        case 10: // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                            utfX++;
                            break;
                        default:
                            break;
                    }
#pragma warning restore 162
                    #endregion
                }
            }
        }
    } // end class Guesser
    
#endif // !BYTEMODE
#endregion
#endif // !NOFILES

// End of code copied from embedded resource

} // end namespace
